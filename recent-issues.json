{"issues":[{"repoOwner":"coala","repoName":"coala","updatedAtMs":1566406051000,"issue":{"htmlUrl":"https://github.com/coala/coala/issues/6065","number":6065,"title":"macOS brew pip install results in Permission denied: '/usr/local/man'","body":"$ brew install pkg-config libxml2\nUpdating Homebrew...\n\n==> Homebrew is run entirely by unpaid volunteers. Please consider donating:\n\n  https://github.com/Homebrew/brew#donations\n\n==> Auto-updated Homebrew!\n\nUpdated 2 taps (homebrew/cask and homebrew/core).\n\n==> New Formulae\n\nahoy                                     libsixel\naliyun-cli                               libspng\nallureofthestars                         libvirt-glib\namtk                                     libvmaf\nanime-downloader                         libvncserver\nantibody                                 libzt\nanycable-go                              lizard\nanyenv                                   llvm@6\naom                                      llvm@7\nappstream-glib                           lsd\naravis                                   lsusb\nastrometry-net                           luarocks\nasyncplusplus                            luit\natlantis                                 mage\natomist-cli                              mallet\naws-google-auth                          man-db\naws-iam-authenticator                    mariadb@10.3\naws-okta                                 maven@3.5\nazure-storage-cpp                        mdbook\nbadtouch                                 mesa\nbazelisk                                 micronaut\nbenthos                                  minica\nbitwise                                  miniserve\nblack                                    mkcert\nbloaty                                   moarvm\nbluetoothconnector                       molten-vk\nborgmatic                                mongodb@3.6\nboringtun                                needle\nbreezy                                   netlify-cli\nbuildkit                                 newman\nbumpversion                              nlohmann-json\nbundletool                               nng\nc-blosc                                  node@10\ncafeobj                                  nqp\ncarla                                    nu-smv\ncash-cli                                 nwchem\ncassandra-reaper                         objfw\ncatch2                                   oclgrind\nccls                                     opa\ncfn-lint                                 opencv@3\ncgit                                     openkim-models\nchafa                                    opensubdiv\ncjson                                    opentracing-cpp\nclojure-lsp                              operator-sdk\nclzip                                    ospray\ncmdshelf                                 osqp\ncmix                                     osx-cpu-temp\ncmusfm                                   otf2\ncontentful-cli                           oxipng\ncpl                                      pagmo\ncpp-gsl                                  pass-otp\ncql                                      pcapplusplus\ncreate-dmg                               perltidy\ncryptominisat                            peru\ncsound                                   petsc-complex\ncstore_fdw                               phpmd\ncsvq                                     phpstan\ncubelib                                  picat\ncurl-openssl                             pict\ncwlogs                                   pijul\ncxxopts                                  pipx\ncypher-shell                             postgresql@10\ndav1d                                    pprint\ndbmate                                   prettier\ndeno                                     procs\ndevspace                                 proper\ndhall                                    proteinortho\ndhall-bash                               protobuf@3.6\ndiceware                                 protoc-gen-go\ndiskus                                   prototool\ndive                                     pulp\ndmg2img                                  pulumi\ndnscontrol                               pyinstaller\ndocker-credential-helper-ecr             pyside\ndocker-machine-driver-hyperkit           python-yq\ndocker-machine-driver-vmware             qalculate-gtk\ndockerize                                quickjs\ndrone-cli                                rakudo\ndust                                     range-v3\neasyengine                               rargs\neg-examples                              rbspy\nembree                                   re-flex\nentityx                                  react-native-cli\nerlang@21                                redis@4.0\neslint                                   reprepro\nesptool                                  riff\nfasttext                                 rke\nfaudio                                   ruby@2.4\nfauna-shell                              ruby@2.5\nfff                                      s2geometry\nffsend                                   s3ql\nfluxctl                                  scala@2.12\nfrpc                                     scdoc\nfrps                                     schema-evolution-manager\nfx                                       scws\ngambit                                   sd\ngambit-scheme                            serve\ngatsby-cli                               serverless\ngcc@8                                    sfst\ngeant4                                   sha3sum\ngel                                      shadowenv\ngeogram                                  shellz\ngerbil-scheme                            ship\nghr                                      signal-cli\ngit-absorb                               simple-scan\ngitleaks                                 sk\ngitmoji                                  skopeo\ngnunet                                   sloc\ngo@1.10                                  smimesign\ngo@1.11                                  sn0int\ngolang-migrate                           sng\ngoreman                                  solr@7.7\ngptfdisk                                 sonarqube-lts\ngradio                                   sonobuoy\ngrpc-swift                               sourcedocs\ngrpcurl                                  spice-gtk\ngtranslator                              spice-protocol\nh3                                       spirv-cross\nhealpix                                  spirv-tools\nheatshrink                               squashfuse\nhelmfile                                 stanford-corenlp\nhelmsman                                 starship\nhexyl                                    step\nhey                                      stolon\nhomeassistant-cli                        swagger-codegen@2\nhyperkit                                 swagger2markup-cli\ni2pd                                     swig@3\ni386-elf-binutils                        switch-lan-play\ni386-elf-gcc                             tass64\ni386-elf-gdb                             tdlib\ni386-elf-grub                            tealdeer\ninadyn                                   termshark\ninclude-what-you-use                     termtosvg\ninfrakit                                 terraform@0.11\ninlets                                   terraformer\ninteractive-rebase-tool                  terrahub\nipopt                                    tesseract-lang\nistioctl                                 tflint\nitk                                      thors-serializer\njanet                                    tmx\njinja2-cli                               topgrade\njmxterm                                  triangle\njp                                       ucloud\njson11                                   um\nk3d                                      ungit\nk6                                       up\nkahip                                    usbredir\nkcov                                     v2ray-plugin\nkim-api                                  vapoursynth-imwri\nktlint                                   vapoursynth-ocr\nkubeaudit                                vapoursynth-sub\nkubeprod                                 vfuse\nkubernetes-service-catalog-client        virgil\nkubeseal                                 volt\nkubespy                                  vulkan-headers\nkustomize                                wcslib\nlazydocker                               weaver\nlazygit                                  websocat\nleela-zero                               whalebrew\nlerna                                    wiremock-standalone\nlf                                       wsk\nlibcerf                                  wskdeploy\nlibevhtp                                 wtfutil\nlibgr                                    xcodegen\nlibgusb                                  xsimd\nlibkeccak                                yapf\nlibnova                                  yarn-completion\nlibopenmpt                               zabbix-cli\nlibpsl                                   zlog\nlibpulsar                                zrepl\nlibsignal-protocol-c                     zydis\n\n==> Updated Formulae\n\nautomake ✔                               libglademm\nboost ✔                                  libgnomecanvas\ncarthage ✔                               libgnomecanvasmm\ncgal ✔                                   libgosu\ncmake ✔                                  libgphoto2\ncoreutils ✔                              libgsf\nfreexl ✔                                 libgtop\ngdal ✔                                   libgweather\ngdbm ✔                                   libgxps\ngeos ✔                                   libhdhomerun\ngettext ✔                                libheif\ngiflib ✔                                 libhttpserver\ngit ✔                                    libhttpseverywhere\ngnupg ✔                                  libical\ngnutls ✔                                 libiconv\ngo ✔                                     libidl\nicu4c ✔                                  libimagequant\nlibassuan ✔                              libimobiledevice\nlibevent ✔                               libinfinity\nlibgcrypt ✔                              libiptcdata\nlibgeotiff ✔                             libiscsi\nlibgpg-error ✔                           libjson-rpc-cpp\nlibidn2 ✔                                libjwt\nlibpng ✔                                 liblas\nlibpq ✔                                  liblcf\nlibspatialite ✔                          liblinear\nlibssh ✔                                 liblo\nlibtasn1 ✔                               liblqr\nlibtiff ✔                                libltc\nlibxml2 ✔                                liblunar\nlibyaml ✔                                liblwgeom\nmaven ✔                                  libmaa\nmercurial ✔                              libmagic\nmpfr ✔                                   libmatio\nmsgpack ✔                                libmatroska\nnettle ✔                                 libmicrohttpd\nnode ✔                                   libmodbus\nnpth ✔                                   libmp3splt\nnumpy ✔                                  libmpd\nopenssl ✔                                libmpdclient\nopenssl@1.1 ✔                            libmspub\np11-kit ✔                                libmtp\npcre ✔                                   libmwaw\npostgis ✔                                libmxml\npostgresql ✔                             libmypaint\nproj ✔                                   libnfs\npyenv ✔                                  libnice\npython ✔                                 libnids\npython@2 ✔                               libnotify\nreadline ✔                               libntlm\nsfcgal ✔                                 libodfgen\nsqlite ✔                                 libofx\nswiftlint ✔                              libomp\nmate ✔                                  libopendkim\nwget ✔                                   libopkele\nxctool ✔                                 libopusenc\nabcde                                    libosinfo\nabcm2ps                                  libosip\nabcmidi                                  libosmium\nabook                                    libpcap\nabyss                                    libpeas\nace                                      libphonenumber\nack                                      libplctag\nacpica                                   libplist\nactivemq                                 libpointing\nactivemq-cpp                             libpqxx\nadr-tools                                libprotoident\nadvancecomp                              libproxy\nadvancemame                              libpst\nadwaita-icon-theme                       libqalculate\naescrypt-packetizer                      libquicktime\nafflib                                   librasterlite\nafio                                     libraw\nagda                                     librdkafka\n....\nlibglade\n\n==> Renamed Formulae\n\nark -> velero                            hh -> hstr\ncdiff -> ydiff                           mat -> mat2\nconfluent-oss -> confluent-platform      php72 -> php@7.2\ncrystal-lang -> crystal                  rebar@3 -> rebar3\ngloo-ctl -> glooctl                      resin-cli -> balena-cli\ngnatsd -> nats-server                    saltstack -> salt\ngtksourceview@4 -> gtksourceview4        todolist -> ultralist\ngutenberg -> zola                        transmission -> transmission-cli\n\n==> Deleted Formulae\n\namber                      hachoir-metadata           pldebugger\napple-gcc42                heroku                     protobuf@2.5\naptly-completion           hyper                      protobuf@2.6\nartifactory-cli-go         ib                         pxz\nasciinema2gif              js-test-driver             pyexiv2\nat-spi2-atk                juju-quickstart            qt@5.5\n...\ngv                         plan9port\n\nWarning: pkg-config 0.29.2 is already installed and up-to-date\n\nTo reinstall 0.29.2, run `brew reinstall pkg-config`\n\nError: libxml2 2.9.7 is already installed\n\nTo upgrade to 2.9.9, run `brew upgrade libxml2`\n$ curl -fsSL -o coala.zip $COALA_ZIP_URL/master\n...\n    byte-compiling /usr/local/lib/python3.6/site-packages/coalib/settings/SectionFilling.py to SectionFilling.cpython-36.pyc\n    byte-compiling /usr/local/lib/python3.6/site-packages/coalib/settings/Setting.py to Setting.cpython-36.pyc\n    byte-compiling /usr/local/lib/python3.6/site-packages/coalib/testing/__init__.py to __init__.cpython-36.pyc\n    byte-compiling /usr/local/lib/python3.6/site-packages/coalib/testing/BaseTestHelper.py to BaseTestHelper.cpython-36.pyc\n    byte-compiling /usr/local/lib/python3.6/site-packages/coalib/testing/BearTestHelper.py to BearTestHelper.cpython-36.pyc\n    byte-compiling /usr/local/lib/python3.6/site-packages/coalib/testing/LocalBearTestHelper.py to LocalBearTestHelper.cpython-36.pyc\n    running install_data\n\n    creating /usr/local/man\n\n    error: could not create '/usr/local/man': Permission denied\n\n    ----------------------------------------\n\nCommand \"/usr/local/opt/python/bin/python3.6 -u -c \"import setuptools, tokenize;__file__='/private/var/folders/nz/vv4_9tw56nv9k3tkvyszvwg80000gn/T/pip-0kxa3e3k-build/setup.py';f=getattr(tokenize, 'open', open)(__file__);code=f.read().replace('\\r\\n', '\\n');f.close();exec(compile(code, __file__, 'exec'))\" install --record /var/folders/nz/vv4_9tw56nv9k3tkvyszvwg80000gn/T/pip-c2a7dw1a-record/install-record.txt --single-version-externally-managed --compile\" failed with error code 1 in /private/var/folders/nz/vv4_9tw56nv9k3tkvyszvwg80000gn/T/pip-0kxa3e3k-build/\n\nYou are using pip version 9.0.1, however version 19.2.2 is available.\nYou should consider upgrading via the 'pip install --upgrade pip' command.\n\nThe command \"pip install coala.zip\" exited with 1.","comments":0,"createdAt":"2019-08-21T16:47:31Z","updatedAt":"2019-08-21T16:47:31Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[]}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1566400033000,"issue":{"htmlUrl":"https://github.com/coala/coala/issues/6056","number":6056,"title":"ConsoleInteractionTest.py: `test_ask_for_actions_and_apply` defined twice","body":"Change the name of one of the function to something more appropriate.\ndifficulty/newcomer","comments":5,"createdAt":"2019-08-05T14:31:59Z","updatedAt":"2019-08-21T15:07:13Z","closedAt":null,"state":"open","user":{"login":"akshatkarani","avatarUrl":"https://avatars3.githubusercontent.com/u/29230845?v=4"},"owner":{"login":"akshatkarani","avatarUrl":"https://avatars3.githubusercontent.com/u/29230845?v=4"},"assignee":{"login":"charfole","avatarUrl":"https://avatars1.githubusercontent.com/u/45024736?v=4"},"labels":[{"name":"area/tests","color":"bfd4f2"},{"name":"difficulty/newcomer","color":"65C8FF"},{"name":"importance/medium","color":"fbca04"},{"name":"type/bug","color":"e11d21"}]}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1566284414000,"issue":{"htmlUrl":"https://github.com/coala/coala/issues/6061","number":6061,"title":"Newcomers_Guide.rst: Mention about the new forms available on the coala Community website for the contributors","body":"","comments":0,"createdAt":"2019-08-20T07:00:14Z","updatedAt":"2019-08-20T07:00:14Z","closedAt":null,"state":"open","user":{"login":"KVGarg","avatarUrl":"https://avatars2.githubusercontent.com/u/35761292?v=4"},"owner":{"login":"KVGarg","avatarUrl":"https://avatars2.githubusercontent.com/u/35761292?v=4"},"labels":[]}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1567391759000,"issue":{"htmlUrl":"https://github.com/coala/coala/issues/6050","number":6050,"title":"Setting.py: Include the memory location in all __repr__","body":"The default __repr__ on CPython emits the memory location of the object.  This should also be done for the coala overrides of __repr__ in Settings.","comments":3,"createdAt":"2019-08-03T13:58:12Z","updatedAt":"2019-09-02T02:35:59Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"area/config","color":"fbca04"},{"name":"difficulty/low","color":"207de5"},{"name":"importance/low","color":"70E870"}]}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1565581607000,"issue":{"htmlUrl":"https://github.com/coala/coala/issues/6051","number":6051,"title":"Linter.py: Include the memory location in all __repr__","body":"The default __repr__ on CPython emits the memory location of the object. This should also be done for the coala overrides of __repr__ in Linter.","comments":3,"createdAt":"2019-08-03T13:59:39Z","updatedAt":"2019-08-12T03:46:47Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"assignee":{"login":"avirlrma","avatarUrl":"https://avatars1.githubusercontent.com/u/22575238?v=4"},"labels":[{"name":"area/lintbears","color":"ededed"},{"name":"difficulty/low","color":"207de5"},{"name":"importance/low","color":"70E870"}]}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1564842559000,"issue":{"htmlUrl":"https://github.com/coala/coala/issues/6052","number":6052,"title":"Linter class objects are not consistent across multi-processing environment","body":"The Linter class instance is different on multi-processing environments, and some Linter hooks are not being run on every instance.\nThis is most evident on Windows, which doesnt use fork.\nIt is the cause of\ncoala/coala-bears#2937 (comment)\nThat usage dates back to v0.7.0 (May 2016) coala/coala-bears@3c23210","comments":0,"createdAt":"2019-08-03T14:12:00Z","updatedAt":"2019-08-03T14:29:19Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"area/core","color":"eb6420"},{"name":"difficulty/high","color":"B319e7"},{"name":"importance/high","color":"eb6420"},{"name":"platform/windows","color":"0052cc"}]}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1565161010000,"issue":{"htmlUrl":"https://github.com/coala/coala/issues/6053","number":6053,"title":"pytest fails to run: TypeError: attrib() got an unexpected keyword argument 'converter'","body":"https://travis-ci.org/coala/coala/jobs/567291364\n$ py.test\nTraceback (most recent call last):\n  File \"/home/travis/virtualenv/python3.6.3/bin/py.test\", line 7, in <module>\n    from pytest import main\n  File \"/home/travis/virtualenv/python3.6.3/lib/python3.6/site-packages/pytest.py\", line 10, in <module>\n    from _pytest.fixtures import fixture, yield_fixture\n  File \"/home/travis/virtualenv/python3.6.3/lib/python3.6/site-packages/_pytest/fixtures.py\", line 15, in <module>\n    from _pytest import nodes\n  File \"/home/travis/virtualenv/python3.6.3/lib/python3.6/site-packages/_pytest/nodes.py\", line 11, in <module>\n    from _pytest.mark.structures import NodeKeywords, MarkInfo\n  File \"/home/travis/virtualenv/python3.6.3/lib/python3.6/site-packages/_pytest/mark/__init__.py\", line 4, in <module>\n    from .structures import (\n  File \"/home/travis/virtualenv/python3.6.3/lib/python3.6/site-packages/_pytest/mark/structures.py\", line 306, in <module>\n    class MarkInfo(object):\n  File \"/home/travis/virtualenv/python3.6.3/lib/python3.6/site-packages/_pytest/mark/structures.py\", line 309, in MarkInfo\n    _marks = attr.ib(converter=list)\nTypeError: attrib() got an unexpected keyword argument 'converter'","comments":4,"createdAt":"2019-08-04T01:17:20Z","updatedAt":"2019-08-07T06:56:50Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"assignee":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"area/dependencies","color":"96f7bf"},{"name":"importance/critical","color":"e11d21"}]}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1567263005000,"issue":{"htmlUrl":"https://github.com/coala/coala/issues/6034","number":6034,"title":"ConsoleInteraction.py: `color_letter` function is buggy","body":"color_letter function in ConsoleInteraction module does not work as expected when there is an upper case letter after the upper case letter in parenthesis.\ne.g. If input line is Edit (C)ommit Message then output is Edit (M)ommit Message","comments":3,"createdAt":"2019-06-22T12:45:11Z","updatedAt":"2019-08-31T14:50:05Z","closedAt":"2019-08-31T14:50:05Z","state":"closed","user":{"login":"akshatkarani","avatarUrl":"https://avatars3.githubusercontent.com/u/29230845?v=4"},"owner":{"login":"akshatkarani","avatarUrl":"https://avatars3.githubusercontent.com/u/29230845?v=4"},"assignee":{"login":"akshatkarani","avatarUrl":"https://avatars3.githubusercontent.com/u/29230845?v=4"},"labels":[]}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1565922829000,"issue":{"htmlUrl":"https://github.com/coala/coala/issues/6045","number":6045,"title":"Coala's AGPL coverage ","body":"Hi Coala maintainers,\nCan you help clarify AGPL coverage in Coala's case? Specifically, are the modifications made by Coala, which would get put into the input source code, covered by AGPL?\nYour clarification will help evaluate the technology selection. I'd be helpful If you could clarify your interpretation in the Q&A page.\nThanks,\nBrian","comments":2,"createdAt":"2019-07-22T16:13:20Z","updatedAt":"2019-08-16T02:33:49Z","closedAt":null,"state":"open","user":{"login":"briankhsieh","avatarUrl":"https://avatars2.githubusercontent.com/u/1657283?v=4"},"owner":{"login":"briankhsieh","avatarUrl":"https://avatars2.githubusercontent.com/u/1657283?v=4"},"labels":[{"name":"area/documentation","color":"bfe5bf"},{"name":"difficulty/medium","color":"0052cc"},{"name":"importance/high","color":"eb6420"}]}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1564881098000,"issue":{"htmlUrl":"https://github.com/coala/coala/issues/5985","number":5985,"title":"Appveyor build fails","body":"Appveyor build is failing due to the recent changes in coalib\\misc\\Asyncio.py in the commit 58b9f41 . It is due QuotesBear.\nThe build report is here\nThe snippet of error:\nExecuting section python...\n**** QuotesBear [Section <empty> | Severity NORMAL] ****\n!    ! You do not use the preferred quotation marks. Preferred mark: '\n[----] c:\\projects\\coala\\coalib\\misc\\Asyncio.py\n[++++] c:\\projects\\coala\\coalib\\misc\\Asyncio.py\n[   1] \"\"\"Asyncio backports for Python 3.4.3 compatibility.\"\"\"\n[   1] '\"\"Asyncio backports for Python 3.4.3 compatibility.\"\"'\n\narea/ci difficulty/newcomer","comments":13,"createdAt":"2019-02-10T15:51:08Z","updatedAt":"2019-08-04T01:11:38Z","closedAt":null,"state":"open","user":{"login":"Naveenaidu","avatarUrl":"https://avatars1.githubusercontent.com/u/30195193?v=4"},"owner":{"login":"Naveenaidu","avatarUrl":"https://avatars1.githubusercontent.com/u/30195193?v=4"},"labels":[{"name":"area/aspects","color":"000000"},{"name":"area/documentation","color":"bfe5bf"},{"name":"importance/high","color":"eb6420"},{"name":"type/bug","color":"e11d21"}]}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1566393251000,"issue":{"htmlUrl":"https://github.com/coala/coala/issues/5991","number":5991,"title":"coalaTest.py: Random timeouts on AppVeyor","body":"coalaTest.py occassionaly times out on AppVeyor. The below log is for this PR while the same test passed here on my branch.\ntests\\coalaTest.py ......\n+++++++++++++++++++++++++++++++++++ Timeout ++++++++++++++++++++++++++++++++++++\n~~~~~~~~~~~~~~~~~~~~~~ Stack of QueueFeederThread (1336) ~~~~~~~~~~~~~~~~~~~~~~~\n  File \"c:\\python34\\lib\\threading.py\", line 879, in _bootstrap\n    self._bootstrap_inner()\n  File \"c:\\python34\\lib\\threading.py\", line 911, in _bootstrap_inner\n    self.run()\n  File \"c:\\python34\\lib\\threading.py\", line 859, in run\n    self._target(*self._args, **self._kwargs)\n  File \"c:\\python34\\lib\\multiprocessing\\queues.py\", line 249, in _feed\n    send_bytes(obj)\n  File \"c:\\python34\\lib\\multiprocessing\\connection.py\", line 200, in send_bytes\n    self._send_bytes(m[offset:offset + size])\n  File \"c:\\python34\\lib\\multiprocessing\\connection.py\", line 284, in _send_bytes\n    [ov.event], False, INFINITE)\n~~~~~~~~~~~~~~~~~~~~~~~~~~ Stack of MainThread (1664) ~~~~~~~~~~~~~~~~~~~~~~~~~~\n  File \"c:\\python34\\lib\\runpy.py\", line 170, in _run_module_as_main\n    \"__main__\", mod_spec)\n  File \"c:\\python34\\lib\\runpy.py\", line 85, in _run_code\n    exec(code, run_globals)\n  File \"C:\\Python34\\Scripts\\py.test.exe\\__main__.py\", line 9, in <module>\n    sys.exit(main())\n  File \"c:\\python34\\lib\\site-packages\\_pytest\\config\\__init__.py\", line 64, in main\n    return config.hook.pytest_cmdline_main(config=config)\n  File \"c:\\python34\\lib\\site-packages\\pluggy\\hooks.py\", line 258, in __call__\n    return self._hookexec(self, self._nonwrappers + self._wrappers, kwargs)\n  File \"c:\\python34\\lib\\site-packages\\pluggy\\manager.py\", line 67, in _hookexec\n    return self._inner_hookexec(hook, methods, kwargs)\n  File \"c:\\python34\\lib\\site-packages\\pluggy\\manager.py\", line 61, in <lambda>\n    firstresult=hook.spec_opts.get('firstresult'),\n  File \"c:\\python34\\lib\\site-packages\\pluggy\\callers.py\", line 180, in _multicall\n    res = hook_impl.function(*args)\n  File \"c:\\python34\\lib\\site-packages\\_pytest\\main.py\", line 208, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"c:\\python34\\lib\\site-packages\\_pytest\\main.py\", line 178, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"c:\\python34\\lib\\site-packages\\_pytest\\main.py\", line 215, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"c:\\python34\\lib\\site-packages\\pluggy\\hooks.py\", line 258, in __call__\n    return self._hookexec(self, self._nonwrappers + self._wrappers, kwargs)\n  File \"c:\\python34\\lib\\site-packages\\pluggy\\manager.py\", line 67, in _hookexec\n    return self._inner_hookexec(hook, methods, kwargs)\n  File \"c:\\python34\\lib\\site-packages\\pluggy\\manager.py\", line 61, in <lambda>\n    firstresult=hook.spec_opts.get('firstresult'),\n  File \"c:\\python34\\lib\\site-packages\\pluggy\\callers.py\", line 180, in _multicall\n    res = hook_impl.function(*args)\n  File \"c:\\python34\\lib\\site-packages\\_pytest\\main.py\", line 236, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"c:\\python34\\lib\\site-packages\\pluggy\\hooks.py\", line 258, in __call__\n    return self._hookexec(self, self._nonwrappers + self._wrappers, kwargs)\n  File \"c:\\python34\\lib\\site-packages\\pluggy\\manager.py\", line 67, in _hookexec\n    return self._inner_hookexec(hook, methods, kwargs)\n  File \"c:\\python34\\lib\\site-packages\\pluggy\\manager.py\", line 61, in <lambda>\n    firstresult=hook.spec_opts.get('firstresult'),\n  File \"c:\\python34\\lib\\site-packages\\pluggy\\callers.py\", line 180, in _multicall\n    res = hook_impl.function(*args)\n  File \"c:\\python34\\lib\\site-packages\\_pytest\\runner.py\", line 64, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"c:\\python34\\lib\\site-packages\\_pytest\\runner.py\", line 79, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"c:\\python34\\lib\\site-packages\\_pytest\\runner.py\", line 159, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"c:\\python34\\lib\\site-packages\\_pytest\\runner.py\", line 183, in call_runtest_hook\n    treat_keyboard_interrupt_as_exception=item.config.getvalue(\"usepdb\"),\n  File \"c:\\python34\\lib\\site-packages\\_pytest\\runner.py\", line 199, in __init__\n    self.result = func()\n  File \"c:\\python34\\lib\\site-packages\\_pytest\\runner.py\", line 181, in <lambda>\n    lambda: ihook(item=item, **kwds),\n  File \"c:\\python34\\lib\\site-packages\\pluggy\\hooks.py\", line 258, in __call__\n    return self._hookexec(self, self._nonwrappers + self._wrappers, kwargs)\n  File \"c:\\python34\\lib\\site-packages\\pluggy\\manager.py\", line 67, in _hookexec\n    return self._inner_hookexec(hook, methods, kwargs)\n  File \"c:\\python34\\lib\\site-packages\\pluggy\\manager.py\", line 61, in <lambda>\n    firstresult=hook.spec_opts.get('firstresult'),\n  File \"c:\\python34\\lib\\site-packages\\pluggy\\callers.py\", line 180, in _multicall\n    res = hook_impl.function(*args)\n  File \"c:\\python34\\lib\\site-packages\\_pytest\\runner.py\", line 109, in pytest_runtest_call\n    item.runtest()\n  File \"c:\\python34\\lib\\site-packages\\_pytest\\unittest.py\", line 184, in runtest\n    self._testcase(result=self)\n  File \"c:\\python34\\lib\\unittest\\case.py\", line 628, in __call__\n    return self.run(*args, **kwds)\n  File \"c:\\python34\\lib\\unittest\\case.py\", line 580, in run\n    testMethod()\n  File \"C:\\projects\\coala\\tests\\coalaTest.py\", line 351, in test_coala_no_unexpected_warnings\n    coala.main, 'coala')\n  File \"C:\\projects\\coala\\tests\\TestUtilities.py\", line 122, in execute_coala\n    retval = func(debug=debug)\n  File \"C:\\projects\\coala\\coalib\\coala.py\", line 121, in main\n    return mode_normal(console_printer, None, args, debug=debug)\n  File \"C:\\projects\\coala\\coalib\\coala_modes.py\", line 29, in mode_normal\n    debug=debug)\n  File \"C:\\projects\\coala\\coalib\\coala_main.py\", line 198, in run_coala\n    False))\n  File \"C:\\projects\\coala\\coalib\\processes\\Processing.py\", line 808, in execute_section\n    runner.start()\n  File \"c:\\python34\\lib\\multiprocessing\\process.py\", line 105, in start\n    self._popen = self._Popen(self)\n  File \"c:\\python34\\lib\\multiprocessing\\context.py\", line 212, in _Popen\n    return _default_context.get_context().Process._Popen(process_obj)\n  File \"c:\\python34\\lib\\multiprocessing\\context.py\", line 313, in _Popen\n    return Popen(process_obj)\n  File \"c:\\python34\\lib\\multiprocessing\\popen_spawn_win32.py\", line 66, in __init__\n    reduction.dump(process_obj, to_child)\n  File \"c:\\python34\\lib\\multiprocessing\\reduction.py\", line 59, in dump\n    ForkingPickler(file, protocol).dump(obj)\n+++++++++++++++++++++++++++++++++++ Timeout ++++++++++++++++++++++++++++++++++++\nCommand exited with code 1","comments":4,"createdAt":"2019-02-14T09:16:11Z","updatedAt":"2019-08-21T13:14:11Z","closedAt":null,"state":"open","user":{"login":"areebbeigh","avatarUrl":"https://avatars3.githubusercontent.com/u/15276828?v=4"},"owner":{"login":"areebbeigh","avatarUrl":"https://avatars3.githubusercontent.com/u/15276828?v=4"},"labels":[{"name":"area/tests","color":"bfd4f2"},{"name":"difficulty/low","color":"207de5"},{"name":"importance/medium","color":"fbca04"},{"name":"platform/windows","color":"0052cc"}]}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1567382794000,"issue":{"htmlUrl":"https://github.com/coala/coala/issues/5983","number":5983,"title":"Setting.py: Change property name","body":"The line_number property for Setting class should be changed to start_line_number as it is the starting line number of a setting.\ndifficulty/newcomer","comments":10,"createdAt":"2019-02-10T06:04:00Z","updatedAt":"2019-09-02T00:06:34Z","closedAt":null,"state":"open","user":{"login":"akshatkarani","avatarUrl":"https://avatars3.githubusercontent.com/u/29230845?v=4"},"owner":{"login":"akshatkarani","avatarUrl":"https://avatars3.githubusercontent.com/u/29230845?v=4"},"labels":[{"name":"difficulty/newcomer","color":"65C8FF"},{"name":"type/bug","color":"e11d21"}]}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1566392989000,"issue":{"htmlUrl":"https://github.com/coala/coala/issues/5674","number":5674,"title":"TestUtilities.execute_coala should check for timeouts","body":"If there was a timeout during a test using execute_coala, pytest-timeout will emit Failed: Timeout >35.0s (number may change) and the timeout failure will be lost inside execute_coala/bear_test_module.\nThe test module will continue with the assertions, and cause various errors, as these coala output will be in a strange incomplete state.\nThis is one of the problems affecting #5571 and #5390\nA quick workaround is to detect Failed: Timeout is stderr inside execute_coala and re-raise the problem with the complete stderr and stdout for debugging purposes.","comments":4,"createdAt":"2018-07-28T02:19:42Z","updatedAt":"2019-08-21T13:09:49Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"area/upstream","color":"5319e7"},{"name":"difficulty/low","color":"207de5"},{"name":"importance/high","color":"eb6420"}]}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1564881144000,"issue":{"htmlUrl":"https://github.com/coala/coala/issues/5722","number":5722,"title":"LocalBearTestHelper.check_results allow regex as message text","body":"Sometimes the message text varies based on linter version, as we see at coala/coala-bears#2678,  or is incredibly long and not helpful to match the entire text.\nIt should be possible to specify only a regex to match the message text.","comments":4,"createdAt":"2018-08-17T13:48:14Z","updatedAt":"2019-08-04T01:12:24Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"assignee":{"login":"Naveenaidu","avatarUrl":"https://avatars1.githubusercontent.com/u/30195193?v=4"},"labels":[{"name":"area/tests","color":"bfd4f2"},{"name":"difficulty/low","color":"207de5"},{"name":"importance/low","color":"70E870"},{"name":"type/feature","color":"0052cc"}]}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1565173620000,"issue":{"htmlUrl":"https://github.com/coala/coala/issues/4863","number":4863,"title":"ConsoleInteraction.ask_for_actions_and_apply: No check for invalid apply_single","body":"If apply_single refers to some non-existent action, just nothing happens. The function just returns with True:\n\n  \n    \n      coala/coalib/output/ConsoleInteraction.py\n    \n    \n        Lines 747 to 827\n      in\n      8da058e\n    \n    \n    \n    \n\n        \n          \n           def ask_for_action_and_apply(console_printer, \n        \n\n        \n          \n                                        section, \n        \n\n        \n          \n                                        metadata_list, \n        \n\n        \n          \n                                        action_dict, \n        \n\n        \n          \n                                        failed_actions, \n        \n\n        \n          \n                                        result, \n        \n\n        \n          \n                                        file_diff_dict, \n        \n\n        \n          \n                                        file_dict, \n        \n\n        \n          \n                                        applied_actions, \n        \n\n        \n          \n                                        apply_single=False): \n        \n\n        \n          \n               \"\"\" \n        \n\n        \n          \n               Asks the user for an action and applies it. \n        \n\n        \n          \n            \n        \n\n        \n          \n               :param console_printer: Object to print messages on the console. \n        \n\n        \n          \n               :param section:         Currently active section. \n        \n\n        \n          \n               :param metadata_list:   Contains metadata for all the actions. \n        \n\n        \n          \n               :param action_dict:     Contains the action names as keys and their \n        \n\n        \n          \n                                       references as values. \n        \n\n        \n          \n               :param failed_actions:  A set of all actions that have failed. A failed \n        \n\n        \n          \n                                       action remains in the list until it is successfully \n        \n\n        \n          \n                                       executed. \n        \n\n        \n          \n               :param result:          Result corresponding to the actions. \n        \n\n        \n          \n               :param file_diff_dict:  If it is an action which applies a patch, this \n        \n\n        \n          \n                                       contains the diff of the patch to be applied to \n        \n\n        \n          \n                                       the file with filename as keys. \n        \n\n        \n          \n               :param file_dict:       Dictionary with filename as keys and its contents \n        \n\n        \n          \n                                       as values. \n        \n\n        \n          \n               :param apply_single:    The action that should be applied for all results. \n        \n\n        \n          \n                                       If it's not selected, has a value of False. \n        \n\n        \n          \n               :param applied_actions: A dictionary that contains the result, file_dict, \n        \n\n        \n          \n                                       file_diff_dict and the section for an action. \n        \n\n        \n          \n               :return:                Returns a boolean value. True will be returned, if \n        \n\n        \n          \n                                       it makes sense that the user may choose to execute \n        \n\n        \n          \n                                       another action, False otherwise. \n        \n\n        \n          \n               \"\"\" \n        \n\n        \n          \n               actions_desc, actions_name = choose_action(console_printer, metadata_list, \n        \n\n        \n          \n                                                          apply_single) \n        \n\n        \n          \n            \n        \n\n        \n          \n               if apply_single: \n        \n\n        \n          \n                   if apply_single == 'Do (N)othing': \n        \n\n        \n          \n                       return False \n        \n\n        \n          \n                   for index, action_details in enumerate(metadata_list, 1): \n        \n\n        \n          \n                       if apply_single == action_details.desc: \n        \n\n        \n          \n                           action_name, section = get_action_info( \n        \n\n        \n          \n                               section, metadata_list[index - 1], failed_actions) \n        \n\n        \n          \n                           chosen_action = action_dict[action_details.name] \n        \n\n        \n          \n                           try_to_apply_action(action_name, \n        \n\n        \n          \n                                               chosen_action, \n        \n\n        \n          \n                                               console_printer, \n        \n\n        \n          \n                                               section, \n        \n\n        \n          \n                                               metadata_list, \n        \n\n        \n          \n                                               action_dict, \n        \n\n        \n          \n                                               failed_actions, \n        \n\n        \n          \n                                               result, \n        \n\n        \n          \n                                               file_diff_dict, \n        \n\n        \n          \n                                               file_dict, \n        \n\n        \n          \n                                               applied_actions) \n        \n\n        \n          \n               else: \n        \n\n        \n          \n                   for action_choice, action_choice_name in zip(actions_desc, \n        \n\n        \n          \n                                                                actions_name): \n        \n\n        \n          \n                       if action_choice == 'Do (N)othing': \n        \n\n        \n          \n                           return False \n        \n\n        \n          \n                       chosen_action = action_dict[action_choice_name] \n        \n\n        \n          \n                       action_choice_made = action_choice \n        \n\n        \n          \n                       for index, action_details in enumerate(metadata_list, 1): \n        \n\n        \n          \n                           if action_choice_made in action_details.desc: \n        \n\n        \n          \n                               action_name, section = get_action_info( \n        \n\n        \n          \n                                   section, metadata_list[index-1], failed_actions) \n        \n\n        \n          \n                               try_to_apply_action(action_name, \n        \n\n        \n          \n                                                   chosen_action, \n        \n\n        \n          \n                                                   console_printer, \n        \n\n        \n          \n                                                   section, \n        \n\n        \n          \n                                                   metadata_list, \n        \n\n        \n          \n                                                   action_dict, \n        \n\n        \n          \n                                                   failed_actions, \n        \n\n        \n          \n                                                   result, \n        \n\n        \n          \n                                                   file_diff_dict, \n        \n\n        \n          \n                                                   file_dict, \n        \n\n        \n          \n                                                   applied_actions) \n        \n\n        \n          \n            \n        \n\n        \n          \n               return True \n        \n    \n  \n\n\nThis allowed hacks like setting apply_single=True in the 2nd variant of ConsoleInteractionTest.test_acquire_actions_and_apply (which is getting properly renamed by #4860 BTW), which then causes further problems in PRs like #4179 (comment)\nThe above test needs anyway some redesign according to #4862 whereby apply_single=True should just not be used\nask_for_actions_and_apply needs to raise some exception on invalid apply_single values\ncc @mrtes @Nosferatul @Adrianzatreanu @yukiisbored","comments":6,"createdAt":"2017-11-12T16:56:27Z","updatedAt":"2019-08-07T10:27:00Z","closedAt":null,"state":"open","user":{"login":"userzimmermann","avatarUrl":"https://avatars3.githubusercontent.com/u/2088633?v=4"},"owner":{"login":"userzimmermann","avatarUrl":"https://avatars3.githubusercontent.com/u/2088633?v=4"},"assignee":{"login":"khanchi97","avatarUrl":"https://avatars0.githubusercontent.com/u/22270415?v=4"},"labels":[{"name":"area/actions","color":"207de5"},{"name":"difficulty/medium","color":"0052cc"},{"name":"importance/high","color":"eb6420"},{"name":"type/bug","color":"e11d21"}]}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1565967372000,"issue":{"htmlUrl":"https://github.com/coala/coala/issues/4542","number":4542,"title":"Implement Error reporting mechanism for DocumentationAPI","body":"we have to go around implementing a error reporting mechanism for the doc linting apis .\nOpened by @damngamerz at gitter//damngamerz","comments":0,"createdAt":"2017-07-23T14:17:52Z","updatedAt":"2019-08-16T14:56:12Z","closedAt":null,"state":"open","user":{"login":"co-robo","avatarUrl":"https://avatars2.githubusercontent.com/u/29058257?v=4"},"owner":{"login":"co-robo","avatarUrl":"https://avatars2.githubusercontent.com/u/29058257?v=4"},"labels":[]}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1566393685000,"issue":{"htmlUrl":"https://github.com/coala/coala/issues/4208","number":4208,"title":"Unknown exception","body":"Hey Coalas,\nBrand new bug here:\nhttps://travis-ci.org/travis-ci/docs-travis-ci-com/jobs/230418873\n$ coala --non-interactive Language\n[ERROR][16:38:59] An unknown error occurred. This is a bug. We are sorry for the inconvenience. Please contact the developers for assistance. During execution of coala an exception was raised. This should never happen. When asked for, the following information may help investigating:\n[INFO][16:38:59] Exception was:\nTraceback (most recent call last):\n  File \"/home/travis/virtualenv/python3.5.2/lib/python3.5/site-packages/pkg_resources/__init__.py\", line 2801, in _dep_map\n    return self.__dep_map\n  File \"/home/travis/virtualenv/python3.5.2/lib/python3.5/site-packages/pkg_resources/__init__.py\", line 2658, in __getattr__\n    raise AttributeError(attr)\nAttributeError: _DistInfoDistribution__dep_map\nDuring handling of the above exception, another exception occurred:\nTraceback (most recent call last):\n  File \"/home/travis/virtualenv/python3.5.2/lib/python3.5/site-packages/coalib/coala_main.py\", line 80, in run_coala\n    arg_list=arg_list)\n  File \"/home/travis/virtualenv/python3.5.2/lib/python3.5/site-packages/coalib/settings/ConfigurationGathering.py\", line 363, in gather_configuration\n    log_printer)\n  File \"/home/travis/virtualenv/python3.5.2/lib/python3.5/site-packages/coalib/settings/SectionFilling.py\", line 31, in fill_settings\n    bear_dirs = section.bear_dirs()\n  File \"/home/travis/virtualenv/python3.5.2/lib/python3.5/site-packages/coalib/settings/Section.py\", line 74, in bear_dirs\n    for bear_dir in collect_registered_bears_dirs('coalabears')]\n  File \"/home/travis/virtualenv/python3.5.2/lib/python3.5/site-packages/coalib/collecting/Collectors.py\", line 303, in collect_registered_bears_dirs\n    registered_package = ep.load()\n  File \"/home/travis/virtualenv/python3.5.2/lib/python3.5/site-packages/pkg_resources/__init__.py\", line 2354, in load\n    self.require(*args, **kwargs)\n  File \"/home/travis/virtualenv/python3.5.2/lib/python3.5/site-packages/pkg_resources/__init__.py\", line 2371, in require\n    items = working_set.resolve(reqs, env, installer)\n  File \"/home/travis/virtualenv/python3.5.2/lib/python3.5/site-packages/pkg_resources/__init__.py\", line 847, in resolve\n    new_requirements = dist.requires(req.extras)[::-1]\n  File \"/home/travis/virtualenv/python3.5.2/lib/python3.5/site-packages/pkg_resources/__init__.py\", line 2602, in requires\n    dm = self._dep_map\n  File \"/home/travis/virtualenv/python3.5.2/lib/python3.5/site-packages/pkg_resources/__init__.py\", line 2803, in _dep_map\n    self.__dep_map = self._compute_dependencies()\n  File \"/home/travis/virtualenv/python3.5.2/lib/python3.5/site-packages/pkg_resources/__init__.py\", line 2836, in _compute_dependencies\n    common = frozenset(reqs_for_extra(None))\n  File \"/home/travis/virtualenv/python3.5.2/lib/python3.5/site-packages/pkg_resources/__init__.py\", line 2833, in reqs_for_extra\n    if req.marker_fn(override={'extra':extra}):\n  File \"/home/travis/virtualenv/python3.5.2/lib/python3.5/site-packages/_markerlib/markers.py\", line 113, in marker_fn\n    return eval(compiled_marker, environment)\n  File \"<environment marker>\", line 1, in <module>\nNameError: name 'platform_system' is not defined","comments":9,"createdAt":"2017-05-09T16:43:07Z","updatedAt":"2019-08-21T13:21:25Z","closedAt":null,"state":"open","user":{"login":"plaindocs","avatarUrl":"https://avatars2.githubusercontent.com/u/95874?v=4"},"owner":{"login":"plaindocs","avatarUrl":"https://avatars2.githubusercontent.com/u/95874?v=4"},"labels":[{"name":"area/upstream","color":"5319e7"},{"name":"importance/critical","color":"e11d21"},{"name":"type/bug","color":"e11d21"}]}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1566755040000,"issue":{"htmlUrl":"https://github.com/coala/coala/pull/6068","number":6068,"title":"Add support for xml diffs","body":"For short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":0,"createdAt":"2019-08-25T17:44:00Z","updatedAt":"2019-08-25T17:44:00Z","closedAt":null,"state":"open","user":{"login":"Utkarsh1308","avatarUrl":"https://avatars0.githubusercontent.com/u/23418707?v=4"},"owner":{"login":"Utkarsh1308","avatarUrl":"https://avatars0.githubusercontent.com/u/23418707?v=4"},"labels":[],"pullRequest":{"htmlUrl":"https://github.com/coala/coala/pull/6068","comments":[]}}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1566803561000,"issue":{"htmlUrl":"https://github.com/coala/coala/pull/6066","number":6066,"title":"Add Handle Nested Language Support","body":"For short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":3,"createdAt":"2019-08-22T16:48:02Z","updatedAt":"2019-08-26T07:12:41Z","closedAt":null,"state":"open","user":{"login":"Naveenaidu","avatarUrl":"https://avatars1.githubusercontent.com/u/30195193?v=4"},"owner":{"login":"Naveenaidu","avatarUrl":"https://avatars1.githubusercontent.com/u/30195193?v=4"},"labels":[],"pullRequest":{"htmlUrl":"https://github.com/coala/coala/pull/6066","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDUyMzk4NjY1NQ==","url":"https://github.com/coala/coala/pull/6066#issuecomment-523986655","bodyText":"A preview of the working https://asciinema.org/a/263844\nWe  have a test coverage of 100% 🎉\nBut Travis fails in  coala --non-interactive since it's not able to find the modules such as coalib.nested that has been added in this PR","diffHunk":null,"author":{"login":"Naveenaidu","avatarUrl":"https://avatars1.githubusercontent.com/u/30195193?v=4","name":"Naveen Naidu"},"createdAt":"2019-08-22T16:50:00Z","lastEditedAt":"2019-08-26T04:18:37Z","updatedAt":"2019-08-26T04:18:37Z"},{"id":"MDEyOklzc3VlQ29tbWVudDUyNDYwMjU0MA==","url":"https://github.com/coala/coala/pull/6066#issuecomment-524602540","bodyText":"But Travis fails in coala --non-interactive since it's not able to find the modules such as coalib.nested that has been added in this PR\n\nYou forgot to make __init__.py inside nestedlib, due to which find packages cannot find it when building wheels for it. Even though python3 doesn't mandate you to make a init for declaring a folder as a package\nhttps://setuptools.readthedocs.io/en/latest/setuptools.html#using-find-packages","diffHunk":null,"author":{"login":"virresh","avatarUrl":"https://avatars0.githubusercontent.com/u/10978108?v=4","name":"Viresh Gupta"},"createdAt":"2019-08-25T05:47:00Z","lastEditedAt":null,"updatedAt":"2019-08-25T05:47:00Z"},{"id":"MDEyOklzc3VlQ29tbWVudDUyNDcwOTM1Ng==","url":"https://github.com/coala/coala/pull/6066#issuecomment-524709356","bodyText":"But Travis fails in coala --non-interactive since it's not able to find the modules such as coalib.nested that has been added in this PR\n\nYou forgot to make __init__.py inside nestedlib, due to which find packages cannot find it when building wheels for it. Even though python3 doesn't mandate you to make a init for declaring a folder as a package\nhttps://setuptools.readthedocs.io/en/latest/setuptools.html#using-find-packages\n\nDoneee! Made the required changes. We now have 100% coverage on Travis 🎊\nI'll work on rearranging the commits so that we have 100% on ever commit level.","diffHunk":null,"author":{"login":"Naveenaidu","avatarUrl":"https://avatars1.githubusercontent.com/u/30195193?v=4","name":"Naveen Naidu"},"createdAt":"2019-08-26T04:19:15Z","lastEditedAt":"2019-08-26T04:20:21Z","updatedAt":"2019-08-26T04:20:21Z"}]}}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1566815830000,"issue":{"htmlUrl":"https://github.com/coala/coala/pull/6067","number":6067,"title":"Add support for Binary Diffs","body":"For short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":0,"createdAt":"2019-08-25T14:54:38Z","updatedAt":"2019-08-26T10:37:10Z","closedAt":null,"state":"open","user":{"login":"Utkarsh1308","avatarUrl":"https://avatars0.githubusercontent.com/u/23418707?v=4"},"owner":{"login":"Utkarsh1308","avatarUrl":"https://avatars0.githubusercontent.com/u/23418707?v=4"},"labels":[],"pullRequest":{"htmlUrl":"https://github.com/coala/coala/pull/6067","comments":[]}}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1566229999000,"issue":{"htmlUrl":"https://github.com/coala/coala/pull/6060","number":6060,"title":"Writing_Native_Bears.rst: Explain how bears can suggest multiple patches","body":"This updates Writing_Native_Bears.rst to briefly explain how bears can suggest multiple patches.","comments":1,"createdAt":"2019-08-19T14:44:24Z","updatedAt":"2019-08-19T15:53:19Z","closedAt":null,"state":"open","user":{"login":"akshatkarani","avatarUrl":"https://avatars3.githubusercontent.com/u/29230845?v=4"},"owner":{"login":"akshatkarani","avatarUrl":"https://avatars3.githubusercontent.com/u/29230845?v=4"},"labels":[],"pullRequest":{"htmlUrl":"https://github.com/coala/coala/pull/6060","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDUyMjYzODk2NA==","url":"https://github.com/coala/coala/pull/6060#issuecomment-522638964","bodyText":"Not much is written about Diff and how to suggest some changes in the current tutorial that's why I just briefly mentioned how to suggest multiple patches.","diffHunk":null,"author":{"login":"akshatkarani","avatarUrl":"https://avatars3.githubusercontent.com/u/29230845?v=4","name":"Akshat Karani"},"createdAt":"2019-08-19T15:52:57Z","lastEditedAt":"2019-08-19T15:53:19Z","updatedAt":"2019-08-19T15:53:19Z"}]}}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1566284477000,"issue":{"htmlUrl":"https://github.com/coala/coala/pull/6062","number":6062,"title":"Newcomers_Guide.rst: Mention about available forms","body":"This commit mentions about the new forms available\non the coala Community website for the contributors.\nCloses #6061","comments":0,"createdAt":"2019-08-20T07:01:17Z","updatedAt":"2019-08-20T07:01:17Z","closedAt":null,"state":"open","user":{"login":"KVGarg","avatarUrl":"https://avatars2.githubusercontent.com/u/35761292?v=4"},"owner":{"login":"KVGarg","avatarUrl":"https://avatars2.githubusercontent.com/u/35761292?v=4"},"labels":[],"pullRequest":{"htmlUrl":"https://github.com/coala/coala/pull/6062","comments":[]}}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1566345246000,"issue":{"htmlUrl":"https://github.com/coala/coala/pull/6063","number":6063,"title":"ConsoleInteraction.py: Add parents to syntax tree ","body":"Add function definition to diffs which makes them easier to understand by\ngiving information regarding what function/class the code resides in.\nThe new type of context when run on a sample file\nis shown below\n\n\n\n\n\n\n\n\nFor short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":0,"createdAt":"2019-08-20T23:40:23Z","updatedAt":"2019-08-20T23:54:06Z","closedAt":null,"state":"open","user":{"login":"Utkarsh1308","avatarUrl":"https://avatars0.githubusercontent.com/u/23418707?v=4"},"owner":{"login":"Utkarsh1308","avatarUrl":"https://avatars0.githubusercontent.com/u/23418707?v=4"},"labels":[],"pullRequest":{"htmlUrl":"https://github.com/coala/coala/pull/6063","comments":[]}}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1566807200000,"issue":{"htmlUrl":"https://github.com/coala/coala/pull/6064","number":6064,"title":"Provide support for non utf-8 encodings","body":"coala currently only supports utf-8 encodings. Before merging this\nwe need to add support for non utf-8 encodings to coala-utils.\nSome bears like SpellCheckBear have external linters which only\nsupport utf-8 encodings. To solve this the bears should describe\nthe encoding it can handle followed by coala creating a temporary\nfile in the linter's accepted encoding (Converting utf-16 to utf-8)\nSome encodings have glyphs which are not in unicode and can't be\ntranscoded to utf16/32. We should write test to catch such\nexceptions.\nCloses #3862\n\nFor short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":2,"createdAt":"2019-08-21T11:00:55Z","updatedAt":"2019-08-26T08:13:20Z","closedAt":null,"state":"open","user":{"login":"Utkarsh1308","avatarUrl":"https://avatars0.githubusercontent.com/u/23418707?v=4"},"owner":{"login":"Utkarsh1308","avatarUrl":"https://avatars0.githubusercontent.com/u/23418707?v=4"},"labels":[],"pullRequest":{"htmlUrl":"https://github.com/coala/coala/pull/6064","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDUyMzQxNTk2Mw==","url":"https://github.com/coala/coala/pull/6064#issuecomment-523415963","bodyText":"There is a problem with detect_encoding in decoding utf-32 files which is causing tests for handling utf-32 encoded files to fail.\nThese should get fixed when https://gitlab.com/coala/coala-utils/merge_requests/99 gets merged","diffHunk":null,"author":{"login":"Utkarsh1308","avatarUrl":"https://avatars0.githubusercontent.com/u/23418707?v=4","name":"Utkarsh Sharma"},"createdAt":"2019-08-21T11:28:43Z","lastEditedAt":"2019-08-21T11:29:33Z","updatedAt":"2019-08-21T11:29:33Z"},{"id":"MDEyOklzc3VlQ29tbWVudDUyNDcyNTgzNQ==","url":"https://github.com/coala/coala/pull/6064#issuecomment-524725835","bodyText":"99 got merged. Tests are passing now\nI think appveyor is failing because the latest version of coala-utils is not getting installed.\n@jayvdb please review","diffHunk":null,"author":{"login":"Utkarsh1308","avatarUrl":"https://avatars0.githubusercontent.com/u/23418707?v=4","name":"Utkarsh Sharma"},"createdAt":"2019-08-26T05:53:35Z","lastEditedAt":"2019-08-26T08:13:20Z","updatedAt":"2019-08-26T08:13:20Z"}]}}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1565536503000,"issue":{"htmlUrl":"https://github.com/coala/coala/pull/6046","number":6046,"title":"Tutorial for writing bear actions","body":"This adds a tutorial in the docs which describes how to write\nactions specific to bears.","comments":0,"createdAt":"2019-07-23T04:36:45Z","updatedAt":"2019-08-11T15:15:03Z","closedAt":null,"state":"open","user":{"login":"akshatkarani","avatarUrl":"https://avatars3.githubusercontent.com/u/29230845?v=4"},"owner":{"login":"akshatkarani","avatarUrl":"https://avatars3.githubusercontent.com/u/29230845?v=4"},"labels":[],"pullRequest":{"htmlUrl":"https://github.com/coala/coala/pull/6046","comments":[]}}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1564883274000,"issue":{"htmlUrl":"https://github.com/coala/coala/pull/6048","number":6048,"title":"Sync Templates with moban","body":"For short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":0,"createdAt":"2019-07-29T13:30:21Z","updatedAt":"2019-08-04T01:47:54Z","closedAt":null,"state":"open","user":{"login":"chay2199","avatarUrl":"https://avatars1.githubusercontent.com/u/33033514?v=4"},"owner":{"login":"chay2199","avatarUrl":"https://avatars1.githubusercontent.com/u/33033514?v=4"},"labels":[],"pullRequest":{"htmlUrl":"https://github.com/coala/coala/pull/6048","comments":[{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMDM2NzM5OQ==","url":"https://github.com/coala/coala/pull/6048#discussion_r310367399","bodyText":"These changes were sync'd with the Fudge CI PR.\nPlease rebase and there should only be two files needing updating now.","diffHunk":"@@ -1,63 +1,92 @@\n+image: Visual Studio 2015","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2019-08-04T01:47:54Z","lastEditedAt":null,"updatedAt":"2019-08-04T01:47:54Z"}]}}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1566812183000,"issue":{"htmlUrl":"https://github.com/coala/coala/pull/6049","number":6049,"title":"ConfigurationGathering.py: Run coala based on style guides","body":"This PR allows users to run coala without writing\nany configuration files. The user can specify the\nstyle-guide they want to run coala on. Currently\nhandful of styleguides for java, python, html\nand cpp are supported.\nCloses #4609\n\nFor short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":16,"createdAt":"2019-08-02T13:53:27Z","updatedAt":"2019-08-26T09:36:23Z","closedAt":null,"state":"open","user":{"login":"PrajwalM2212","avatarUrl":"https://avatars3.githubusercontent.com/u/30733262?v=4"},"owner":{"login":"PrajwalM2212","avatarUrl":"https://avatars3.githubusercontent.com/u/30733262?v=4"},"labels":[],"pullRequest":{"htmlUrl":"https://github.com/coala/coala/pull/6049","comments":[{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMjcyNDI5OA==","url":"https://github.com/coala/coala/pull/6049#discussion_r312724298","bodyText":"A better integration mechanism would be to provide a way to bootstrap a .coafile instead.\nFor example,\ncoala --generate-config py,cpp,html \n\nAnd this utility should just download corresponding style files from a repo, collate them and save as .coafile.","diffHunk":"@@ -155,6 +155,10 @@ def default_arg_parser(formatter_class=None):\n         '--no-autoapply-warn', const=True, action='store_const',\n         help='turn off warning about patches not being auto applicable')\n \n+    config_group.add_argument('--init', nargs=2, metavar='FILE',","author":{"login":"ksdme","avatarUrl":"https://avatars1.githubusercontent.com/u/12156014?v=4","name":"Kilari Teja"},"createdAt":"2019-08-11T06:12:51Z","lastEditedAt":null,"updatedAt":"2019-08-11T06:12:51Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMjcyNDM3Ng==","url":"https://github.com/coala/coala/pull/6049#discussion_r312724376","bodyText":"moban integration at a later point can add a whole lot more features.","diffHunk":"@@ -155,6 +155,10 @@ def default_arg_parser(formatter_class=None):\n         '--no-autoapply-warn', const=True, action='store_const',\n         help='turn off warning about patches not being auto applicable')\n \n+    config_group.add_argument('--init', nargs=2, metavar='FILE',","author":{"login":"ksdme","avatarUrl":"https://avatars1.githubusercontent.com/u/12156014?v=4","name":"Kilari Teja"},"createdAt":"2019-08-11T06:15:54Z","lastEditedAt":null,"updatedAt":"2019-08-11T06:15:54Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMjcyNDQ0MA==","url":"https://github.com/coala/coala/pull/6049#discussion_r312724440","bodyText":"PrajwalM2212/coala-styles#1 (comment)","diffHunk":"@@ -155,6 +155,10 @@ def default_arg_parser(formatter_class=None):\n         '--no-autoapply-warn', const=True, action='store_const',\n         help='turn off warning about patches not being auto applicable')\n \n+    config_group.add_argument('--init', nargs=2, metavar='FILE',","author":{"login":"ksdme","avatarUrl":"https://avatars1.githubusercontent.com/u/12156014?v=4","name":"Kilari Teja"},"createdAt":"2019-08-11T06:19:04Z","lastEditedAt":null,"updatedAt":"2019-08-11T06:19:04Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMjgzNDE4Ng==","url":"https://github.com/coala/coala/pull/6049#discussion_r312834186","bodyText":"@ksdme Done.\nUsers can now run coala -g python pep8 -g cpp google and this will bootstrap the .coafile with configurations for pep8 and cpp google style guides.","diffHunk":"@@ -155,6 +155,10 @@ def default_arg_parser(formatter_class=None):\n         '--no-autoapply-warn', const=True, action='store_const',\n         help='turn off warning about patches not being auto applicable')\n \n+    config_group.add_argument('--init', nargs=2, metavar='FILE',","author":{"login":"PrajwalM2212","avatarUrl":"https://avatars3.githubusercontent.com/u/30733262?v=4","name":"PRAJWAL M"},"createdAt":"2019-08-12T09:11:04Z","lastEditedAt":null,"updatedAt":"2019-08-12T09:11:04Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMzAwNjAzNQ==","url":"https://github.com/coala/coala/pull/6049#discussion_r313006035","bodyText":"This help message needs an update.","diffHunk":"@@ -155,6 +155,13 @@ def default_arg_parser(formatter_class=None):\n         '--no-autoapply-warn', const=True, action='store_const',\n         help='turn off warning about patches not being auto applicable')\n \n+    config_group.add_argument('-g',\n+                              '--generate-config', nargs=2,\n+                              action='append',\n+                              metavar='FILE',\n+                              help='Run coala based on a language'","author":{"login":"ksdme","avatarUrl":"https://avatars1.githubusercontent.com/u/12156014?v=4","name":"Kilari Teja"},"createdAt":"2019-08-12T16:11:28Z","lastEditedAt":null,"updatedAt":"2019-08-12T16:11:28Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMzAwNjM1Nw==","url":"https://github.com/coala/coala/pull/6049#discussion_r313006357","bodyText":"Why is there a limit on nargs? Shouldn't this be + instead?","diffHunk":"@@ -155,6 +155,13 @@ def default_arg_parser(formatter_class=None):\n         '--no-autoapply-warn', const=True, action='store_const',\n         help='turn off warning about patches not being auto applicable')\n \n+    config_group.add_argument('-g',\n+                              '--generate-config', nargs=2,","author":{"login":"ksdme","avatarUrl":"https://avatars1.githubusercontent.com/u/12156014?v=4","name":"Kilari Teja"},"createdAt":"2019-08-12T16:12:14Z","lastEditedAt":null,"updatedAt":"2019-08-12T16:12:14Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMzAwNjYzMA==","url":"https://github.com/coala/coala/pull/6049#discussion_r313006630","bodyText":"This belongs to upper block of imports.","diffHunk":"@@ -1,7 +1,9 @@\n import os\n+import shutil\n import sys\n import logging\n \n+import requests","author":{"login":"ksdme","avatarUrl":"https://avatars1.githubusercontent.com/u/12156014?v=4","name":"Kilari Teja"},"createdAt":"2019-08-12T16:12:54Z","lastEditedAt":null,"updatedAt":"2019-08-12T16:12:54Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMzAwNzE0NQ==","url":"https://github.com/coala/coala/pull/6049#discussion_r313007145","bodyText":"ConfigurationGathering.py seems to be a weird place for this functionality to be implemented in. This is an action and should probably be handled at an higher level.","diffHunk":"@@ -1,7 +1,9 @@\n import os\n+import shutil","author":{"login":"ksdme","avatarUrl":"https://avatars1.githubusercontent.com/u/12156014?v=4","name":"Kilari Teja"},"createdAt":"2019-08-12T16:14:09Z","lastEditedAt":null,"updatedAt":"2019-08-12T16:14:09Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMzAwNzc3Ng==","url":"https://github.com/coala/coala/pull/6049#discussion_r313007776","bodyText":"This needs to at least be defined as a higher scoped string literal variable.","diffHunk":"@@ -448,6 +450,40 @@ def get_filtered_bears(languages,\n     return local_bears, global_bears\n \n \n+def get_style_config(args, config_file):\n+    \"\"\"\n+    Get the style guide configuration files for all\n+    the requested styles and collate them into the\n+    specified config file.\n+    :param args: Alternative pre-parsed CLI arguments.\n+    :param config_file: The config file to collate to\n+    \"\"\"\n+    if args and args.generate_config:\n+        style_list = args.generate_config\n+        base_url = ('https://raw.githubusercontent.com/PrajwalM2212/'","author":{"login":"ksdme","avatarUrl":"https://avatars1.githubusercontent.com/u/12156014?v=4","name":"Kilari Teja"},"createdAt":"2019-08-12T16:15:39Z","lastEditedAt":null,"updatedAt":"2019-08-12T16:15:39Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMzAwOTEwNw==","url":"https://github.com/coala/coala/pull/6049#discussion_r313009107","bodyText":"Quite hacky, this should be dropped imo. It could interfere with bear caches. It is fine if we don't have caching mechanism built in as of yet. You can build a simple caching system if you so desire rn.","diffHunk":"@@ -448,6 +450,40 @@ def get_filtered_bears(languages,\n     return local_bears, global_bears\n \n \n+def get_style_config(args, config_file):\n+    \"\"\"\n+    Get the style guide configuration files for all\n+    the requested styles and collate them into the\n+    specified config file.\n+    :param args: Alternative pre-parsed CLI arguments.\n+    :param config_file: The config file to collate to\n+    \"\"\"\n+    if args and args.generate_config:\n+        style_list = args.generate_config\n+        base_url = ('https://raw.githubusercontent.com/PrajwalM2212/'\n+                    'coala-styles/master/coala_styles/styles/')\n+        file_list = []\n+        from coalib.core.Bear import Bear\n+        for style in style_list:\n+            lang = style[0]\n+            author = style[1]\n+            try:\n+                file_list.append(Bear.download_cached_file(","author":{"login":"ksdme","avatarUrl":"https://avatars1.githubusercontent.com/u/12156014?v=4","name":"Kilari Teja"},"createdAt":"2019-08-12T16:18:48Z","lastEditedAt":"2019-08-13T12:06:22Z","updatedAt":"2019-08-13T12:06:22Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMzAxMTY2OA==","url":"https://github.com/coala/coala/pull/6049#discussion_r313011668","bodyText":"I think coala --generate-config should be an independent command, it should exit after generating the configuration file.","diffHunk":"@@ -495,6 +531,9 @@ def gather_configuration(acquire_settings,\n         # Note: arg_list can also be []. Hence we cannot use\n         # `arg_list = arg_list or default_list`\n         arg_list = sys.argv[1:] if arg_list is None else arg_list\n+\n+    get_style_config(args, config_file='.coafile')","author":{"login":"ksdme","avatarUrl":"https://avatars1.githubusercontent.com/u/12156014?v=4","name":"Kilari Teja"},"createdAt":"2019-08-12T16:24:49Z","lastEditedAt":null,"updatedAt":"2019-08-12T16:24:49Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMzAxMjc4Mw==","url":"https://github.com/coala/coala/pull/6049#discussion_r313012783","bodyText":"Why not lang, author = style?","diffHunk":"@@ -448,6 +450,40 @@ def get_filtered_bears(languages,\n     return local_bears, global_bears\n \n \n+def get_style_config(args, config_file):\n+    \"\"\"\n+    Get the style guide configuration files for all\n+    the requested styles and collate them into the\n+    specified config file.\n+    :param args: Alternative pre-parsed CLI arguments.\n+    :param config_file: The config file to collate to\n+    \"\"\"\n+    if args and args.generate_config:\n+        style_list = args.generate_config\n+        base_url = ('https://raw.githubusercontent.com/PrajwalM2212/'\n+                    'coala-styles/master/coala_styles/styles/')\n+        file_list = []\n+        from coalib.core.Bear import Bear\n+        for style in style_list:\n+            lang = style[0]","author":{"login":"ksdme","avatarUrl":"https://avatars1.githubusercontent.com/u/12156014?v=4","name":"Kilari Teja"},"createdAt":"2019-08-12T16:27:24Z","lastEditedAt":null,"updatedAt":"2019-08-12T16:27:24Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMzAxMzY3Mg==","url":"https://github.com/coala/coala/pull/6049#discussion_r313013672","bodyText":"It should probably accept a list of language:style_name strings. A project could be have more than one language.","diffHunk":"@@ -155,6 +155,13 @@ def default_arg_parser(formatter_class=None):\n         '--no-autoapply-warn', const=True, action='store_const',\n         help='turn off warning about patches not being auto applicable')\n \n+    config_group.add_argument('-g',\n+                              '--generate-config', nargs=2,","author":{"login":"ksdme","avatarUrl":"https://avatars1.githubusercontent.com/u/12156014?v=4","name":"Kilari Teja"},"createdAt":"2019-08-12T16:29:27Z","lastEditedAt":null,"updatedAt":"2019-08-12T16:29:27Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMzAxNDYzOA==","url":"https://github.com/coala/coala/pull/6049#discussion_r313014638","bodyText":"The behavior that this tool will append to an existing .coafile should be documented.","diffHunk":"@@ -448,6 +450,40 @@ def get_filtered_bears(languages,\n     return local_bears, global_bears\n \n \n+def get_style_config(args, config_file):\n+    \"\"\"\n+    Get the style guide configuration files for all\n+    the requested styles and collate them into the\n+    specified config file.\n+    :param args: Alternative pre-parsed CLI arguments.\n+    :param config_file: The config file to collate to\n+    \"\"\"\n+    if args and args.generate_config:\n+        style_list = args.generate_config\n+        base_url = ('https://raw.githubusercontent.com/PrajwalM2212/'\n+                    'coala-styles/master/coala_styles/styles/')\n+        file_list = []\n+        from coalib.core.Bear import Bear\n+        for style in style_list:\n+            lang = style[0]\n+            author = style[1]\n+            try:\n+                file_list.append(Bear.download_cached_file(\n+                    (base_url\n+                     + '{}/{}_config.coafile')\n+                    .format(lang, author),\n+                    lang))\n+            except requests.exceptions.HTTPError:\n+                logging.info('{} style guide for {} not avilable'.format(\n+                    author, lang\n+                ))\n+\n+        with open(config_file, 'ab') as config:","author":{"login":"ksdme","avatarUrl":"https://avatars1.githubusercontent.com/u/12156014?v=4","name":"Kilari Teja"},"createdAt":"2019-08-12T16:31:45Z","lastEditedAt":null,"updatedAt":"2019-08-12T16:31:45Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMzM1OTQ2Nw==","url":"https://github.com/coala/coala/pull/6049#discussion_r313359467","bodyText":"Just noticed #6049 (comment), anyway I think language:style_name syntax is a better choice for readability reasons.","diffHunk":"@@ -155,6 +155,13 @@ def default_arg_parser(formatter_class=None):\n         '--no-autoapply-warn', const=True, action='store_const',\n         help='turn off warning about patches not being auto applicable')\n \n+    config_group.add_argument('-g',\n+                              '--generate-config', nargs=2,","author":{"login":"ksdme","avatarUrl":"https://avatars1.githubusercontent.com/u/12156014?v=4","name":"Kilari Teja"},"createdAt":"2019-08-13T12:05:38Z","lastEditedAt":null,"updatedAt":"2019-08-13T12:05:38Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNTUyMTk3OQ==","url":"https://github.com/coala/coala/pull/6049#discussion_r315521979","bodyText":"This is not the place for it. Probably a beginner issue.","diffHunk":"@@ -97,5 +100,14 @@ def mode_format(args, debug=False):\n     from coalib.output.ConsoleInteraction import print_results_formatted\n \n     _, exitcode, _ = run_coala(\n-            print_results=print_results_formatted, args=args, debug=debug)\n+        print_results=print_results_formatted, args=args, debug=debug)","author":{"login":"ksdme","avatarUrl":"https://avatars1.githubusercontent.com/u/12156014?v=4","name":"Kilari Teja"},"createdAt":"2019-08-20T06:21:45Z","lastEditedAt":null,"updatedAt":"2019-08-20T06:21:45Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNTUyMjgzNA==","url":"https://github.com/coala/coala/pull/6049#discussion_r315522834","bodyText":"Suggested change\n        \n          \n            \n          \n        \n      \n    \n    \n      \n        \n          \n                                        help='A tool generate config files '\n        \n          \n            \n                                          help='A tool generate config files '\n          \n          \n            \n                                          help='A tool to generate config files '","diffHunk":"@@ -155,6 +155,12 @@ def default_arg_parser(formatter_class=None):\n         '--no-autoapply-warn', const=True, action='store_const',\n         help='turn off warning about patches not being auto applicable')\n \n+    config_group.add_argument('-g',\n+                              '--generate-config', nargs='+',\n+                              metavar='FILE',\n+                              help='A tool generate config files '","author":{"login":"ksdme","avatarUrl":"https://avatars1.githubusercontent.com/u/12156014?v=4","name":"Kilari Teja"},"createdAt":"2019-08-20T06:25:35Z","lastEditedAt":null,"updatedAt":"2019-08-20T06:25:35Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNTUyMzA5OA==","url":"https://github.com/coala/coala/pull/6049#discussion_r315523098","bodyText":"Please regroup this import blocks.","diffHunk":"@@ -0,0 +1,125 @@\n+import logging","author":{"login":"ksdme","avatarUrl":"https://avatars1.githubusercontent.com/u/12156014?v=4","name":"Kilari Teja"},"createdAt":"2019-08-20T06:26:42Z","lastEditedAt":null,"updatedAt":"2019-08-20T06:26:42Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNTUyMzE1OA==","url":"https://github.com/coala/coala/pull/6049#discussion_r315523158","bodyText":"Two import statements?","diffHunk":"@@ -0,0 +1,125 @@\n+import logging\n+import sys\n+from genericpath import exists\n+import os\n+from appdirs import user_data_dir\n+import requests\n+\n+from coalib.misc import Constants\n+from coalib.settings.ConfigurationGathering import (load_configuration,","author":{"login":"ksdme","avatarUrl":"https://avatars1.githubusercontent.com/u/12156014?v=4","name":"Kilari Teja"},"createdAt":"2019-08-20T06:26:59Z","lastEditedAt":null,"updatedAt":"2019-08-20T06:26:59Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNTUyNTQ4Mg==","url":"https://github.com/coala/coala/pull/6049#discussion_r315525482","bodyText":"Thank you for showing me this.","diffHunk":"@@ -0,0 +1,125 @@\n+import logging\n+import sys\n+from genericpath import exists\n+import os\n+from appdirs import user_data_dir\n+import requests\n+\n+from coalib.misc import Constants\n+from coalib.settings.ConfigurationGathering import (load_configuration,\n+                                                    save_sections)\n+from coalib.settings.Setting import Setting\n+\n+\n+class ConfigGenerator:\n+    \"\"\"\n+    This class can be used top create .coafile\n+    \"\"\"\n+\n+    def __init__(self, args):\n+        self.args = args\n+        self.collector_file = Constants.local_coafile\n+        self.base_url = ('https://raw.githubusercontent.com/PrajwalM2212/'\n+                         'coala-styles/master/coala_styles/styles/')\n+\n+    def download_cached_file(self, url, filename):\n+        \"\"\"\n+        Download the config file or return the existing config\n+        file if it already exists.\n+\n+        :param url: The url to download from\n+        :param filename: The filename in which the config will be saved\n+        :return: Return filename\n+        \"\"\"\n+        filename = os.path.join(self.data_dir, filename)\n+        if exists(filename):\n+            return filename\n+\n+        response = requests.get(url, stream=True, timeout=20)\n+        response.raise_for_status()","author":{"login":"ksdme","avatarUrl":"https://avatars1.githubusercontent.com/u/12156014?v=4","name":"Kilari Teja"},"createdAt":"2019-08-20T06:36:23Z","lastEditedAt":null,"updatedAt":"2019-08-20T06:36:23Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNTUyNzQ5Nw==","url":"https://github.com/coala/coala/pull/6049#discussion_r315527497","bodyText":"Dangling parenthesis looks weird.","diffHunk":"@@ -0,0 +1,125 @@\n+import logging\n+import sys\n+from genericpath import exists\n+import os\n+from appdirs import user_data_dir\n+import requests\n+\n+from coalib.misc import Constants\n+from coalib.settings.ConfigurationGathering import (load_configuration,\n+                                                    save_sections)\n+from coalib.settings.Setting import Setting\n+\n+\n+class ConfigGenerator:\n+    \"\"\"\n+    This class can be used top create .coafile\n+    \"\"\"\n+\n+    def __init__(self, args):\n+        self.args = args\n+        self.collector_file = Constants.local_coafile\n+        self.base_url = ('https://raw.githubusercontent.com/PrajwalM2212/'\n+                         'coala-styles/master/coala_styles/styles/')\n+\n+    def download_cached_file(self, url, filename):\n+        \"\"\"\n+        Download the config file or return the existing config\n+        file if it already exists.\n+\n+        :param url: The url to download from\n+        :param filename: The filename in which the config will be saved\n+        :return: Return filename\n+        \"\"\"\n+        filename = os.path.join(self.data_dir, filename)\n+        if exists(filename):\n+            return filename\n+\n+        response = requests.get(url, stream=True, timeout=20)\n+        response.raise_for_status()\n+\n+        with open(filename, 'ab') as file:\n+            for chunk in response.iter_content(125):\n+                file.write(chunk)\n+        return filename\n+\n+    @property\n+    def data_dir(self):\n+        \"\"\"\n+        Define the path where downloaded config files will be stored.\n+\n+        :return: data_dir path\n+        \"\"\"\n+        data_dir = os.path.abspath(os.path.join(\n+            user_data_dir('coala-styles')))\n+\n+        os.makedirs(data_dir, exist_ok=True)\n+        return data_dir\n+\n+    def create_coafile(self):\n+        \"\"\"\n+        Generate .coafile based on user preferences.\n+\n+        Downloads the config files if they don't already\n+        exist. Combines the style-based config files\n+        and writes them into .coafile.\n+        \"\"\"\n+        config_groups = self.args.generate_config\n+        file_list = []\n+        lint_files_dict = {}\n+\n+        for config_group in config_groups:\n+            config_group_args = config_group.split(':')\n+            try:\n+                if len(config_group_args) == 2:\n+                    lang, author = config_group_args\n+                else:\n+                    lang, author, lint_files_dict[lang] = config_group_args\n+            except ValueError:\n+                logging.error('Supply command line args in '\n+                              'the form language:style_name '\n+                              )","author":{"login":"ksdme","avatarUrl":"https://avatars1.githubusercontent.com/u/12156014?v=4","name":"Kilari Teja"},"createdAt":"2019-08-20T06:43:30Z","lastEditedAt":null,"updatedAt":"2019-08-20T06:43:30Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNTUyNzcxOQ==","url":"https://github.com/coala/coala/pull/6049#discussion_r315527719","bodyText":"Exit with an error code. coala generally seems to exit with 255.","diffHunk":"@@ -0,0 +1,125 @@\n+import logging\n+import sys\n+from genericpath import exists\n+import os\n+from appdirs import user_data_dir\n+import requests\n+\n+from coalib.misc import Constants\n+from coalib.settings.ConfigurationGathering import (load_configuration,\n+                                                    save_sections)\n+from coalib.settings.Setting import Setting\n+\n+\n+class ConfigGenerator:\n+    \"\"\"\n+    This class can be used top create .coafile\n+    \"\"\"\n+\n+    def __init__(self, args):\n+        self.args = args\n+        self.collector_file = Constants.local_coafile\n+        self.base_url = ('https://raw.githubusercontent.com/PrajwalM2212/'\n+                         'coala-styles/master/coala_styles/styles/')\n+\n+    def download_cached_file(self, url, filename):\n+        \"\"\"\n+        Download the config file or return the existing config\n+        file if it already exists.\n+\n+        :param url: The url to download from\n+        :param filename: The filename in which the config will be saved\n+        :return: Return filename\n+        \"\"\"\n+        filename = os.path.join(self.data_dir, filename)\n+        if exists(filename):\n+            return filename\n+\n+        response = requests.get(url, stream=True, timeout=20)\n+        response.raise_for_status()\n+\n+        with open(filename, 'ab') as file:\n+            for chunk in response.iter_content(125):\n+                file.write(chunk)\n+        return filename\n+\n+    @property\n+    def data_dir(self):\n+        \"\"\"\n+        Define the path where downloaded config files will be stored.\n+\n+        :return: data_dir path\n+        \"\"\"\n+        data_dir = os.path.abspath(os.path.join(\n+            user_data_dir('coala-styles')))\n+\n+        os.makedirs(data_dir, exist_ok=True)\n+        return data_dir\n+\n+    def create_coafile(self):\n+        \"\"\"\n+        Generate .coafile based on user preferences.\n+\n+        Downloads the config files if they don't already\n+        exist. Combines the style-based config files\n+        and writes them into .coafile.\n+        \"\"\"\n+        config_groups = self.args.generate_config\n+        file_list = []\n+        lint_files_dict = {}\n+\n+        for config_group in config_groups:\n+            config_group_args = config_group.split(':')\n+            try:\n+                if len(config_group_args) == 2:\n+                    lang, author = config_group_args\n+                else:\n+                    lang, author, lint_files_dict[lang] = config_group_args\n+            except ValueError:\n+                logging.error('Supply command line args in '\n+                              'the form language:style_name '\n+                              )\n+                sys.exit()","author":{"login":"ksdme","avatarUrl":"https://avatars1.githubusercontent.com/u/12156014?v=4","name":"Kilari Teja"},"createdAt":"2019-08-20T06:44:13Z","lastEditedAt":null,"updatedAt":"2019-08-20T06:44:13Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNTUyNzk4MA==","url":"https://github.com/coala/coala/pull/6049#discussion_r315527980","bodyText":"I don't think this style is very good.","diffHunk":"@@ -0,0 +1,125 @@\n+import logging\n+import sys\n+from genericpath import exists\n+import os\n+from appdirs import user_data_dir\n+import requests\n+\n+from coalib.misc import Constants\n+from coalib.settings.ConfigurationGathering import (load_configuration,\n+                                                    save_sections)\n+from coalib.settings.Setting import Setting\n+\n+\n+class ConfigGenerator:\n+    \"\"\"\n+    This class can be used top create .coafile\n+    \"\"\"\n+\n+    def __init__(self, args):\n+        self.args = args\n+        self.collector_file = Constants.local_coafile\n+        self.base_url = ('https://raw.githubusercontent.com/PrajwalM2212/'\n+                         'coala-styles/master/coala_styles/styles/')\n+\n+    def download_cached_file(self, url, filename):\n+        \"\"\"\n+        Download the config file or return the existing config\n+        file if it already exists.\n+\n+        :param url: The url to download from\n+        :param filename: The filename in which the config will be saved\n+        :return: Return filename\n+        \"\"\"\n+        filename = os.path.join(self.data_dir, filename)\n+        if exists(filename):\n+            return filename\n+\n+        response = requests.get(url, stream=True, timeout=20)\n+        response.raise_for_status()\n+\n+        with open(filename, 'ab') as file:\n+            for chunk in response.iter_content(125):\n+                file.write(chunk)\n+        return filename\n+\n+    @property\n+    def data_dir(self):\n+        \"\"\"\n+        Define the path where downloaded config files will be stored.\n+\n+        :return: data_dir path\n+        \"\"\"\n+        data_dir = os.path.abspath(os.path.join(\n+            user_data_dir('coala-styles')))\n+\n+        os.makedirs(data_dir, exist_ok=True)\n+        return data_dir\n+\n+    def create_coafile(self):\n+        \"\"\"\n+        Generate .coafile based on user preferences.\n+\n+        Downloads the config files if they don't already\n+        exist. Combines the style-based config files\n+        and writes them into .coafile.\n+        \"\"\"\n+        config_groups = self.args.generate_config\n+        file_list = []\n+        lint_files_dict = {}\n+\n+        for config_group in config_groups:\n+            config_group_args = config_group.split(':')\n+            try:\n+                if len(config_group_args) == 2:\n+                    lang, author = config_group_args\n+                else:\n+                    lang, author, lint_files_dict[lang] = config_group_args\n+            except ValueError:\n+                logging.error('Supply command line args in '\n+                              'the form language:style_name '\n+                              )\n+                sys.exit()\n+\n+            try:\n+                file_name = (self.download_cached_file(\n+                    (self.base_url + '{}/{}_config.coafile')\n+                    .format(lang, author),\n+                    lang + '_' + author))\n+\n+                file_list.append(file_name)\n+\n+            except requests.exceptions.HTTPError:\n+                logging.warning('{} style guide for {} not avilable'.format(\n+                    author, lang\n+                ))\n+\n+        with open(self.collector_file, 'a') as outfile:\n+            for fname in file_list:\n+                with open(fname) as infile:\n+                    for line in infile:\n+                        outfile.write(line)\n+\n+        self.args.save = True\n+        self.args.config = self.collector_file\n+\n+        sections, targets = load_configuration(None, None,\n+                                               args=self.args)\n+\n+        sections.get('cli').delete_setting('config')\n+        sections.get('cli').delete_setting('generate_config')\n+\n+        for lang, lint_files in lint_files_dict.items():\n+            if sections.get(lang, None):\n+                sections.get(lang).append(\n+                    Setting('files',\n+                            lint_files,\n+                            ))","author":{"login":"ksdme","avatarUrl":"https://avatars1.githubusercontent.com/u/12156014?v=4","name":"Kilari Teja"},"createdAt":"2019-08-20T06:45:07Z","lastEditedAt":null,"updatedAt":"2019-08-20T06:45:07Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNTUyODEwNA==","url":"https://github.com/coala/coala/pull/6049#discussion_r315528104","bodyText":"?","diffHunk":"@@ -495,6 +494,7 @@ def gather_configuration(acquire_settings,\n         # Note: arg_list can also be []. Hence we cannot use\n         # `arg_list = arg_list or default_list`\n         arg_list = sys.argv[1:] if arg_list is None else arg_list\n+","author":{"login":"ksdme","avatarUrl":"https://avatars1.githubusercontent.com/u/12156014?v=4","name":"Kilari Teja"},"createdAt":"2019-08-20T06:45:31Z","lastEditedAt":null,"updatedAt":"2019-08-20T06:45:31Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNTUyODI4NQ==","url":"https://github.com/coala/coala/pull/6049#discussion_r315528285","bodyText":"Change not in scope.","diffHunk":"@@ -109,11 +108,10 @@ def test_default_coafile_deprecation(self, capture):\n \n         capture.check(\n             ('root', 'WARNING', 'Filename default_coafile has been deprecated. '\n-             'Please use system_coafile instead.')\n+                                'Please use system_coafile instead.')","author":{"login":"ksdme","avatarUrl":"https://avatars1.githubusercontent.com/u/12156014?v=4","name":"Kilari Teja"},"createdAt":"2019-08-20T06:46:07Z","lastEditedAt":null,"updatedAt":"2019-08-20T06:46:07Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNTUyODMwOQ==","url":"https://github.com/coala/coala/pull/6049#discussion_r315528309","bodyText":"Change not in scope.","diffHunk":"@@ -25,11 +25,10 @@\n     gather_configuration,\n     get_filtered_bears,\n     load_configuration,\n-)\n+    )","author":{"login":"ksdme","avatarUrl":"https://avatars1.githubusercontent.com/u/12156014?v=4","name":"Kilari Teja"},"createdAt":"2019-08-20T06:46:12Z","lastEditedAt":null,"updatedAt":"2019-08-20T06:46:12Z"},{"id":"MDEyOklzc3VlQ29tbWVudDUxNzcxMTQ4OA==","url":"https://github.com/coala/coala/pull/6049#issuecomment-517711488","bodyText":"Currently, 5 style guides are supported across 4 languages (cpp, java, html, python).\ncoala --init language style --files = [files to lint] will run style guide lint on the required files\nEg:-\ncoala --init python pep8 --files = a.py will check a.py against pep8 guidelines.","diffHunk":null,"author":{"login":"PrajwalM2212","avatarUrl":"https://avatars3.githubusercontent.com/u/30733262?v=4","name":"PRAJWAL M"},"createdAt":"2019-08-02T13:59:58Z","lastEditedAt":"2019-08-02T14:44:59Z","updatedAt":"2019-08-02T14:44:59Z"},{"id":"MDEyOklzc3VlQ29tbWVudDUxNzcyNzkzMg==","url":"https://github.com/coala/coala/pull/6049#issuecomment-517727932","bodyText":"@jayvdb @RaiVaibhav @Nosferatul @ksdme @margobra8 Can you review this PR ?","diffHunk":null,"author":{"login":"PrajwalM2212","avatarUrl":"https://avatars3.githubusercontent.com/u/30733262?v=4","name":"PRAJWAL M"},"createdAt":"2019-08-02T14:45:35Z","lastEditedAt":null,"updatedAt":"2019-08-02T14:45:35Z"},{"id":"MDEyOklzc3VlQ29tbWVudDUxNzk5MjM3NQ==","url":"https://github.com/coala/coala/pull/6049#issuecomment-517992375","bodyText":"Check the Travis CI build faling. Exit code 1 is given when running pip install coala-bears.zip[alldeps] --pre -U. Other than that, commits LGTM.","diffHunk":null,"author":{"login":"margobra8","avatarUrl":"https://avatars1.githubusercontent.com/u/11057853?v=4","name":"Marcos Gómez"},"createdAt":"2019-08-04T10:40:01Z","lastEditedAt":null,"updatedAt":"2019-08-04T10:40:01Z"},{"id":"MDEyOklzc3VlQ29tbWVudDUyMDE1NjQ3MA==","url":"https://github.com/coala/coala/pull/6049#issuecomment-520156470","bodyText":"Passing now, could merge\ncc: @Nosferatul or @li-boxuan","diffHunk":null,"author":{"login":"margobra8","avatarUrl":"https://avatars1.githubusercontent.com/u/11057853?v=4","name":"Marcos Gómez"},"createdAt":"2019-08-10T15:14:17Z","lastEditedAt":null,"updatedAt":"2019-08-10T15:14:17Z"},{"id":"MDEyOklzc3VlQ29tbWVudDUyMDE3Mzc5NQ==","url":"https://github.com/coala/coala/pull/6049#issuecomment-520173795","bodyText":"There is still a problem with Travis. I have temporarily fixed it by adding ruamel.yaml<=0.15.0.","diffHunk":null,"author":{"login":"PrajwalM2212","avatarUrl":"https://avatars3.githubusercontent.com/u/30733262?v=4","name":"PRAJWAL M"},"createdAt":"2019-08-10T19:27:27Z","lastEditedAt":null,"updatedAt":"2019-08-10T19:27:27Z"},{"id":"MDEyOklzc3VlQ29tbWVudDUyMDE3Nzc5Ng==","url":"https://github.com/coala/coala/pull/6049#issuecomment-520177796","bodyText":"The second commit uses https://github.com/PrajwalM2212/coala-styles for configuration files.\nThe first commit has configuration files within the repo.\nBased on the needs we can choose one of them.","diffHunk":null,"author":{"login":"PrajwalM2212","avatarUrl":"https://avatars3.githubusercontent.com/u/30733262?v=4","name":"PRAJWAL M"},"createdAt":"2019-08-10T20:33:45Z","lastEditedAt":"2019-08-10T20:36:30Z","updatedAt":"2019-08-10T20:36:30Z"},{"id":"MDEyOklzc3VlQ29tbWVudDUyMDkyNTA3OA==","url":"https://github.com/coala/coala/pull/6049#issuecomment-520925078","bodyText":"@ksdme Can you see if this approach is okay.\nI have made this into an independent command.\nUser can follow lang:style:files format. Also for the default or all or cli  section files can be specified as well.\nSo we can use something like coala -g python:pep8:a.py cpp:google:b.cpp --files c\nThis will generate a coafile that's fully functional out of the box.\nThis will generate\n[python]\nbears = PEP8Bear, PycodestyleBear\nlanguage = Python\nfiles = a.py\n\n[cpp]\nbears = CPPLintBear\nlanguage = CPP\nfiles = b.cpp\n\n[cli]\nconfig = .coafile\nfiles = c\ngenerate_config = python:pep8:a.py,cpp:google:b.cpp\n\nI should still write tests. I thought you could see the approach while I write tests.","diffHunk":null,"author":{"login":"PrajwalM2212","avatarUrl":"https://avatars3.githubusercontent.com/u/30733262?v=4","name":"PRAJWAL M"},"createdAt":"2019-08-13T17:16:04Z","lastEditedAt":"2019-08-13T17:27:44Z","updatedAt":"2019-08-13T17:27:44Z"},{"id":"MDEyOklzc3VlQ29tbWVudDUyMTU0OTkxOQ==","url":"https://github.com/coala/coala/pull/6049#issuecomment-521549919","bodyText":"Tests have been added.","diffHunk":null,"author":{"login":"PrajwalM2212","avatarUrl":"https://avatars3.githubusercontent.com/u/30733262?v=4","name":"PRAJWAL M"},"createdAt":"2019-08-15T07:48:33Z","lastEditedAt":null,"updatedAt":"2019-08-15T07:48:33Z"},{"id":"MDEyOklzc3VlQ29tbWVudDUyMTYxMjA2OA==","url":"https://github.com/coala/coala/pull/6049#issuecomment-521612068","bodyText":"@ksdme The documentation PR for this coala/documentation#599","diffHunk":null,"author":{"login":"PrajwalM2212","avatarUrl":"https://avatars3.githubusercontent.com/u/30733262?v=4","name":"PRAJWAL M"},"createdAt":"2019-08-15T11:38:14Z","lastEditedAt":null,"updatedAt":"2019-08-15T11:38:14Z"},{"id":"MDEyOklzc3VlQ29tbWVudDUyMjI5MjM5Nw==","url":"https://github.com/coala/coala/pull/6049#issuecomment-522292397","bodyText":"@ksdme Can you review this?","diffHunk":null,"author":{"login":"PrajwalM2212","avatarUrl":"https://avatars3.githubusercontent.com/u/30733262?v=4","name":"PRAJWAL M"},"createdAt":"2019-08-18T05:26:35Z","lastEditedAt":"2019-08-19T12:49:04Z","updatedAt":"2019-08-19T12:49:04Z"},{"id":"MDEyOklzc3VlQ29tbWVudDUyMjg3MDAxMA==","url":"https://github.com/coala/coala/pull/6049#issuecomment-522870010","bodyText":"I love the approach except for CLI section. I know we handle CLI section in an unnecessarily special way, but you shouldn't include that in the generated config. The way it should work ideally is to have a generate an all section and have every other section be a child of all. Such as all.python, all.c etc and dump all the options such as files in it. Is there any error handling built in, for example what happens if I only pass python:pep8 and omit the third field? also can I pass multiple file patterns for each style say python:google:*.py,**/**/one/*.py\nBut if this system works for now, I am good with it. We can make improvements later.","diffHunk":null,"author":{"login":"ksdme","avatarUrl":"https://avatars1.githubusercontent.com/u/12156014?v=4","name":"Kilari Teja"},"createdAt":"2019-08-20T06:16:12Z","lastEditedAt":"2019-08-20T06:19:21Z","updatedAt":"2019-08-20T06:19:21Z"},{"id":"MDEyOklzc3VlQ29tbWVudDUyMjg3OTIxOA==","url":"https://github.com/coala/coala/pull/6049#issuecomment-522879218","bodyText":"One other feature addition we can have is to support exclusions in -g syntax i.e. lang:author:files:excludes. Also, it would be good to assume that files=** and excludes= if they are missing. This would make it more flexible.","diffHunk":null,"author":{"login":"ksdme","avatarUrl":"https://avatars1.githubusercontent.com/u/12156014?v=4","name":"Kilari Teja"},"createdAt":"2019-08-20T06:48:49Z","lastEditedAt":null,"updatedAt":"2019-08-20T06:48:49Z"},{"id":"MDEyOklzc3VlQ29tbWVudDUyMzA2MjI3NQ==","url":"https://github.com/coala/coala/pull/6049#issuecomment-523062275","bodyText":"also can I pass multiple file patterns for each style say python:google:*.py,**/**/one/*.py\n\nYes\n\nIs there any error handling built in, for example what happens if I only pass python:pep8 and omit the third field?\n\nYes\nIf files and excludes are missed default values will be taken.\n\nOne other feature addition we can have is to support exclusions in -g syntax i.e. lang:author:files:excludes. Also, it would be good to assume that files=** and excludes= if they are missing. This would make it more flexible.\n\nAdded\n\nI know we handle CLI section in an unnecessarily special way, but you shouldn't include that in the generated config.\n\ncli has been replaced with all","diffHunk":null,"author":{"login":"PrajwalM2212","avatarUrl":"https://avatars3.githubusercontent.com/u/30733262?v=4","name":"PRAJWAL M"},"createdAt":"2019-08-20T15:16:18Z","lastEditedAt":"2019-08-21T15:01:44Z","updatedAt":"2019-08-21T15:01:44Z"},{"id":"MDEyOklzc3VlQ29tbWVudDUyMzEzNzA2NQ==","url":"https://github.com/coala/coala/pull/6049#issuecomment-523137065","bodyText":"Appveyor is failing due to timeout on coalaTest.py. I have not made changes in this part of the codebase.\nNot sure if appveyor build is broken or if there is a problem on appveyor side.  I will try to build again tomorrow.","diffHunk":null,"author":{"login":"PrajwalM2212","avatarUrl":"https://avatars3.githubusercontent.com/u/30733262?v=4","name":"PRAJWAL M"},"createdAt":"2019-08-20T18:22:38Z","lastEditedAt":null,"updatedAt":"2019-08-20T18:22:38Z"},{"id":"MDEyOklzc3VlQ29tbWVudDUyMzI2MDM5NA==","url":"https://github.com/coala/coala/pull/6049#issuecomment-523260394","bodyText":"appveyor build is passing as well.","diffHunk":null,"author":{"login":"PrajwalM2212","avatarUrl":"https://avatars3.githubusercontent.com/u/30733262?v=4","name":"PRAJWAL M"},"createdAt":"2019-08-21T01:43:02Z","lastEditedAt":null,"updatedAt":"2019-08-21T01:43:02Z"},{"id":"MDEyOklzc3VlQ29tbWVudDUyNDc5MzU0MA==","url":"https://github.com/coala/coala/pull/6049#issuecomment-524793540","bodyText":"Nice! Looking good","diffHunk":null,"author":{"login":"margobra8","avatarUrl":"https://avatars1.githubusercontent.com/u/11057853?v=4","name":"Marcos Gómez"},"createdAt":"2019-08-26T09:36:23Z","lastEditedAt":null,"updatedAt":"2019-08-26T09:36:23Z"}]}}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1565163782000,"issue":{"htmlUrl":"https://github.com/coala/coala/pull/6054","number":6054,"title":".travis.yml: Build on xenial using template","body":"#6053 is only\noccurring in the Travis trusty environment.\nUpgrading to xenial bypasses that problem, but\nrequires a few workarounds, especially replacing the\nPython 3.4.2 job with Python '3.4' which causes\nTravis to provide Python 3.4.8.\nAdd gravis to template to switch jdk versions on Xenial.\nUninstall setuptools multiple times on Xenial for the same\nreason it was required once on Trusty.  Also remove\nunnecessary pipenv which causes pip to complain about\nincompatibilities.\nDisable new template for JinjaBear due to its inability\nto handle indentation.\n.misc/check_moban.sh is no longer needed as the\nTravis template provides a moban job, and the latest\nmoban handles branches.\nRelated to #4708\nRelated to #6053\nImplements https://gitlab.com/coala/mobans/merge_requests/135 , which needs to be approved first.","comments":0,"createdAt":"2019-08-04T16:04:51Z","updatedAt":"2019-08-07T07:43:02Z","closedAt":"2019-08-07T07:35:27Z","state":"merged","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[],"pullRequest":{"htmlUrl":"https://github.com/coala/coala/pull/6054","comments":[{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMDM5MzU4NQ==","url":"https://github.com/coala/coala/pull/6054#discussion_r310393585","bodyText":"Note that if we find a better solution for #6053 on trusty, the old Python 3.4.2 minimum dep will be restored, or maybe before then the need for py34 has evaporated.","diffHunk":"@@ -0,0 +1,151 @@\n+{% extends 'ci/travis.yml.jj2' %}\n+\n+{% block custom_python_versions %}\n+python:\n+{% if travis_dist not in ['precise', 'trusty'] %}","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2019-08-04T16:08:28Z","lastEditedAt":null,"updatedAt":"2019-08-04T16:08:28Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMDUyMTcxMA==","url":"https://github.com/coala/coala/pull/6054#discussion_r310521710","bodyText":"Template moved to https://gitlab.com/coala/mobans/merge_requests/135 , as coala-quickstart and others need the same fixes","diffHunk":"@@ -0,0 +1,151 @@\n+{% extends 'ci/travis.yml.jj2' %}\n+\n+{% block custom_python_versions %}\n+python:\n+{% if travis_dist not in ['precise', 'trusty'] %}","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2019-08-05T09:45:58Z","lastEditedAt":null,"updatedAt":"2019-08-05T09:45:58Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMTAzOTI3OQ==","url":"https://github.com/coala/coala/pull/6054#discussion_r311039279","bodyText":"is this required? As you have moved this file","diffHunk":"@@ -134,6 +134,8 @@ ignore = node_modules/\n [jinja2]\n bears = Jinja2Bear\n files = **.jj2\n+check_end_labels = False\n+ignore = .moban.dt/core-travis.yml.jj2","author":{"login":"KVGarg","avatarUrl":"https://avatars2.githubusercontent.com/u/35761292?v=4","name":"Keshav Garg"},"reactions":[],"createdAt":"2019-08-06T12:41:27Z","lastEditedAt":null,"updatedAt":"2019-08-06T12:41:27Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMTExODg2MA==","url":"https://github.com/coala/coala/pull/6054#discussion_r311118860","bodyText":"Good catch.  That should be removed.","diffHunk":"@@ -134,6 +134,8 @@ ignore = node_modules/\n [jinja2]\n bears = Jinja2Bear\n files = **.jj2\n+check_end_labels = False\n+ignore = .moban.dt/core-travis.yml.jj2","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[{"id":"MDg6UmVhY3Rpb240ODE5MjY0Mw==","createdAt":"2019-08-06T15:15:19Z","content":"THUMBS_UP","user":{"login":"KVGarg","name":"Keshav Garg"}}],"createdAt":"2019-08-06T15:10:39Z","lastEditedAt":null,"updatedAt":"2019-08-06T15:10:39Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMTQwOTM5Mw==","url":"https://github.com/coala/coala/pull/6054#discussion_r311409393","bodyText":"Just a thought, In test-requirements.txt we're installing another version of moban for python version > 3.0 and here we're installing a different version. Shouldn't they be same?","diffHunk":"@@ -14,19 +16,27 @@ stages:\n     if: branch = master AND type = push\n \n .disable_global: &disable_global\n+  addons: false\n+  cache: false\n+  env: {}\n+  python: false\n   before_install: false\n-  install: true\n+  install: false\n   before_script: false\n+  script: false\n   after_success: false\n   after_failure: false\n+  before_deploy: false\n+  deploy: false\n \n-.check_moban: &check_moban\n+.moban: &moban\n   <<: *disable_global\n   python: 3.6\n   stage: moban\n-  install: pip install moban\n-  script: .misc/check_moban.sh\n-  if: branch != master OR type = pull_request\n+  install: pip install moban>=0.0.4","author":{"login":"KVGarg","avatarUrl":"https://avatars2.githubusercontent.com/u/35761292?v=4","name":"Keshav Garg"},"reactions":[],"createdAt":"2019-08-07T07:41:13Z","lastEditedAt":null,"updatedAt":"2019-08-07T07:41:13Z"}]}}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1564989782000,"issue":{"htmlUrl":"https://github.com/coala/coala/pull/6055","number":6055,"title":"Update test-requirements.txt","body":"For short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":0,"createdAt":"2019-08-05T07:23:02Z","updatedAt":"2019-08-05T07:23:02Z","closedAt":null,"state":"open","user":{"login":"S963ourab","avatarUrl":"https://avatars2.githubusercontent.com/u/26776444?v=4"},"owner":{"login":"S963ourab","avatarUrl":"https://avatars2.githubusercontent.com/u/26776444?v=4"},"labels":[],"pullRequest":{"htmlUrl":"https://github.com/coala/coala/pull/6055","comments":[]}}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1565801347000,"issue":{"htmlUrl":"https://github.com/coala/coala/pull/6057","number":6057,"title":"Support for bears to suggest multiple patches","body":"This PR is on top of #6029.\nAdded a new attribute in Result class, alternate_diffs. It is a list of dictionaries. For each alternate patch, a corresponding diff should be created and added to alternate_diffs.\nThen in ConsoleInteraction module get_alternate_patch_actions function adds mulitple instances of AlternatePatchAction to the list of action.\nAlternatePatchAction when applied updates the result.diffs and applies ShowPatchAction.","comments":0,"createdAt":"2019-08-12T03:24:13Z","updatedAt":"2019-08-14T16:49:07Z","closedAt":null,"state":"open","user":{"login":"akshatkarani","avatarUrl":"https://avatars3.githubusercontent.com/u/29230845?v=4"},"owner":{"login":"akshatkarani","avatarUrl":"https://avatars3.githubusercontent.com/u/29230845?v=4"},"labels":[],"pullRequest":{"htmlUrl":"https://github.com/coala/coala/pull/6057","comments":[]}}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1567489211000,"issue":{"htmlUrl":"https://github.com/coala/coala/pull/6058","number":6058,"title":"Linter.py: added memory location in Linter meta class __repr__","body":"was having trouble running coala locally, making a PR to test out.\ncloses #6051","comments":1,"createdAt":"2019-08-18T07:08:03Z","updatedAt":"2019-09-03T05:40:11Z","closedAt":null,"state":"open","user":{"login":"avirlrma","avatarUrl":"https://avatars1.githubusercontent.com/u/22575238?v=4"},"owner":{"login":"avirlrma","avatarUrl":"https://avatars1.githubusercontent.com/u/22575238?v=4"},"labels":[],"pullRequest":{"htmlUrl":"https://github.com/coala/coala/pull/6058","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDUyNzMxMjA0Mw==","url":"https://github.com/coala/coala/pull/6058#issuecomment-527312043","bodyText":"@jayvdb Hey, I am having trouble fixing the broken test case. Can you please help me?","diffHunk":null,"author":{"login":"avirlrma","avatarUrl":"https://avatars1.githubusercontent.com/u/22575238?v=4","name":"Aviral Verma"},"createdAt":"2019-09-03T05:40:11Z","lastEditedAt":null,"updatedAt":"2019-09-03T05:40:11Z"}]}}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1566123448000,"issue":{"htmlUrl":"https://github.com/coala/coala/pull/6059","number":6059,"title":"fix Dive into Python 3 Website is down #926","body":"For short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":0,"createdAt":"2019-08-18T10:16:28Z","updatedAt":"2019-08-18T10:17:28Z","closedAt":null,"state":"open","user":{"login":"xiaoguizi87","avatarUrl":"https://avatars0.githubusercontent.com/u/529239?v=4"},"owner":{"login":"xiaoguizi87","avatarUrl":"https://avatars0.githubusercontent.com/u/529239?v=4"},"labels":[],"pullRequest":{"htmlUrl":"https://github.com/coala/coala/pull/6059","comments":[]}}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1566216511000,"issue":{"htmlUrl":"https://github.com/coala/coala/pull/6026","number":6026,"title":"Add `require_files` settings","body":"This adds couple of new settings to coala,\nrequire_files_not_empty and require_files_for_each_glob\nto require the existence of the files.\nRelated to coala/coala-bears#527\n\nFor short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":0,"createdAt":"2019-06-18T03:21:50Z","updatedAt":"2019-08-19T12:08:31Z","closedAt":null,"state":"open","user":{"login":"bkhanale","avatarUrl":"https://avatars1.githubusercontent.com/u/23272598?v=4"},"owner":{"login":"bkhanale","avatarUrl":"https://avatars1.githubusercontent.com/u/23272598?v=4"},"labels":[],"pullRequest":{"htmlUrl":"https://github.com/coala/coala/pull/6026","comments":[]}}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1565168505000,"issue":{"htmlUrl":"https://github.com/coala/coala/pull/6027","number":6027,"title":" TomlConfParser.py: Support Toml","body":"For short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":4,"createdAt":"2019-06-18T06:50:43Z","updatedAt":"2019-08-07T09:01:45Z","closedAt":null,"state":"open","user":{"login":"PrajwalM2212","avatarUrl":"https://avatars3.githubusercontent.com/u/30733262?v=4"},"owner":{"login":"PrajwalM2212","avatarUrl":"https://avatars3.githubusercontent.com/u/30733262?v=4"},"labels":[],"pullRequest":{"htmlUrl":"https://github.com/coala/coala/pull/6027","comments":[{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDYzMjUyNw==","url":"https://github.com/coala/coala/pull/6027#discussion_r300632527","bodyText":"run what? please change the help","diffHunk":"@@ -136,6 +136,10 @@ def default_arg_parser(formatter_class=None):\n         help='find {} in ancestors of the working directory'.format(\n             Constants.local_coafile))\n \n+    config_group.add_argument('-T', '--use-toml', action='store_const',\n+                              const=True, help='run by using toml config'\n+                                               'files')","author":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4","name":"Vaibhav Rai"},"reactions":[],"createdAt":"2019-07-05T10:36:40Z","lastEditedAt":null,"updatedAt":"2019-07-05T10:36:40Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDYzNDg0NQ==","url":"https://github.com/coala/coala/pull/6027#discussion_r300634845","bodyText":"in your coafile.toml the section name id Default, so even if the deafult section is there it will create a section name default","diffHunk":"@@ -0,0 +1,255 @@\n+import logging\n+\n+import os\n+\n+import tomlkit.container\n+import tomlkit.items\n+from coalib.misc import Constants\n+from tomlkit.items import Table, Item\n+\n+from coalib.results.SourcePosition import SourcePosition\n+from coalib.settings.Section import Section\n+from coalib.settings.Setting import Setting\n+from collections import Iterable, OrderedDict\n+\n+\n+class TomlSetting(Setting):\n+    def __init__(self, key,\n+                 value,\n+                 original_value,\n+                 origin: (str, SourcePosition) = '',\n+                 strip_whitespaces: bool = True,\n+                 list_delimiters: Iterable = (',', ';'),\n+                 from_cli: bool = False,\n+                 remove_empty_iter_elements: bool = True,\n+                 to_append: bool = False,\n+                 ):\n+        self.original_value = original_value\n+        super(TomlSetting, self).__init__(\n+            key,\n+            value,\n+            origin,\n+            strip_whitespaces,\n+            list_delimiters,\n+            from_cli,\n+            remove_empty_iter_elements,\n+            to_append)\n+\n+\n+class TomlConfParser:\n+\n+    def __init__(self, remove_empty_iter_elements=True):\n+\n+        self.sections = None\n+        self.data = None\n+        self.__rand_helper = None\n+        self.__init_sections()\n+        self.__remove_empty_iter_elements = remove_empty_iter_elements\n+\n+    def parse(self, input_data, overwrite=False):\n+        \"\"\"\n+        Parses the input and adds the new data to the existing.\n+\n+        :param input_data: The filename to parse from.\n+        :param overwrite:  If True, wipes all existing Settings inside this\n+                           instance and adds only the newly parsed ones. If\n+                           False, adds the newly parsed data to the existing\n+                           one (and overwrites already existing keys with the\n+                           newly parsed values).\n+        :return:           A dictionary with (lowercase) section names as keys\n+                           and their Setting objects as values.\n+        \"\"\"\n+\n+        if os.path.isdir(input_data):\n+            input_data = os.path.join(input_data, Constants.local_coafile_toml)\n+\n+        if overwrite:\n+            self.__init_sections()\n+\n+        with open(input_data, 'r') as file:\n+            self.data = tomlkit.parse(file.read())\n+\n+        self.data = self.data.body\n+\n+        for item in self.data:\n+            self.generate_section(item, input_data)\n+        return self.sections\n+\n+    def get_section(self, name, create_if_not_exists=False):\n+        \"\"\"\n+        Returns or creates a section with given name\n+\n+        :param name: The name of the section\n+        :param create_if_not_exists: create a section if it does not exist\n+        :return: Section of given name\n+        \"\"\"\n+        key = self.__refine_key(name)\n+        sec = self.sections.get(key, None)\n+        if sec is not None:\n+            return sec\n+\n+        if not create_if_not_exists:\n+            raise IndexError\n+\n+        retval = self.sections[key] = Section(str(name))\n+        return retval\n+\n+    @staticmethod\n+    def __refine_key(key):\n+        return str(key).lower().strip()\n+\n+    def generate_section(self, item, origin):\n+        \"\"\"\n+        Generates section\n+\n+        :param item: Configuration group\n+        :param origin: The file from which the configuration originated\n+        \"\"\"\n+\n+        section_name = item[0]\n+        section_content = item[1]\n+        appends = []\n+\n+        # Handle Default section\n+        if not isinstance(section_content, Table):\n+            original_value = section_content\n+            current_section = self.get_section('default', True)","author":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4","name":"Vaibhav Rai"},"reactions":[],"createdAt":"2019-07-05T10:45:45Z","lastEditedAt":null,"updatedAt":"2019-07-05T10:45:45Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDYzNTM0MQ==","url":"https://github.com/coala/coala/pull/6027#discussion_r300635341","bodyText":"comment on what is this condition","diffHunk":"@@ -0,0 +1,255 @@\n+import logging\n+\n+import os\n+\n+import tomlkit.container\n+import tomlkit.items\n+from coalib.misc import Constants\n+from tomlkit.items import Table, Item\n+\n+from coalib.results.SourcePosition import SourcePosition\n+from coalib.settings.Section import Section\n+from coalib.settings.Setting import Setting\n+from collections import Iterable, OrderedDict\n+\n+\n+class TomlSetting(Setting):\n+    def __init__(self, key,\n+                 value,\n+                 original_value,\n+                 origin: (str, SourcePosition) = '',\n+                 strip_whitespaces: bool = True,\n+                 list_delimiters: Iterable = (',', ';'),\n+                 from_cli: bool = False,\n+                 remove_empty_iter_elements: bool = True,\n+                 to_append: bool = False,\n+                 ):\n+        self.original_value = original_value\n+        super(TomlSetting, self).__init__(\n+            key,\n+            value,\n+            origin,\n+            strip_whitespaces,\n+            list_delimiters,\n+            from_cli,\n+            remove_empty_iter_elements,\n+            to_append)\n+\n+\n+class TomlConfParser:\n+\n+    def __init__(self, remove_empty_iter_elements=True):\n+\n+        self.sections = None\n+        self.data = None\n+        self.__rand_helper = None\n+        self.__init_sections()\n+        self.__remove_empty_iter_elements = remove_empty_iter_elements\n+\n+    def parse(self, input_data, overwrite=False):\n+        \"\"\"\n+        Parses the input and adds the new data to the existing.\n+\n+        :param input_data: The filename to parse from.\n+        :param overwrite:  If True, wipes all existing Settings inside this\n+                           instance and adds only the newly parsed ones. If\n+                           False, adds the newly parsed data to the existing\n+                           one (and overwrites already existing keys with the\n+                           newly parsed values).\n+        :return:           A dictionary with (lowercase) section names as keys\n+                           and their Setting objects as values.\n+        \"\"\"\n+\n+        if os.path.isdir(input_data):\n+            input_data = os.path.join(input_data, Constants.local_coafile_toml)\n+\n+        if overwrite:\n+            self.__init_sections()\n+\n+        with open(input_data, 'r') as file:\n+            self.data = tomlkit.parse(file.read())\n+\n+        self.data = self.data.body\n+\n+        for item in self.data:\n+            self.generate_section(item, input_data)\n+        return self.sections\n+\n+    def get_section(self, name, create_if_not_exists=False):\n+        \"\"\"\n+        Returns or creates a section with given name\n+\n+        :param name: The name of the section\n+        :param create_if_not_exists: create a section if it does not exist\n+        :return: Section of given name\n+        \"\"\"\n+        key = self.__refine_key(name)\n+        sec = self.sections.get(key, None)\n+        if sec is not None:\n+            return sec\n+\n+        if not create_if_not_exists:\n+            raise IndexError\n+\n+        retval = self.sections[key] = Section(str(name))\n+        return retval\n+\n+    @staticmethod\n+    def __refine_key(key):\n+        return str(key).lower().strip()\n+\n+    def generate_section(self, item, origin):\n+        \"\"\"\n+        Generates section\n+\n+        :param item: Configuration group\n+        :param origin: The file from which the configuration originated\n+        \"\"\"\n+\n+        section_name = item[0]\n+        section_content = item[1]\n+        appends = []\n+\n+        # Handle Default section\n+        if not isinstance(section_content, Table):\n+            original_value = section_content\n+            current_section = self.get_section('default', True)\n+            logging.warning('A setting does not have a section.'\n+                            'This is a deprecated feature please '\n+                            'put this setting in a section defined'\n+                            ' with `[<your-section-name]` in a '\n+                            'configuration file.')\n+\n+            if section_name is None:","author":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4","name":"Vaibhav Rai"},"reactions":[],"createdAt":"2019-07-05T10:47:26Z","lastEditedAt":null,"updatedAt":"2019-07-05T10:47:26Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDYzNjEwMw==","url":"https://github.com/coala/coala/pull/6027#discussion_r300636103","bodyText":"Comment what exactly it is doing like if you put just like generates section then how will you different it get_section","diffHunk":"@@ -0,0 +1,255 @@\n+import logging\n+\n+import os\n+\n+import tomlkit.container\n+import tomlkit.items\n+from coalib.misc import Constants\n+from tomlkit.items import Table, Item\n+\n+from coalib.results.SourcePosition import SourcePosition\n+from coalib.settings.Section import Section\n+from coalib.settings.Setting import Setting\n+from collections import Iterable, OrderedDict\n+\n+\n+class TomlSetting(Setting):\n+    def __init__(self, key,\n+                 value,\n+                 original_value,\n+                 origin: (str, SourcePosition) = '',\n+                 strip_whitespaces: bool = True,\n+                 list_delimiters: Iterable = (',', ';'),\n+                 from_cli: bool = False,\n+                 remove_empty_iter_elements: bool = True,\n+                 to_append: bool = False,\n+                 ):\n+        self.original_value = original_value\n+        super(TomlSetting, self).__init__(\n+            key,\n+            value,\n+            origin,\n+            strip_whitespaces,\n+            list_delimiters,\n+            from_cli,\n+            remove_empty_iter_elements,\n+            to_append)\n+\n+\n+class TomlConfParser:\n+\n+    def __init__(self, remove_empty_iter_elements=True):\n+\n+        self.sections = None\n+        self.data = None\n+        self.__rand_helper = None\n+        self.__init_sections()\n+        self.__remove_empty_iter_elements = remove_empty_iter_elements\n+\n+    def parse(self, input_data, overwrite=False):\n+        \"\"\"\n+        Parses the input and adds the new data to the existing.\n+\n+        :param input_data: The filename to parse from.\n+        :param overwrite:  If True, wipes all existing Settings inside this\n+                           instance and adds only the newly parsed ones. If\n+                           False, adds the newly parsed data to the existing\n+                           one (and overwrites already existing keys with the\n+                           newly parsed values).\n+        :return:           A dictionary with (lowercase) section names as keys\n+                           and their Setting objects as values.\n+        \"\"\"\n+\n+        if os.path.isdir(input_data):\n+            input_data = os.path.join(input_data, Constants.local_coafile_toml)\n+\n+        if overwrite:\n+            self.__init_sections()\n+\n+        with open(input_data, 'r') as file:\n+            self.data = tomlkit.parse(file.read())\n+\n+        self.data = self.data.body\n+\n+        for item in self.data:\n+            self.generate_section(item, input_data)\n+        return self.sections\n+\n+    def get_section(self, name, create_if_not_exists=False):\n+        \"\"\"\n+        Returns or creates a section with given name\n+\n+        :param name: The name of the section\n+        :param create_if_not_exists: create a section if it does not exist\n+        :return: Section of given name\n+        \"\"\"\n+        key = self.__refine_key(name)\n+        sec = self.sections.get(key, None)\n+        if sec is not None:\n+            return sec\n+\n+        if not create_if_not_exists:\n+            raise IndexError\n+\n+        retval = self.sections[key] = Section(str(name))\n+        return retval\n+\n+    @staticmethod\n+    def __refine_key(key):\n+        return str(key).lower().strip()\n+\n+    def generate_section(self, item, origin):\n+        \"\"\"\n+        Generates section","author":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4","name":"Vaibhav Rai"},"reactions":[],"createdAt":"2019-07-05T10:50:10Z","lastEditedAt":null,"updatedAt":"2019-07-05T10:50:10Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDYzNjY1OQ==","url":"https://github.com/coala/coala/pull/6027#discussion_r300636659","bodyText":"Just remember these all name should be converted to lowercase when even if it is capitalise in the toml file.","diffHunk":"@@ -0,0 +1,255 @@\n+import logging\n+\n+import os\n+\n+import tomlkit.container\n+import tomlkit.items\n+from coalib.misc import Constants\n+from tomlkit.items import Table, Item\n+\n+from coalib.results.SourcePosition import SourcePosition\n+from coalib.settings.Section import Section\n+from coalib.settings.Setting import Setting\n+from collections import Iterable, OrderedDict\n+\n+\n+class TomlSetting(Setting):\n+    def __init__(self, key,\n+                 value,\n+                 original_value,\n+                 origin: (str, SourcePosition) = '',\n+                 strip_whitespaces: bool = True,\n+                 list_delimiters: Iterable = (',', ';'),\n+                 from_cli: bool = False,\n+                 remove_empty_iter_elements: bool = True,\n+                 to_append: bool = False,\n+                 ):\n+        self.original_value = original_value\n+        super(TomlSetting, self).__init__(\n+            key,\n+            value,\n+            origin,\n+            strip_whitespaces,\n+            list_delimiters,\n+            from_cli,\n+            remove_empty_iter_elements,\n+            to_append)\n+\n+\n+class TomlConfParser:\n+\n+    def __init__(self, remove_empty_iter_elements=True):\n+\n+        self.sections = None\n+        self.data = None\n+        self.__rand_helper = None\n+        self.__init_sections()\n+        self.__remove_empty_iter_elements = remove_empty_iter_elements\n+\n+    def parse(self, input_data, overwrite=False):\n+        \"\"\"\n+        Parses the input and adds the new data to the existing.\n+\n+        :param input_data: The filename to parse from.\n+        :param overwrite:  If True, wipes all existing Settings inside this\n+                           instance and adds only the newly parsed ones. If\n+                           False, adds the newly parsed data to the existing\n+                           one (and overwrites already existing keys with the\n+                           newly parsed values).\n+        :return:           A dictionary with (lowercase) section names as keys\n+                           and their Setting objects as values.\n+        \"\"\"\n+\n+        if os.path.isdir(input_data):\n+            input_data = os.path.join(input_data, Constants.local_coafile_toml)\n+\n+        if overwrite:\n+            self.__init_sections()\n+\n+        with open(input_data, 'r') as file:\n+            self.data = tomlkit.parse(file.read())\n+\n+        self.data = self.data.body\n+\n+        for item in self.data:\n+            self.generate_section(item, input_data)\n+        return self.sections\n+\n+    def get_section(self, name, create_if_not_exists=False):\n+        \"\"\"\n+        Returns or creates a section with given name\n+\n+        :param name: The name of the section\n+        :param create_if_not_exists: create a section if it does not exist\n+        :return: Section of given name\n+        \"\"\"\n+        key = self.__refine_key(name)\n+        sec = self.sections.get(key, None)\n+        if sec is not None:\n+            return sec\n+\n+        if not create_if_not_exists:\n+            raise IndexError\n+\n+        retval = self.sections[key] = Section(str(name))\n+        return retval\n+\n+    @staticmethod\n+    def __refine_key(key):\n+        return str(key).lower().strip()\n+\n+    def generate_section(self, item, origin):\n+        \"\"\"\n+        Generates section\n+\n+        :param item: Configuration group\n+        :param origin: The file from which the configuration originated\n+        \"\"\"\n+\n+        section_name = item[0]\n+        section_content = item[1]\n+        appends = []\n+\n+        # Handle Default section\n+        if not isinstance(section_content, Table):\n+            original_value = section_content\n+            current_section = self.get_section('default', True)\n+            logging.warning('A setting does not have a section.'\n+                            'This is a deprecated feature please '\n+                            'put this setting in a section defined'\n+                            ' with `[<your-section-name]` in a '\n+                            'configuration file.')\n+\n+            if section_name is None:\n+                section_content = section_content.as_string()\n+                section_name = '(' + 'comment' + str(self.__rand_helper) + ')'\n+                self.__rand_helper += 1\n+            self.create_setting(current_section,\n+                                section_name,\n+                                section_content,\n+                                original_value,\n+                                origin,\n+                                False\n+                                )\n+            return\n+\n+        # Get the keys to be appended\n+        if 'appends' in section_content.keys():","author":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4","name":"Vaibhav Rai"},"reactions":[],"createdAt":"2019-07-05T10:52:24Z","lastEditedAt":null,"updatedAt":"2019-07-05T10:52:24Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDYzNzI2Ng==","url":"https://github.com/coala/coala/pull/6027#discussion_r300637266","bodyText":"What is TomlConfParser comment please","diffHunk":"@@ -0,0 +1,255 @@\n+import logging\n+\n+import os\n+\n+import tomlkit.container\n+import tomlkit.items\n+from coalib.misc import Constants\n+from tomlkit.items import Table, Item\n+\n+from coalib.results.SourcePosition import SourcePosition\n+from coalib.settings.Section import Section\n+from coalib.settings.Setting import Setting\n+from collections import Iterable, OrderedDict\n+\n+\n+class TomlSetting(Setting):\n+    def __init__(self, key,\n+                 value,\n+                 original_value,\n+                 origin: (str, SourcePosition) = '',\n+                 strip_whitespaces: bool = True,\n+                 list_delimiters: Iterable = (',', ';'),\n+                 from_cli: bool = False,\n+                 remove_empty_iter_elements: bool = True,\n+                 to_append: bool = False,\n+                 ):\n+        self.original_value = original_value\n+        super(TomlSetting, self).__init__(\n+            key,\n+            value,\n+            origin,\n+            strip_whitespaces,\n+            list_delimiters,\n+            from_cli,\n+            remove_empty_iter_elements,\n+            to_append)\n+\n+\n+class TomlConfParser:","author":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4","name":"Vaibhav Rai"},"reactions":[],"createdAt":"2019-07-05T10:54:35Z","lastEditedAt":null,"updatedAt":"2019-07-05T10:54:35Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDc2ODM1OA==","url":"https://github.com/coala/coala/pull/6027#discussion_r300768358","bodyText":"This is for settings at top of the file without any sections. These settings which do not belong to any sections will be added to the default section.","diffHunk":"@@ -0,0 +1,255 @@\n+import logging\n+\n+import os\n+\n+import tomlkit.container\n+import tomlkit.items\n+from coalib.misc import Constants\n+from tomlkit.items import Table, Item\n+\n+from coalib.results.SourcePosition import SourcePosition\n+from coalib.settings.Section import Section\n+from coalib.settings.Setting import Setting\n+from collections import Iterable, OrderedDict\n+\n+\n+class TomlSetting(Setting):\n+    def __init__(self, key,\n+                 value,\n+                 original_value,\n+                 origin: (str, SourcePosition) = '',\n+                 strip_whitespaces: bool = True,\n+                 list_delimiters: Iterable = (',', ';'),\n+                 from_cli: bool = False,\n+                 remove_empty_iter_elements: bool = True,\n+                 to_append: bool = False,\n+                 ):\n+        self.original_value = original_value\n+        super(TomlSetting, self).__init__(\n+            key,\n+            value,\n+            origin,\n+            strip_whitespaces,\n+            list_delimiters,\n+            from_cli,\n+            remove_empty_iter_elements,\n+            to_append)\n+\n+\n+class TomlConfParser:\n+\n+    def __init__(self, remove_empty_iter_elements=True):\n+\n+        self.sections = None\n+        self.data = None\n+        self.__rand_helper = None\n+        self.__init_sections()\n+        self.__remove_empty_iter_elements = remove_empty_iter_elements\n+\n+    def parse(self, input_data, overwrite=False):\n+        \"\"\"\n+        Parses the input and adds the new data to the existing.\n+\n+        :param input_data: The filename to parse from.\n+        :param overwrite:  If True, wipes all existing Settings inside this\n+                           instance and adds only the newly parsed ones. If\n+                           False, adds the newly parsed data to the existing\n+                           one (and overwrites already existing keys with the\n+                           newly parsed values).\n+        :return:           A dictionary with (lowercase) section names as keys\n+                           and their Setting objects as values.\n+        \"\"\"\n+\n+        if os.path.isdir(input_data):\n+            input_data = os.path.join(input_data, Constants.local_coafile_toml)\n+\n+        if overwrite:\n+            self.__init_sections()\n+\n+        with open(input_data, 'r') as file:\n+            self.data = tomlkit.parse(file.read())\n+\n+        self.data = self.data.body\n+\n+        for item in self.data:\n+            self.generate_section(item, input_data)\n+        return self.sections\n+\n+    def get_section(self, name, create_if_not_exists=False):\n+        \"\"\"\n+        Returns or creates a section with given name\n+\n+        :param name: The name of the section\n+        :param create_if_not_exists: create a section if it does not exist\n+        :return: Section of given name\n+        \"\"\"\n+        key = self.__refine_key(name)\n+        sec = self.sections.get(key, None)\n+        if sec is not None:\n+            return sec\n+\n+        if not create_if_not_exists:\n+            raise IndexError\n+\n+        retval = self.sections[key] = Section(str(name))\n+        return retval\n+\n+    @staticmethod\n+    def __refine_key(key):\n+        return str(key).lower().strip()\n+\n+    def generate_section(self, item, origin):\n+        \"\"\"\n+        Generates section\n+\n+        :param item: Configuration group\n+        :param origin: The file from which the configuration originated\n+        \"\"\"\n+\n+        section_name = item[0]\n+        section_content = item[1]\n+        appends = []\n+\n+        # Handle Default section\n+        if not isinstance(section_content, Table):\n+            original_value = section_content\n+            current_section = self.get_section('default', True)","author":{"login":"PrajwalM2212","avatarUrl":"https://avatars3.githubusercontent.com/u/30733262?v=4","name":"PRAJWAL M"},"reactions":[{"id":"MDg6UmVhY3Rpb240NjA4NDExNQ==","createdAt":"2019-07-07T11:48:54Z","content":"THUMBS_UP","user":{"login":"RaiVaibhav","name":"Vaibhav Rai"}}],"createdAt":"2019-07-05T18:31:35Z","lastEditedAt":null,"updatedAt":"2019-07-05T18:31:35Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDgyMzQ4OA==","url":"https://github.com/coala/coala/pull/6027#discussion_r300823488","bodyText":"__prepare_key in Section.py seems to be handling it for us.","diffHunk":"@@ -0,0 +1,255 @@\n+import logging\n+\n+import os\n+\n+import tomlkit.container\n+import tomlkit.items\n+from coalib.misc import Constants\n+from tomlkit.items import Table, Item\n+\n+from coalib.results.SourcePosition import SourcePosition\n+from coalib.settings.Section import Section\n+from coalib.settings.Setting import Setting\n+from collections import Iterable, OrderedDict\n+\n+\n+class TomlSetting(Setting):\n+    def __init__(self, key,\n+                 value,\n+                 original_value,\n+                 origin: (str, SourcePosition) = '',\n+                 strip_whitespaces: bool = True,\n+                 list_delimiters: Iterable = (',', ';'),\n+                 from_cli: bool = False,\n+                 remove_empty_iter_elements: bool = True,\n+                 to_append: bool = False,\n+                 ):\n+        self.original_value = original_value\n+        super(TomlSetting, self).__init__(\n+            key,\n+            value,\n+            origin,\n+            strip_whitespaces,\n+            list_delimiters,\n+            from_cli,\n+            remove_empty_iter_elements,\n+            to_append)\n+\n+\n+class TomlConfParser:\n+\n+    def __init__(self, remove_empty_iter_elements=True):\n+\n+        self.sections = None\n+        self.data = None\n+        self.__rand_helper = None\n+        self.__init_sections()\n+        self.__remove_empty_iter_elements = remove_empty_iter_elements\n+\n+    def parse(self, input_data, overwrite=False):\n+        \"\"\"\n+        Parses the input and adds the new data to the existing.\n+\n+        :param input_data: The filename to parse from.\n+        :param overwrite:  If True, wipes all existing Settings inside this\n+                           instance and adds only the newly parsed ones. If\n+                           False, adds the newly parsed data to the existing\n+                           one (and overwrites already existing keys with the\n+                           newly parsed values).\n+        :return:           A dictionary with (lowercase) section names as keys\n+                           and their Setting objects as values.\n+        \"\"\"\n+\n+        if os.path.isdir(input_data):\n+            input_data = os.path.join(input_data, Constants.local_coafile_toml)\n+\n+        if overwrite:\n+            self.__init_sections()\n+\n+        with open(input_data, 'r') as file:\n+            self.data = tomlkit.parse(file.read())\n+\n+        self.data = self.data.body\n+\n+        for item in self.data:\n+            self.generate_section(item, input_data)\n+        return self.sections\n+\n+    def get_section(self, name, create_if_not_exists=False):\n+        \"\"\"\n+        Returns or creates a section with given name\n+\n+        :param name: The name of the section\n+        :param create_if_not_exists: create a section if it does not exist\n+        :return: Section of given name\n+        \"\"\"\n+        key = self.__refine_key(name)\n+        sec = self.sections.get(key, None)\n+        if sec is not None:\n+            return sec\n+\n+        if not create_if_not_exists:\n+            raise IndexError\n+\n+        retval = self.sections[key] = Section(str(name))\n+        return retval\n+\n+    @staticmethod\n+    def __refine_key(key):\n+        return str(key).lower().strip()\n+\n+    def generate_section(self, item, origin):\n+        \"\"\"\n+        Generates section\n+\n+        :param item: Configuration group\n+        :param origin: The file from which the configuration originated\n+        \"\"\"\n+\n+        section_name = item[0]\n+        section_content = item[1]\n+        appends = []\n+\n+        # Handle Default section\n+        if not isinstance(section_content, Table):\n+            original_value = section_content\n+            current_section = self.get_section('default', True)\n+            logging.warning('A setting does not have a section.'\n+                            'This is a deprecated feature please '\n+                            'put this setting in a section defined'\n+                            ' with `[<your-section-name]` in a '\n+                            'configuration file.')\n+\n+            if section_name is None:\n+                section_content = section_content.as_string()\n+                section_name = '(' + 'comment' + str(self.__rand_helper) + ')'\n+                self.__rand_helper += 1\n+            self.create_setting(current_section,\n+                                section_name,\n+                                section_content,\n+                                original_value,\n+                                origin,\n+                                False\n+                                )\n+            return\n+\n+        # Get the keys to be appended\n+        if 'appends' in section_content.keys():","author":{"login":"PrajwalM2212","avatarUrl":"https://avatars3.githubusercontent.com/u/30733262?v=4","name":"PRAJWAL M"},"reactions":[{"id":"MDg6UmVhY3Rpb240NjA4NDExMQ==","createdAt":"2019-07-07T11:48:38Z","content":"THUMBS_UP","user":{"login":"RaiVaibhav","name":"Vaibhav Rai"}}],"createdAt":"2019-07-06T07:42:04Z","lastEditedAt":null,"updatedAt":"2019-07-06T07:42:04Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDg3MzI0Ng==","url":"https://github.com/coala/coala/pull/6027#discussion_r300873246","bodyText":"No need of else if you are using the return","diffHunk":"@@ -0,0 +1,302 @@\n+import logging\n+\n+import os\n+\n+import tomlkit.container\n+import tomlkit.items\n+from coalib.misc import Constants\n+from tomlkit.items import Table, Item\n+\n+from coalib.results.SourcePosition import SourcePosition\n+from coalib.settings.Section import Section\n+from coalib.settings.Setting import Setting\n+from collections import Iterable, OrderedDict\n+\n+\n+class TomlSetting(Setting):\n+    \"\"\"\n+    A subclass of a setting but has an additional parameter\n+    called the original value. This class is required to\n+    infer comments and original data-type of a settings value.\n+    \"\"\"\n+\n+    def __init__(self, key,\n+                 value,\n+                 original_value,\n+                 origin: (str, SourcePosition) = '',\n+                 strip_whitespaces: bool = True,\n+                 list_delimiters: Iterable = (',', ';'),\n+                 from_cli: bool = False,\n+                 remove_empty_iter_elements: bool = True,\n+                 to_append: bool = False,\n+                 ):\n+        self.original_value = original_value\n+        super(TomlSetting, self).__init__(\n+            key,\n+            value,\n+            origin,\n+            strip_whitespaces,\n+            list_delimiters,\n+            from_cli,\n+            remove_empty_iter_elements,\n+            to_append)\n+\n+\n+class TomlConfParser:\n+    \"\"\"\n+\n+    The parser that generates sections from data in\n+    TOML config files. Each TOML table is converted\n+    into a section and the all the sections are returned\n+    as a ordered dictionary of sections.\n+\n+    \"\"\"\n+\n+    def __init__(self, remove_empty_iter_elements=True):\n+\n+        self.sections = None\n+        self.data = None\n+        self.__rand_helper = None\n+        self.__init_sections()\n+        self.__remove_empty_iter_elements = remove_empty_iter_elements\n+\n+    def parse(self, input_data, overwrite=False):\n+        \"\"\"\n+        Parses the input and adds the new data to the existing.\n+\n+        :param input_data: The filename to parse from.\n+        :param overwrite:  If True, wipes all existing Settings inside this\n+                           instance and adds only the newly parsed ones. If\n+                           False, adds the newly parsed data to the existing\n+                           one (and overwrites already existing keys with the\n+                           newly parsed values).\n+        :return:           A dictionary with (lowercase) section names as keys\n+                           and their Setting objects as values.\n+        \"\"\"\n+\n+        if os.path.isdir(input_data):\n+            input_data = os.path.join(input_data, Constants.local_coafile_toml)\n+\n+        if overwrite:\n+            self.__init_sections()\n+\n+        with open(input_data, 'r') as file:\n+            self.data = tomlkit.parse(file.read())\n+\n+        self.data = self.data.body\n+\n+        for item in self.data:\n+            self.generate_section(item, input_data)\n+        return self.sections\n+\n+    def get_section(self, name, create_if_not_exists=False):\n+        \"\"\"\n+        Returns section with the given name if it exists,\n+        otherwise creates a new section with the given name.\n+\n+        :param name: The name of the section to be returned\n+        :param create_if_not_exists: create the section if it does not exist\n+        :return: section of the given name\n+        \"\"\"\n+        key = self.__refine_key(name)\n+        sec = self.sections.get(key, None)\n+        if sec is not None:\n+            return sec\n+\n+        if not create_if_not_exists:\n+            raise IndexError\n+\n+        retval = self.sections[key] = Section(str(name))\n+        return retval\n+\n+    @staticmethod\n+    def __refine_key(key):\n+        return str(key).lower().strip()\n+\n+    def generate_section(self, item, origin):\n+        \"\"\"\n+        This method is the core of the parser. It converts\n+        TOML tables into sections\n+\n+        :param item: Configuration group\n+        :param origin: The file from which the configuration originated\n+        \"\"\"\n+\n+        section_name = item[0]\n+        section_content = item[1]\n+        appends = []\n+\n+        # Add settings that do not belong to any sections into default section\n+        if not isinstance(section_content, Table):\n+            original_value = section_content\n+            current_section = self.get_section('default', True)\n+            logging.warning('A setting does not have a section.'\n+                            'This is a deprecated feature please '\n+                            'put this setting in a section defined'\n+                            ' with `[<your-section-name]` in a '\n+                            'configuration file.')\n+\n+            # Store full-line comments that appear before any sections\n+            if section_name is None:\n+                section_content = section_content.as_string()\n+                section_name = '(' + 'comment' + str(self.__rand_helper) + ')'\n+                self.__rand_helper += 1\n+\n+            self.create_setting(current_section,\n+                                section_name,\n+                                section_content,\n+                                original_value,\n+                                origin,\n+                                False\n+                                )\n+            return\n+\n+        # Get the keys to be appended\n+        if 'appends' in section_content.keys():\n+            appends = section_content.get('appends')\n+\n+        # If inherits = [ 'a' , 'b'] is in section 'all',\n+        # then generate 'all.a' and 'all.b' sections\n+        if 'inherits' in section_content.keys():\n+\n+            inherits = section_content.get('inherits')\n+\n+            if not isinstance(inherits, list):\n+                inherits = [inherits]\n+\n+            for parent in inherits:\n+                s_appends = appends\n+                s_name = parent + '.' + section_name.as_string()\n+                current_section = self.get_section(s_name, True)\n+                if isinstance(appends, Table):\n+                    s_appends = appends.get(parent, [])\n+                self.fill_table_settings(current_section, section_content,\n+                                         origin, s_appends)\n+        else:\n+\n+            section_name = section_name.as_string()\n+            current_section = self.get_section(section_name, True)\n+            self.fill_table_settings(current_section, section_content,\n+                                     origin, appends)\n+\n+    def fill_table_settings(self, current_section, section_content,\n+                            origin, appends):\n+        \"\"\"\n+        Parses a table into a section. Works on a single table\n+        at a time.\n+\n+        :param current_section: The section under consideration\n+        :param section_content: The TOML table under consideration\n+        :param origin: The file from which the configuration originated\n+        :param appends: The list of the keys to be appended\n+        \"\"\"\n+        for content_key, content_value in section_content.value.body:\n+\n+            original_value = content_value\n+            # Handle full-line comments\n+            if content_key is None:\n+                content_key = '(' + 'comment' + str(self.__rand_helper) + ')'\n+                self.__rand_helper += 1\n+                self.create_setting(current_section, content_key,\n+                                    content_value.as_string(),\n+                                    original_value,\n+                                    origin, False)\n+                continue\n+            else:\n+                content_key = content_key.as_string()\n+                if isinstance(content_value, Table):\n+                    self.handle_nested_table(content_key, content_value,\n+                                             current_section, appends,\n+                                             origin)\n+                    continue\n+\n+                to_append = False\n+\n+                if not isinstance(content_value, str):\n+                    content_value = self.format_value(content_value)\n+\n+                if content_key in appends:\n+                    to_append = True\n+\n+                self.create_setting(current_section, content_key, content_value,\n+                                    original_value, origin, to_append)\n+\n+    def __init_sections(self):\n+        self.sections = OrderedDict()\n+        self.sections['default'] = Section('Default')\n+        self.__rand_helper = 0\n+\n+    def create_setting(self, current_section, key, value, original_value,\n+                       origin, to_append):\n+        \"\"\"\n+        Adds the given setting to the specified section\n+        \"\"\"\n+        current_section.add_or_create_setting(\n+            TomlSetting(key,\n+                        value,\n+                        original_value,\n+                        SourcePosition(\n+                            str(origin)),\n+                        to_append=to_append,\n+                        # Start ignoring PEP8Bear, PycodestyleBear*\n+                        # they fail to resolve this\n+                        remove_empty_iter_elements=\n+                        self.__remove_empty_iter_elements),\n+            # Stop ignoring\n+            allow_appending=(key == []))\n+\n+    def handle_nested_table(self, content_key, content_value,\n+                            current_section, appends, origin):\n+        \"\"\"\n+        Converts a nested table into a section object\n+\n+        :param origin: The file from which the configuration originated\n+        :param appends: The list of the keys to be appended\n+        :param content_key: The name of the nested table\n+        :param content_value: The values of the TOML table under consideration\n+        :param current_section:  The section under consideration\n+        \"\"\"\n+\n+        base_key = content_key\n+        for k, v in content_value.value.body:\n+            original_value = v\n+            if k is None:\n+                com_key = '(' + 'comment' + str(self.__rand_helper) + ')'\n+                self.__rand_helper += 1\n+                self.create_setting(current_section, com_key, v.as_string(),\n+                                    original_value, origin, False)\n+            else:\n+                k = k.as_string()\n+\n+                key = base_key + ':' + k\n+\n+                if isinstance(v, Table):\n+                    self.handle_nested_table(key, v, current_section,\n+                                             appends, origin)\n+                    continue\n+\n+                if not isinstance(v, str):\n+                    v = self.format_value(v)\n+\n+                to_append = False\n+\n+                if base_key + '.' + k in appends:\n+                    to_append = True\n+\n+                self.create_setting(current_section, key, v, original_value,\n+                                    origin, to_append)\n+\n+    @staticmethod\n+    def format_value(value):\n+        \"\"\"\n+        Converts a value of any type to a string\n+        :param value: The original value to be formatted\n+        :return: A value converted into a string\n+        \"\"\"\n+        if isinstance(value, list):\n+            value = [str(i) for i in value]\n+            return ', '.join(value)","author":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4","name":"Vaibhav Rai"},"reactions":[],"createdAt":"2019-07-07T15:38:26Z","lastEditedAt":null,"updatedAt":"2019-07-07T15:38:26Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDg3Mzk2Mg==","url":"https://github.com/coala/coala/pull/6027#discussion_r300873962","bodyText":"Handle every Error with logging.error no rasing please","diffHunk":"@@ -0,0 +1,302 @@\n+import logging\n+\n+import os\n+\n+import tomlkit.container\n+import tomlkit.items\n+from coalib.misc import Constants\n+from tomlkit.items import Table, Item\n+\n+from coalib.results.SourcePosition import SourcePosition\n+from coalib.settings.Section import Section\n+from coalib.settings.Setting import Setting\n+from collections import Iterable, OrderedDict\n+\n+\n+class TomlSetting(Setting):\n+    \"\"\"\n+    A subclass of a setting but has an additional parameter\n+    called the original value. This class is required to\n+    infer comments and original data-type of a settings value.\n+    \"\"\"\n+\n+    def __init__(self, key,\n+                 value,\n+                 original_value,\n+                 origin: (str, SourcePosition) = '',\n+                 strip_whitespaces: bool = True,\n+                 list_delimiters: Iterable = (',', ';'),\n+                 from_cli: bool = False,\n+                 remove_empty_iter_elements: bool = True,\n+                 to_append: bool = False,\n+                 ):\n+        self.original_value = original_value\n+        super(TomlSetting, self).__init__(\n+            key,\n+            value,\n+            origin,\n+            strip_whitespaces,\n+            list_delimiters,\n+            from_cli,\n+            remove_empty_iter_elements,\n+            to_append)\n+\n+\n+class TomlConfParser:\n+    \"\"\"\n+\n+    The parser that generates sections from data in\n+    TOML config files. Each TOML table is converted\n+    into a section and the all the sections are returned\n+    as a ordered dictionary of sections.\n+\n+    \"\"\"\n+\n+    def __init__(self, remove_empty_iter_elements=True):\n+\n+        self.sections = None\n+        self.data = None\n+        self.__rand_helper = None\n+        self.__init_sections()\n+        self.__remove_empty_iter_elements = remove_empty_iter_elements\n+\n+    def parse(self, input_data, overwrite=False):\n+        \"\"\"\n+        Parses the input and adds the new data to the existing.\n+\n+        :param input_data: The filename to parse from.\n+        :param overwrite:  If True, wipes all existing Settings inside this\n+                           instance and adds only the newly parsed ones. If\n+                           False, adds the newly parsed data to the existing\n+                           one (and overwrites already existing keys with the\n+                           newly parsed values).\n+        :return:           A dictionary with (lowercase) section names as keys\n+                           and their Setting objects as values.\n+        \"\"\"\n+\n+        if os.path.isdir(input_data):\n+            input_data = os.path.join(input_data, Constants.local_coafile_toml)\n+\n+        if overwrite:\n+            self.__init_sections()\n+\n+        with open(input_data, 'r') as file:\n+            self.data = tomlkit.parse(file.read())\n+\n+        self.data = self.data.body\n+\n+        for item in self.data:\n+            self.generate_section(item, input_data)\n+        return self.sections\n+\n+    def get_section(self, name, create_if_not_exists=False):\n+        \"\"\"\n+        Returns section with the given name if it exists,\n+        otherwise creates a new section with the given name.\n+\n+        :param name: The name of the section to be returned\n+        :param create_if_not_exists: create the section if it does not exist\n+        :return: section of the given name\n+        \"\"\"\n+        key = self.__refine_key(name)\n+        sec = self.sections.get(key, None)\n+        if sec is not None:\n+            return sec\n+\n+        if not create_if_not_exists:","author":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4","name":"Vaibhav Rai"},"reactions":[],"createdAt":"2019-07-07T15:55:09Z","lastEditedAt":null,"updatedAt":"2019-07-07T15:55:09Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDg3NDA1MA==","url":"https://github.com/coala/coala/pull/6027#discussion_r300874050","bodyText":"create a custom helper function for all these kind of utils. (if you want to )","diffHunk":"@@ -0,0 +1,302 @@\n+import logging\n+\n+import os\n+\n+import tomlkit.container\n+import tomlkit.items\n+from coalib.misc import Constants\n+from tomlkit.items import Table, Item\n+\n+from coalib.results.SourcePosition import SourcePosition\n+from coalib.settings.Section import Section\n+from coalib.settings.Setting import Setting\n+from collections import Iterable, OrderedDict\n+\n+\n+class TomlSetting(Setting):\n+    \"\"\"\n+    A subclass of a setting but has an additional parameter\n+    called the original value. This class is required to\n+    infer comments and original data-type of a settings value.\n+    \"\"\"\n+\n+    def __init__(self, key,\n+                 value,\n+                 original_value,\n+                 origin: (str, SourcePosition) = '',\n+                 strip_whitespaces: bool = True,\n+                 list_delimiters: Iterable = (',', ';'),\n+                 from_cli: bool = False,\n+                 remove_empty_iter_elements: bool = True,\n+                 to_append: bool = False,\n+                 ):\n+        self.original_value = original_value\n+        super(TomlSetting, self).__init__(\n+            key,\n+            value,\n+            origin,\n+            strip_whitespaces,\n+            list_delimiters,\n+            from_cli,\n+            remove_empty_iter_elements,\n+            to_append)\n+\n+\n+class TomlConfParser:\n+    \"\"\"\n+\n+    The parser that generates sections from data in\n+    TOML config files. Each TOML table is converted\n+    into a section and the all the sections are returned\n+    as a ordered dictionary of sections.\n+\n+    \"\"\"\n+\n+    def __init__(self, remove_empty_iter_elements=True):\n+\n+        self.sections = None\n+        self.data = None\n+        self.__rand_helper = None\n+        self.__init_sections()\n+        self.__remove_empty_iter_elements = remove_empty_iter_elements\n+\n+    def parse(self, input_data, overwrite=False):\n+        \"\"\"\n+        Parses the input and adds the new data to the existing.\n+\n+        :param input_data: The filename to parse from.\n+        :param overwrite:  If True, wipes all existing Settings inside this\n+                           instance and adds only the newly parsed ones. If\n+                           False, adds the newly parsed data to the existing\n+                           one (and overwrites already existing keys with the\n+                           newly parsed values).\n+        :return:           A dictionary with (lowercase) section names as keys\n+                           and their Setting objects as values.\n+        \"\"\"\n+\n+        if os.path.isdir(input_data):\n+            input_data = os.path.join(input_data, Constants.local_coafile_toml)\n+\n+        if overwrite:\n+            self.__init_sections()\n+\n+        with open(input_data, 'r') as file:\n+            self.data = tomlkit.parse(file.read())\n+\n+        self.data = self.data.body\n+\n+        for item in self.data:\n+            self.generate_section(item, input_data)\n+        return self.sections\n+\n+    def get_section(self, name, create_if_not_exists=False):\n+        \"\"\"\n+        Returns section with the given name if it exists,\n+        otherwise creates a new section with the given name.\n+\n+        :param name: The name of the section to be returned\n+        :param create_if_not_exists: create the section if it does not exist\n+        :return: section of the given name\n+        \"\"\"\n+        key = self.__refine_key(name)\n+        sec = self.sections.get(key, None)\n+        if sec is not None:\n+            return sec\n+\n+        if not create_if_not_exists:\n+            raise IndexError\n+\n+        retval = self.sections[key] = Section(str(name))\n+        return retval\n+\n+    @staticmethod\n+    def __refine_key(key):\n+        return str(key).lower().strip()\n+\n+    def generate_section(self, item, origin):\n+        \"\"\"\n+        This method is the core of the parser. It converts\n+        TOML tables into sections\n+\n+        :param item: Configuration group\n+        :param origin: The file from which the configuration originated\n+        \"\"\"\n+\n+        section_name = item[0]\n+        section_content = item[1]\n+        appends = []\n+\n+        # Add settings that do not belong to any sections into default section\n+        if not isinstance(section_content, Table):\n+            original_value = section_content\n+            current_section = self.get_section('default', True)\n+            logging.warning('A setting does not have a section.'\n+                            'This is a deprecated feature please '\n+                            'put this setting in a section defined'\n+                            ' with `[<your-section-name]` in a '\n+                            'configuration file.')\n+\n+            # Store full-line comments that appear before any sections\n+            if section_name is None:\n+                section_content = section_content.as_string()\n+                section_name = '(' + 'comment' + str(self.__rand_helper) + ')'","author":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4","name":"Vaibhav Rai"},"reactions":[],"createdAt":"2019-07-07T15:57:31Z","lastEditedAt":null,"updatedAt":"2019-07-07T15:57:31Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDg3NTU2NA==","url":"https://github.com/coala/coala/pull/6027#discussion_r300875564","bodyText":"If you want only section then first assert that section exists then directly acess that section instead of popping of section one by one","diffHunk":"@@ -0,0 +1,316 @@\n+import logging\n+import os\n+import tempfile\n+import unittest\n+from collections import OrderedDict\n+\n+from coalib.parsing.ConfParser import ConfParser\n+from coalib.parsing.TomlConfParser import TomlConfParser\n+from coalib.settings.Section import Section\n+\n+\n+class TomlConfParserTest(unittest.TestCase):\n+    example_file = \"\"\"setting = 'without_section'\n+comment0 = 'Hello'\n+# hello\n+[all]\n+# Hello World\n+max_line_length = 80 #cadc\n+ignore = './vendor'\n+a = true #ccas\n+\n+[EMPTY_ELEM_STRIP]\n+    A = ['a', 'b', 'c']\n+    B = ['a', '  ', '  ', 'd']\n+    C = ['','',\n+    '','']\n+\n+[foo]\n+files = '**'\n+aspects = ['aspectname1', 'AspectName2']\n+aspectname1.aspect_taste = 80\n+aspectname1.subaspect_taste = ['word1', 'word2', 'word3']\n+aspectname1.subaspect_taste1 = 'word5'\n+\n+[foo2]\n+inherits = 'foo'\n+aspects = 'aspectname3'\n+aspectname1.subaspect_taste1 = ['dog', 'cat']\n+appends = 'aspectname1.subaspect_taste1'\n+a.b.c = '10'\n+\n+[sample]\n+    # coala\n+    [sample.item]\n+    # Hello World\n+    b = [ '1', #Hello\n+          '2'\n+        ]\n+\n+    a = 10\n+\n+[a]\n+p = '10'\n+q = '20'\n+\n+[b]\n+c = '5'\n+d  = '6'\n+\n+[c]\n+inherits = [ 'a', 'b' ]\n+p  = 'a'\n+d  = 'b'\n+appends.a = 'p'\n+appends.b = 'd'\n+\"\"\"\n+\n+    def setUp(self):\n+        self.tempdir = tempfile.gettempdir()\n+        self.file = os.path.join(self.tempdir, '.coafile.toml')\n+        self.nonexistentfile = os.path.join(self.tempdir, 'w31efr3rk')\n+        with open(self.file, 'w') as file:\n+            file.write(self.example_file)\n+\n+        self.uut = TomlConfParser()\n+\n+        try:\n+            os.remove(self.nonexistentfile)\n+        except FileNotFoundError:\n+            pass\n+\n+        logger = logging.getLogger()\n+\n+        with self.assertLogs(logger, 'WARNING') as self.cm:\n+            self.sections = self.uut.parse(self.file)\n+\n+    def tearDown(self):\n+        os.remove(self.file)\n+\n+    def test_parse_nonexisting_file(self):\n+        self.assertRaises(FileNotFoundError,\n+                          self.uut.parse,\n+                          self.nonexistentfile)\n+\n+    def test_parse_nonexistent_section(self):\n+        self.assertRaises(IndexError,\n+                          self.uut.get_section,\n+                          'non-existent-section'\n+                          )\n+        self.assertNotEqual(self.uut.parse(self.file, True), self.sections)\n+\n+    def test_format_value(self):\n+        self.assertEqual(self.uut.format_value(80), '80')\n+        self.assertEqual(self.uut.format_value(True), 'True')\n+        self.assertEqual(self.uut.format_value([1, 2, 3]), '1, 2, 3')\n+\n+    def test_parse_default_section_deprecated(self):\n+        default_should = OrderedDict([\n+            ('setting', 'without_section'),\n+            ('comment0', 'Hello'),\n+            ('(comment0)', '# hello')\n+        ])\n+\n+        key, val = self.sections.popitem(last=False)\n+        self.assertTrue(isinstance(val, Section))\n+        self.assertEqual(key, 'default')\n+\n+        is_dict = OrderedDict()\n+        for k in val:\n+            is_dict[k] = str(val[k])\n+        self.assertEqual(is_dict, default_should)\n+\n+        self.assertRegex(self.cm.output[0],\n+                         'A setting does not have a section.')\n+\n+    def test_parse_all(self):\n+        all_should = OrderedDict([\n+            ('(comment1)', '# Hello World'),\n+            ('max_line_length', '80'),\n+            ('ignore', './vendor'),\n+            ('a', 'true'),\n+            ('(comment2)', '')\n+        ])\n+\n+        # pop off default\n+        self.sections.popitem(last=False)\n+\n+        key, val = self.sections.popitem(last=False)","author":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4","name":"Vaibhav Rai"},"reactions":[],"createdAt":"2019-07-07T16:42:17Z","lastEditedAt":null,"updatedAt":"2019-07-07T16:42:17Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDg3NTU4Mw==","url":"https://github.com/coala/coala/pull/6027#discussion_r300875583","bodyText":"Create a util function which do the same instead of repeating code every time","diffHunk":"@@ -0,0 +1,316 @@\n+import logging\n+import os\n+import tempfile\n+import unittest\n+from collections import OrderedDict\n+\n+from coalib.parsing.ConfParser import ConfParser\n+from coalib.parsing.TomlConfParser import TomlConfParser\n+from coalib.settings.Section import Section\n+\n+\n+class TomlConfParserTest(unittest.TestCase):\n+    example_file = \"\"\"setting = 'without_section'\n+comment0 = 'Hello'\n+# hello\n+[all]\n+# Hello World\n+max_line_length = 80 #cadc\n+ignore = './vendor'\n+a = true #ccas\n+\n+[EMPTY_ELEM_STRIP]\n+    A = ['a', 'b', 'c']\n+    B = ['a', '  ', '  ', 'd']\n+    C = ['','',\n+    '','']\n+\n+[foo]\n+files = '**'\n+aspects = ['aspectname1', 'AspectName2']\n+aspectname1.aspect_taste = 80\n+aspectname1.subaspect_taste = ['word1', 'word2', 'word3']\n+aspectname1.subaspect_taste1 = 'word5'\n+\n+[foo2]\n+inherits = 'foo'\n+aspects = 'aspectname3'\n+aspectname1.subaspect_taste1 = ['dog', 'cat']\n+appends = 'aspectname1.subaspect_taste1'\n+a.b.c = '10'\n+\n+[sample]\n+    # coala\n+    [sample.item]\n+    # Hello World\n+    b = [ '1', #Hello\n+          '2'\n+        ]\n+\n+    a = 10\n+\n+[a]\n+p = '10'\n+q = '20'\n+\n+[b]\n+c = '5'\n+d  = '6'\n+\n+[c]\n+inherits = [ 'a', 'b' ]\n+p  = 'a'\n+d  = 'b'\n+appends.a = 'p'\n+appends.b = 'd'\n+\"\"\"\n+\n+    def setUp(self):\n+        self.tempdir = tempfile.gettempdir()\n+        self.file = os.path.join(self.tempdir, '.coafile.toml')\n+        self.nonexistentfile = os.path.join(self.tempdir, 'w31efr3rk')\n+        with open(self.file, 'w') as file:\n+            file.write(self.example_file)\n+\n+        self.uut = TomlConfParser()\n+\n+        try:\n+            os.remove(self.nonexistentfile)\n+        except FileNotFoundError:\n+            pass\n+\n+        logger = logging.getLogger()\n+\n+        with self.assertLogs(logger, 'WARNING') as self.cm:\n+            self.sections = self.uut.parse(self.file)\n+\n+    def tearDown(self):\n+        os.remove(self.file)\n+\n+    def test_parse_nonexisting_file(self):\n+        self.assertRaises(FileNotFoundError,\n+                          self.uut.parse,\n+                          self.nonexistentfile)\n+\n+    def test_parse_nonexistent_section(self):\n+        self.assertRaises(IndexError,\n+                          self.uut.get_section,\n+                          'non-existent-section'\n+                          )\n+        self.assertNotEqual(self.uut.parse(self.file, True), self.sections)\n+\n+    def test_format_value(self):\n+        self.assertEqual(self.uut.format_value(80), '80')\n+        self.assertEqual(self.uut.format_value(True), 'True')\n+        self.assertEqual(self.uut.format_value([1, 2, 3]), '1, 2, 3')\n+\n+    def test_parse_default_section_deprecated(self):\n+        default_should = OrderedDict([\n+            ('setting', 'without_section'),\n+            ('comment0', 'Hello'),\n+            ('(comment0)', '# hello')\n+        ])\n+\n+        key, val = self.sections.popitem(last=False)\n+        self.assertTrue(isinstance(val, Section))\n+        self.assertEqual(key, 'default')\n+\n+        is_dict = OrderedDict()\n+        for k in val:\n+            is_dict[k] = str(val[k])\n+        self.assertEqual(is_dict, default_should)\n+\n+        self.assertRegex(self.cm.output[0],\n+                         'A setting does not have a section.')\n+\n+    def test_parse_all(self):\n+        all_should = OrderedDict([\n+            ('(comment1)', '# Hello World'),\n+            ('max_line_length', '80'),\n+            ('ignore', './vendor'),\n+            ('a', 'true'),\n+            ('(comment2)', '')\n+        ])\n+\n+        # pop off default\n+        self.sections.popitem(last=False)\n+\n+        key, val = self.sections.popitem(last=False)\n+        self.assertTrue(isinstance(val, Section))\n+        self.assertTrue(key, 'all')\n+\n+        is_dict = OrderedDict()\n+\n+        for k in val:\n+            is_dict[k] = str(val[k])\n+        self.assertEqual(is_dict, all_should)\n+\n+    def test_parse_empty_elem_strip_section(self):\n+        empty_elem_strip_should = OrderedDict([\n+            ('a', 'a, b, c'),\n+            ('b', 'a,   ,   , d'),\n+            ('c', ', , ,'),\n+            ('(comment3)', '')\n+        ])\n+\n+        # Pop off default and all section.\n+        self.sections.popitem(last=False)\n+        self.sections.popitem(last=False)\n+\n+        key, val = self.sections.popitem(last=False)\n+        self.assertTrue(isinstance(val, Section))\n+        self.assertEqual(key, 'empty_elem_strip')\n+\n+        is_dict = OrderedDict()","author":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4","name":"Vaibhav Rai"},"reactions":[],"createdAt":"2019-07-07T16:42:53Z","lastEditedAt":null,"updatedAt":"2019-07-07T16:42:53Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDg4NTA2OQ==","url":"https://github.com/coala/coala/pull/6027#discussion_r300885069","bodyText":"why do you need it just for this case?","diffHunk":"@@ -244,10 +245,121 @@ def load_configuration(arg_list,\n                              args=args)\n     check_conflicts(cli_sections)\n \n+    if bool(cli_sections['cli'].get('use_toml', 'False')):\n+        sections, targets = load_toml_config(cli_sections, silent)\n+    else:\n+        sections, targets = load_coafile_config(cli_sections, silent)\n+    for name, section in list(sections.items()):\n+        section.set_default_section(sections)\n+        if name == 'default':\n+            if section.contents:\n+                logging.warning('Implicit \\'Default\\' section inheritance is '\n+                                'deprecated. It will be removed soon. To '\n+                                'silence this warning remove settings in the '\n+                                '\\'Default\\' section from your coafile. You '\n+                                'can use dots to specify inheritance: the '\n+                                'section \\'all.python\\' will inherit all '\n+                                'settings from \\'all\\'.')\n+                sections['default'].update(sections['cli'])\n+                sections['default'].name = 'cli'\n+                sections['cli'] = sections['default']\n+            del sections['default']\n+\n+    str_log_level = str(sections['cli'].get('log_level', '')).upper()\n+    logging.getLogger().setLevel(LOG_LEVEL.str_dict.get(str_log_level,\n+                                                        LOG_LEVEL.INFO))\n+\n+    return sections, targets\n+\n+\n+def load_toml_config_file(filename, log_printer=None, silent=False):\n+    filename = os.path.abspath(filename)\n+    try:\n+        return TomlConfParser().parse(filename)\n+    except FileNotFoundError:\n+        if not silent:\n+            if os.path.basename(filename) == Constants.local_coafile_toml:\n+                logging.warning(COAFILE_OUTPUT\n+                                .substitute(type='Local coafile',\n+                                            file=Constants.local_coafile_toml,\n+                                            found='not found'))\n+            elif os.path.basename(filename) == '.coarc.toml':\n+                logging.warning(COARC_OUTPUT\n+                                .substitute(type='Requested coarc file',\n+                                            file=filename,\n+                                            found='does not exist'))\n+            else:\n+                logging.error(COAFILE_OUTPUT\n+                              .substitute(type='Requested coafile',\n+                                          file=filename,\n+                                          found='does not exist'))\n+                sys.exit(2)","author":{"login":"Nosferatul","avatarUrl":"https://avatars2.githubusercontent.com/u/15227444?v=4","name":"Alexandru-Sorin Maxim"},"reactions":[],"createdAt":"2019-07-07T20:58:45Z","lastEditedAt":null,"updatedAt":"2019-07-07T20:58:45Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDg4NTQ4Mw==","url":"https://github.com/coala/coala/pull/6027#discussion_r300885483","bodyText":"this function is very similar with load_coafile_config, it's not possible to not duplicate it?if one of the function is changed in any way, probably will have to change the other one too. Maybe to use different functions setted by a flag, like flag=1 use toml functions flag=0 use coafile functions, like a variables that have functions depending on the flag. I dont know if it's possible but it is worth checking  out.","diffHunk":"@@ -244,10 +245,121 @@ def load_configuration(arg_list,\n                              args=args)\n     check_conflicts(cli_sections)\n \n+    if bool(cli_sections['cli'].get('use_toml', 'False')):\n+        sections, targets = load_toml_config(cli_sections, silent)\n+    else:\n+        sections, targets = load_coafile_config(cli_sections, silent)\n+    for name, section in list(sections.items()):\n+        section.set_default_section(sections)\n+        if name == 'default':\n+            if section.contents:\n+                logging.warning('Implicit \\'Default\\' section inheritance is '\n+                                'deprecated. It will be removed soon. To '\n+                                'silence this warning remove settings in the '\n+                                '\\'Default\\' section from your coafile. You '\n+                                'can use dots to specify inheritance: the '\n+                                'section \\'all.python\\' will inherit all '\n+                                'settings from \\'all\\'.')\n+                sections['default'].update(sections['cli'])\n+                sections['default'].name = 'cli'\n+                sections['cli'] = sections['default']\n+            del sections['default']\n+\n+    str_log_level = str(sections['cli'].get('log_level', '')).upper()\n+    logging.getLogger().setLevel(LOG_LEVEL.str_dict.get(str_log_level,\n+                                                        LOG_LEVEL.INFO))\n+\n+    return sections, targets\n+\n+\n+def load_toml_config_file(filename, log_printer=None, silent=False):\n+    filename = os.path.abspath(filename)\n+    try:\n+        return TomlConfParser().parse(filename)\n+    except FileNotFoundError:\n+        if not silent:\n+            if os.path.basename(filename) == Constants.local_coafile_toml:\n+                logging.warning(COAFILE_OUTPUT\n+                                .substitute(type='Local coafile',\n+                                            file=Constants.local_coafile_toml,\n+                                            found='not found'))\n+            elif os.path.basename(filename) == '.coarc.toml':\n+                logging.warning(COARC_OUTPUT\n+                                .substitute(type='Requested coarc file',\n+                                            file=filename,\n+                                            found='does not exist'))\n+            else:\n+                logging.error(COAFILE_OUTPUT\n+                              .substitute(type='Requested coafile',\n+                                          file=filename,\n+                                          found='does not exist'))\n+                sys.exit(2)\n+\n+        return {'default': Section('default')}\n+\n+\n+def load_toml_config(cli_sections, silent):","author":{"login":"Nosferatul","avatarUrl":"https://avatars2.githubusercontent.com/u/15227444?v=4","name":"Alexandru-Sorin Maxim"},"reactions":[],"createdAt":"2019-07-07T21:08:58Z","lastEditedAt":null,"updatedAt":"2019-07-07T21:08:58Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDg4NTUxOA==","url":"https://github.com/coala/coala/pull/6027#discussion_r300885518","bodyText":"when a string is used more then one time, it should be a global variable in top of the file.","diffHunk":"@@ -244,10 +245,121 @@ def load_configuration(arg_list,\n                              args=args)\n     check_conflicts(cli_sections)\n \n+    if bool(cli_sections['cli'].get('use_toml', 'False')):\n+        sections, targets = load_toml_config(cli_sections, silent)\n+    else:\n+        sections, targets = load_coafile_config(cli_sections, silent)\n+    for name, section in list(sections.items()):\n+        section.set_default_section(sections)\n+        if name == 'default':\n+            if section.contents:\n+                logging.warning('Implicit \\'Default\\' section inheritance is '\n+                                'deprecated. It will be removed soon. To '\n+                                'silence this warning remove settings in the '\n+                                '\\'Default\\' section from your coafile. You '\n+                                'can use dots to specify inheritance: the '\n+                                'section \\'all.python\\' will inherit all '\n+                                'settings from \\'all\\'.')\n+                sections['default'].update(sections['cli'])\n+                sections['default'].name = 'cli'\n+                sections['cli'] = sections['default']\n+            del sections['default']\n+\n+    str_log_level = str(sections['cli'].get('log_level', '')).upper()\n+    logging.getLogger().setLevel(LOG_LEVEL.str_dict.get(str_log_level,\n+                                                        LOG_LEVEL.INFO))\n+\n+    return sections, targets\n+\n+\n+def load_toml_config_file(filename, log_printer=None, silent=False):\n+    filename = os.path.abspath(filename)\n+    try:\n+        return TomlConfParser().parse(filename)\n+    except FileNotFoundError:\n+        if not silent:\n+            if os.path.basename(filename) == Constants.local_coafile_toml:\n+                logging.warning(COAFILE_OUTPUT\n+                                .substitute(type='Local coafile',\n+                                            file=Constants.local_coafile_toml,\n+                                            found='not found'))\n+            elif os.path.basename(filename) == '.coarc.toml':\n+                logging.warning(COARC_OUTPUT\n+                                .substitute(type='Requested coarc file',\n+                                            file=filename,\n+                                            found='does not exist'))\n+            else:\n+                logging.error(COAFILE_OUTPUT\n+                              .substitute(type='Requested coafile',\n+                                          file=filename,\n+                                          found='does not exist'))\n+                sys.exit(2)\n+\n+        return {'default': Section('default')}\n+\n+\n+def load_toml_config(cli_sections, silent):\n     if (\n             bool(cli_sections['cli'].get('find_config', 'False')) and\n             str(cli_sections['cli'].get('config')) == ''):\n         cli_sections['cli'].add_or_create_setting(\n+\n+            Setting('config', PathArg(find_user_config(\n+                os.getcwd(),\n+                default_file='.coafile.toml'))))\n+\n+    # We don't want to store targets argument back to file, thus remove it\n+    targets = [item.lower() for item in list(\n+        cli_sections['cli'].contents.pop('targets', ''))]\n+\n+    if bool(cli_sections['cli'].get('no_config', 'False')):\n+        sections = cli_sections\n+    else:\n+        base_sections = load_toml_config_file(Constants.system_coafile_toml,\n+                                              silent=silent)\n+        user_sections = load_toml_config_file(\n+            Constants.user_coafile_toml, silent=True)\n+        default_config = str(base_sections['default'].\n+                             get('config', '.coafile.toml'))\n+        user_config = str(user_sections['default'].\n+                          get('config', default_config))\n+        config = os.path.abspath(\n+            str(cli_sections['cli'].get('config', user_config)))\n+\n+        try:\n+            save = bool(cli_sections['cli'].get('save', 'False'))\n+        except ValueError:\n+            # A file is deposited for the save parameter, means we want to save\n+            # but to a specific file.\n+            save = True\n+\n+        coafile_sections = load_toml_config_file(config,\n+                                                 silent=save or silent)\n+\n+        sections = merge_section_dicts(base_sections, user_sections)\n+\n+        sections = merge_section_dicts(sections, coafile_sections)\n+\n+        if 'cli' in sections:\n+            logging.warning('\\'cli\\' is an internally reserved section name. '","author":{"login":"Nosferatul","avatarUrl":"https://avatars2.githubusercontent.com/u/15227444?v=4","name":"Alexandru-Sorin Maxim"},"reactions":[],"createdAt":"2019-07-07T21:10:18Z","lastEditedAt":null,"updatedAt":"2019-07-07T21:10:18Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDk1NjIwNg==","url":"https://github.com/coala/coala/pull/6027#discussion_r300956206","bodyText":"It has been used in load_config_file from the beginning","diffHunk":"@@ -244,10 +245,121 @@ def load_configuration(arg_list,\n                              args=args)\n     check_conflicts(cli_sections)\n \n+    if bool(cli_sections['cli'].get('use_toml', 'False')):\n+        sections, targets = load_toml_config(cli_sections, silent)\n+    else:\n+        sections, targets = load_coafile_config(cli_sections, silent)\n+    for name, section in list(sections.items()):\n+        section.set_default_section(sections)\n+        if name == 'default':\n+            if section.contents:\n+                logging.warning('Implicit \\'Default\\' section inheritance is '\n+                                'deprecated. It will be removed soon. To '\n+                                'silence this warning remove settings in the '\n+                                '\\'Default\\' section from your coafile. You '\n+                                'can use dots to specify inheritance: the '\n+                                'section \\'all.python\\' will inherit all '\n+                                'settings from \\'all\\'.')\n+                sections['default'].update(sections['cli'])\n+                sections['default'].name = 'cli'\n+                sections['cli'] = sections['default']\n+            del sections['default']\n+\n+    str_log_level = str(sections['cli'].get('log_level', '')).upper()\n+    logging.getLogger().setLevel(LOG_LEVEL.str_dict.get(str_log_level,\n+                                                        LOG_LEVEL.INFO))\n+\n+    return sections, targets\n+\n+\n+def load_toml_config_file(filename, log_printer=None, silent=False):\n+    filename = os.path.abspath(filename)\n+    try:\n+        return TomlConfParser().parse(filename)\n+    except FileNotFoundError:\n+        if not silent:\n+            if os.path.basename(filename) == Constants.local_coafile_toml:\n+                logging.warning(COAFILE_OUTPUT\n+                                .substitute(type='Local coafile',\n+                                            file=Constants.local_coafile_toml,\n+                                            found='not found'))\n+            elif os.path.basename(filename) == '.coarc.toml':\n+                logging.warning(COARC_OUTPUT\n+                                .substitute(type='Requested coarc file',\n+                                            file=filename,\n+                                            found='does not exist'))\n+            else:\n+                logging.error(COAFILE_OUTPUT\n+                              .substitute(type='Requested coafile',\n+                                          file=filename,\n+                                          found='does not exist'))\n+                sys.exit(2)","author":{"login":"PrajwalM2212","avatarUrl":"https://avatars3.githubusercontent.com/u/30733262?v=4","name":"PRAJWAL M"},"reactions":[],"createdAt":"2019-07-08T07:31:25Z","lastEditedAt":null,"updatedAt":"2019-07-08T07:31:25Z"},{"id":"MDEyOklzc3VlQ29tbWVudDUwNDg1OTE4Mg==","url":"https://github.com/coala/coala/pull/6027#issuecomment-504859182","bodyText":"@jayvdb Can you review this PR ?","diffHunk":null,"author":{"login":"PrajwalM2212","avatarUrl":"https://avatars3.githubusercontent.com/u/30733262?v=4","name":"PRAJWAL M"},"reactions":[],"createdAt":"2019-06-24T05:06:56Z","lastEditedAt":null,"updatedAt":"2019-06-24T05:06:56Z"},{"id":"MDEyOklzc3VlQ29tbWVudDUwODcyMDk4Nw==","url":"https://github.com/coala/coala/pull/6027#issuecomment-508720987","bodyText":"@Makman2  @jayvdb  can you guys please take a look at the PR","diffHunk":null,"author":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4","name":"Vaibhav Rai"},"reactions":[],"createdAt":"2019-07-05T10:56:48Z","lastEditedAt":null,"updatedAt":"2019-07-05T10:56:48Z"},{"id":"MDEyOklzc3VlQ29tbWVudDUwOTAxNTQ4MQ==","url":"https://github.com/coala/coala/pull/6027#issuecomment-509015481","bodyText":"@PrajwalM2212 I want you to exit the coala with a proper warning and message when someone run coala -T with a toml file but there is no content in their\n[WARNING][22:27:57] coala will not run any analysis. Did you forget to give the `--files` argument?\n[WARNING][22:27:57] coala will not run any analysis. Did you forget to give the `--bears` or `--aspects` argument?\n\nAbove is what currently I am getting this message is okay when section name is defined but not okay when there is no content, also during parsing using toml you are not handling the error comes form toml.parse\nself.data = tomlkit.parse(file.read())\n\nKindly update the code.","diffHunk":null,"author":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4","name":"Vaibhav Rai"},"reactions":[],"createdAt":"2019-07-07T17:04:19Z","lastEditedAt":null,"updatedAt":"2019-07-07T17:04:19Z"},{"id":"MDEyOklzc3VlQ29tbWVudDUxMzQ1NjkzMw==","url":"https://github.com/coala/coala/pull/6027#issuecomment-513456933","bodyText":"It looks good to me, you have my approval. 👍","diffHunk":null,"author":{"login":"Nosferatul","avatarUrl":"https://avatars2.githubusercontent.com/u/15227444?v=4","name":"Alexandru-Sorin Maxim"},"reactions":[],"createdAt":"2019-07-20T10:42:05Z","lastEditedAt":null,"updatedAt":"2019-07-20T10:42:05Z"}]}}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1567351647000,"issue":{"htmlUrl":"https://github.com/coala/coala/pull/6029","number":6029,"title":"Result.py: Add actions attribute","body":"This adds a new attribute actions to the Result class. It is a list of action objects which are specific to the origin to that Result.\nThis also makes changes in ConsoleInteraction module and Processing module to incorporate these additions and support bears to define their own actions.","comments":3,"createdAt":"2019-06-19T12:46:20Z","updatedAt":"2019-09-01T15:27:27Z","closedAt":"2019-09-01T15:27:27Z","state":"merged","user":{"login":"akshatkarani","avatarUrl":"https://avatars3.githubusercontent.com/u/29230845?v=4"},"owner":{"login":"akshatkarani","avatarUrl":"https://avatars3.githubusercontent.com/u/29230845?v=4"},"labels":[],"pullRequest":{"htmlUrl":"https://github.com/coala/coala/pull/6029","comments":[{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDczOTQyNw==","url":"https://github.com/coala/coala/pull/6029#discussion_r300739427","bodyText":"This condition ensures that if action is in bear_actions then it must be in result.actions.","diffHunk":"@@ -145,30 +150,34 @@ def autoapply_actions(results,\n             else:\n                 not_processed_results.append(result)\n                 continue\n+        if action not in bear_actions or action in result.actions:","author":{"login":"akshatkarani","avatarUrl":"https://avatars3.githubusercontent.com/u/29230845?v=4","name":"Akshat Karani"},"createdAt":"2019-07-05T16:18:19Z","lastEditedAt":null,"updatedAt":"2019-07-05T16:18:19Z"},{"id":"MDEyOklzc3VlQ29tbWVudDUyMDIzNTM1Mg==","url":"https://github.com/coala/coala/pull/6029#issuecomment-520235352","bodyText":"Ping @Makman2","diffHunk":null,"author":{"login":"abhishalya","avatarUrl":"https://avatars0.githubusercontent.com/u/34682737?v=4","name":"Abhinav Kaushlya"},"createdAt":"2019-08-11T15:06:11Z","lastEditedAt":null,"updatedAt":"2019-08-11T15:06:11Z"},{"id":"MDEyOklzc3VlQ29tbWVudDUyNDYyNzkxMQ==","url":"https://github.com/coala/coala/pull/6029#issuecomment-524627911","bodyText":"Can you change the PR title = commit shortlog.\nIts a bit confusing everytime I see it :P","diffHunk":null,"author":{"login":"abhishalya","avatarUrl":"https://avatars0.githubusercontent.com/u/34682737?v=4","name":"Abhinav Kaushlya"},"createdAt":"2019-08-25T12:53:39Z","lastEditedAt":null,"updatedAt":"2019-08-25T12:53:39Z"},{"id":"MDEyOklzc3VlQ29tbWVudDUyNjQ0NTQ2Mg==","url":"https://github.com/coala/coala/pull/6029#issuecomment-526445462","bodyText":"From my side nothing more to complain :) can be merged.","diffHunk":null,"author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"createdAt":"2019-08-30T03:51:59Z","lastEditedAt":null,"updatedAt":"2019-08-30T03:51:59Z"}]}}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1564836709000,"issue":{"htmlUrl":"https://github.com/coala/coala/pull/6030","number":6030,"title":"Use Fudge for Windows development and CI","body":"Includes workaround for #5985\nNote commit .moban.yaml: Use local mobans needs to be removed before merging.","comments":0,"createdAt":"2019-06-20T03:23:08Z","updatedAt":"2019-08-03T12:51:49Z","closedAt":"2019-08-03T12:51:49Z","state":"merged","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[],"pullRequest":{"htmlUrl":"https://github.com/coala/coala/pull/6030","comments":[{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwNTkwNDkxNQ==","url":"https://github.com/coala/coala/pull/6030#discussion_r305904915","bodyText":"Isn't py.test old enough to be replaced by pytest?","diffHunk":"@@ -32,32 +41,90 @@ branches:\n   except:\n     - /^sils\\/.*/\n \n+# This forces unix style line endings in the clone, which is necessary to\n+# avoid warning regarding EOLs when running git diff on Windows\n+init: git config --global core.autocrlf false\n+\n install:\n-  # Prepend newly installed Python to the PATH of this build (this cannot be\n-  # done from inside the powershell script as it would require to restart\n-  # the parent CMD process).\n-  - \"SET PATH=%PYTHON%;%PYTHON%\\\\Scripts;%PATH%\"\n-  - \"SET PATH=%PATH%;C:\\\\Program\\ Files\\\\Git\\\\mingw64\\\\bin\"\n+  # Show initial state\n+  - powershell -c \"$PSVersionTable\"\n+  # Uncomment to debug\n+  # printenv\n+  - python --version\n+  - \"python -c \\\"import struct; print(struct.calcsize('P') * 8)\\\"\"\n+  - python -m pip --version\n+  - python -c \"import setuptools; print(setuptools.__version__)\"\n+  - node --version\n+  - which npm\n+  - npm --version\n+  - npm config get prefix\n+  - which gcc & exit 0\n+  - gcc --version & exit 0\n+  - which cl & exit 0\n+\n+  # Stores environment in registry, with minor tweaks\n+  - python .misc/store_env_in_registry.py\n+  - refreshenv\n+\n+  # Set up AppVeyor product versions, and install dummy choco entries for them\n+  - ps: . .misc/FudgeCI.ps1; Initialize-AppVeyorVM\n+  - refreshenv\n+  - echo %PATH%\n+  # Avoid tools finding and using MinGW\n+  - mv C:\\MinGW %TEMP%\n+  # TODO: Avoid tools finding and using Visual Studio\n+\n+  # Show updated SOE; versions should be as defined in top of the Fudgefile\n+  - python --version\n+  - \"python -c \\\"import struct; print(struct.calcsize('P') * 8)\\\"\"\n+  - node --version\n+  - which npm\n+  - npm --version\n+  - npm config get prefix\n+  - which gcc & exit 0\n+  - gcc --version & exit 0\n+\n+  - \"%MSYS_BIN%\\\\date.exe\"\n+  # Install remainer of the Fudgefile with chocolatey using Fudge\n+  - ps: . .misc/Fudge.ps1 install\n+  - refreshenv\n+  - echo %PATH%\n+\n \n   # Check that we have the expected version and architecture for Python\n   - \"python --version\"\n   - \"python -c \\\"import struct; print(struct.calcsize('P') * 8)\\\"\"\n-  - \"%CMD_IN_ENV% python -m pip install --upgrade setuptools==21 pip==9.0.1\"\n-  - \"%CMD_IN_ENV% python -m pip install -r test-requirements.txt \\\n-    -r requirements.txt -r docs-requirements.txt\"\n+  # Confirm other versions\n+  - node --version\n+  - which npm\n+  - npm --version\n+  - npm config get prefix\n+  # Newly installed versions\n+\n+\n+  - \"%MSYS_BIN%\\\\date.exe\"\n \n build: false  # Not a C# project, build stuff at the test step instead.\n \n test_script:\n-  - \"%CMD_IN_ENV% py.test\"\n-  - \"%CMD_IN_ENV% python setup.py install\"\n-  - \"%CMD_IN_ENV% python -m pip install \\\n-    git+https://github.com/coala/coala-bears\"\n+  - python -m pip --version\n+  - python -c \"import setuptools; print(setuptools.__version__)\"\n+\n+  - py.test","author":{"login":"abhishalya","avatarUrl":"https://avatars0.githubusercontent.com/u/34682737?v=4","name":"Abhinav Kaushlya"},"createdAt":"2019-07-22T15:24:14Z","lastEditedAt":null,"updatedAt":"2019-07-22T15:24:14Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwNTkwNTIzOA==","url":"https://github.com/coala/coala/pull/6030#discussion_r305905238","bodyText":"Oh, I thought you had a different hacky fix :P","diffHunk":"@@ -32,32 +41,90 @@ branches:\n   except:\n     - /^sils\\/.*/\n \n+# This forces unix style line endings in the clone, which is necessary to\n+# avoid warning regarding EOLs when running git diff on Windows\n+init: git config --global core.autocrlf false\n+\n install:\n-  # Prepend newly installed Python to the PATH of this build (this cannot be\n-  # done from inside the powershell script as it would require to restart\n-  # the parent CMD process).\n-  - \"SET PATH=%PYTHON%;%PYTHON%\\\\Scripts;%PATH%\"\n-  - \"SET PATH=%PATH%;C:\\\\Program\\ Files\\\\Git\\\\mingw64\\\\bin\"\n+  # Show initial state\n+  - powershell -c \"$PSVersionTable\"\n+  # Uncomment to debug\n+  # printenv\n+  - python --version\n+  - \"python -c \\\"import struct; print(struct.calcsize('P') * 8)\\\"\"\n+  - python -m pip --version\n+  - python -c \"import setuptools; print(setuptools.__version__)\"\n+  - node --version\n+  - which npm\n+  - npm --version\n+  - npm config get prefix\n+  - which gcc & exit 0\n+  - gcc --version & exit 0\n+  - which cl & exit 0\n+\n+  # Stores environment in registry, with minor tweaks\n+  - python .misc/store_env_in_registry.py\n+  - refreshenv\n+\n+  # Set up AppVeyor product versions, and install dummy choco entries for them\n+  - ps: . .misc/FudgeCI.ps1; Initialize-AppVeyorVM\n+  - refreshenv\n+  - echo %PATH%\n+  # Avoid tools finding and using MinGW\n+  - mv C:\\MinGW %TEMP%\n+  # TODO: Avoid tools finding and using Visual Studio\n+\n+  # Show updated SOE; versions should be as defined in top of the Fudgefile\n+  - python --version\n+  - \"python -c \\\"import struct; print(struct.calcsize('P') * 8)\\\"\"\n+  - node --version\n+  - which npm\n+  - npm --version\n+  - npm config get prefix\n+  - which gcc & exit 0\n+  - gcc --version & exit 0\n+\n+  - \"%MSYS_BIN%\\\\date.exe\"\n+  # Install remainer of the Fudgefile with chocolatey using Fudge\n+  - ps: . .misc/Fudge.ps1 install\n+  - refreshenv\n+  - echo %PATH%\n+\n \n   # Check that we have the expected version and architecture for Python\n   - \"python --version\"\n   - \"python -c \\\"import struct; print(struct.calcsize('P') * 8)\\\"\"\n-  - \"%CMD_IN_ENV% python -m pip install --upgrade setuptools==21 pip==9.0.1\"\n-  - \"%CMD_IN_ENV% python -m pip install -r test-requirements.txt \\\n-    -r requirements.txt -r docs-requirements.txt\"\n+  # Confirm other versions\n+  - node --version\n+  - which npm\n+  - npm --version\n+  - npm config get prefix\n+  # Newly installed versions\n+\n+\n+  - \"%MSYS_BIN%\\\\date.exe\"\n \n build: false  # Not a C# project, build stuff at the test step instead.\n \n test_script:\n-  - \"%CMD_IN_ENV% py.test\"\n-  - \"%CMD_IN_ENV% python setup.py install\"\n-  - \"%CMD_IN_ENV% python -m pip install \\\n-    git+https://github.com/coala/coala-bears\"\n+  - python -m pip --version\n+  - python -c \"import setuptools; print(setuptools.__version__)\"\n+\n+  - py.test\n+\n+  - python setup.py install\n+\n+  - python -m pip install\n+      git+https://github.com/coala/coala-bears#egg=coala-bears\n   - npm install csslint -g\n   # https://github.com/coala/coala/issues/5619\n   - rm docs/Developers/coala_settings.rst\n-  - sed -i '/ShellCheckBear/d' .coafile\n-  - \"%CMD_IN_ENV% coala --ci\"\n+  # https://github.com/coala/coala/issues/5985 and\n+  # https://github.com/coala/coala/issues/6028 and others:\n+  - rm coalib/misc/Asyncio.py","author":{"login":"abhishalya","avatarUrl":"https://avatars0.githubusercontent.com/u/34682737?v=4","name":"Abhinav Kaushlya"},"createdAt":"2019-07-22T15:24:49Z","lastEditedAt":null,"updatedAt":"2019-07-22T15:24:49Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwNTkwNzgyOA==","url":"https://github.com/coala/coala/pull/6030#discussion_r305907828","bodyText":"EOL at EOF?","diffHunk":"@@ -0,0 +1,448 @@\n+<#\n+    .SYNOPSIS\n+        Fudge is a tool to help you manage and version control Chocolatey packages required for environments to function\n+\n+    .DESCRIPTION\n+        Fudge is a tool to help you manage and version control Chocolatey packages required for environments to function.\n+        This is done via a Fudgefile which allows you to specify packages (and their versions) to install. You can also\n+        specify dev-specific packages (like git, or fiddler)\n+\n+        You are also able to define pre/post install/upgrade/downgrade/uninstall scripts for additional required functionality\n+\n+        Furthermore, Fudge has a section to allow you to specify multiple nuspec files and pack the one you need\n+\n+    .PARAMETER Action\n+        The action that Fudge should undertake\n+        Actions: install, upgrade, downgrade, uninstall, reinstall, pack, list, search, new, delete, prune, clean, rebuild,\n+                 which, help, renew, add, remove\n+        [Alias: -a]\n+\n+    .PARAMETER Key\n+        The key represents a package/nuspec name in the Fudgefile\n+        [Actions: install, upgrade, downgrade, uninstall, reinstall, pack, new, which, renew, add, remove]\n+        [Alias: -k]\n+\n+    .PARAMETER FudgefilePath\n+        This will override looking for a default 'Fudgefile' at the root of the current path, and allow you to specify\n+        other files instead. This allows you to have multiple Fudgefiles\n+        [Actions: install, upgrade, downgrade, uninstall, reinstall, pack, list, new, delete, prune, rebuild, renew, add, remove]\n+        [Default: ./Fudgefile]\n+        [Alias: -fp]\n+\n+    .PARAMETER Limit\n+        This argument only applies for the 'search' action. It will limit the amount of packages returned when searching\n+        If 0 is supplied, the full list is returned\n+        [Actions: search]\n+        [Default: 10]\n+        [Alias: -l]\n+\n+    .PARAMETER Source\n+        Passing this argument will allow you to specify custom source locations to get/download packages for Chocolatey.\n+        This allows you to install packages from local directories, or from custom Chocolatey servers. Passing this will\n+        also override the source specified in any Fudgefiles\n+        [Default: Chocolatey's server]\n+        [Actions: install, upgrade, downgrade, reinstall, search, rebuild, add]\n+        [Alias: -s]\n+\n+    .PARAMETER Parameters\n+        This argument allows you to pass parameters to a chocolatey package, as if you were using \"--params\" on choco.\n+        For install/upgrade/downgrade/uninstall/reinstall, this argument only works when \"-Adhoc\" is also supplied\n+        [Default: Empty]\n+        [Actions: install, upgrade, downgrade, uninstall, reinstall, add]\n+        [Alias: -p]\n+\n+    .PARAMETER Arguments\n+        This argument allows you to pass extra arguments to a chocolatey, such as \"--x86\" or \"--ignore-checksum\"\n+        For install/upgrade/downgrade/uninstall/reinstall, this argument only works when \"-Adhoc\" is also supplied\n+        [Default: Empty]\n+        [Actions: install, upgrade, downgrade, uninstall, reinstall, add]\n+        [Alias: -args]\n+\n+    .PARAMETER Dev\n+        Switch parameter, if supplied will also action upon the devPackages in the Fudgefile\n+        [Actions: install, upgrade, downgrade, uninstall, reinstall, list, delete, prune, rebuild, add, remove]\n+        [Alias: -d]\n+\n+    .PARAMETER DevOnly\n+        Switch parameter, if supplied will only action upon the devPackages in the Fudgefile\n+        [Actions: install, upgrade, downgrade, uninstall, reinstall, list, delete, prune, rebuild]\n+        [Alias: -do]\n+\n+    .PARAMETER Install\n+        Switch parameter, if supplied will install packages after creating a new Fudgefile\n+        [Actions: new, renew, add]\n+        [Alias: -i]\n+\n+    .PARAMETER Uninstall\n+        Switch parameter, if supplied will uninstall packages before deleting a Fudgefile\n+        [Actions: delete, renew, remove]\n+        [Alias: -u]\n+\n+    .PARAMETER Adhoc\n+        Switch parameter, if supplied will install software from Chocolatey whether or not\n+        the package is in the Fudgefile\n+        [Actions: install, upgrade, downgrade, uninstall, reinstall]\n+        [Alias: -ad]\n+\n+    .PARAMETER Version\n+        Switch parameter, if supplied will just display the current version of Fudge installed\n+        [Alias: -v]\n+\n+    .PARAMETER Help\n+        Switch parameter, if supplied will just display help output\n+        [Alias: -h]\n+\n+    .EXAMPLE\n+        fudge install\n+\n+    .EXAMPLE\n+        fudge install -d    # to also install devPackages (-do will only install devPackages)\n+\n+    .EXAMPLE\n+        fudge install git -ad   # installs git dispite not being in the Fudgefile\n+\n+    .EXAMPLE\n+        fudge pack website\n+\n+    .EXAMPLE\n+        fudge list\n+\n+    .EXAMPLE\n+        fudge search checksum\n+#>\n+param (\n+    [Alias('a')]\n+    [string]\n+    $Action,\n+\n+    [Alias('k')]\n+    [string]\n+    $Key,\n+\n+    [Alias('fp')]\n+    [string]\n+    $FudgefilePath,\n+\n+    [Alias('l')]\n+    [int]\n+    $Limit = 10,\n+\n+    [Alias('s')]\n+    [string]\n+    $Source,\n+\n+    [Alias('p')]\n+    [string]\n+    $Parameters,\n+\n+    [Alias('args')]\n+    [string]\n+    $Arguments,\n+\n+    [Alias('d')]\n+    [switch]\n+    $Dev,\n+\n+    [Alias('do')]\n+    [switch]\n+    $DevOnly,\n+\n+    [Alias('i')]\n+    [switch]\n+    $Install,\n+\n+    [Alias('u')]\n+    [switch]\n+    $Uninstall,\n+\n+    [Alias('v')]\n+    [switch]\n+    $Version,\n+\n+    [Alias('h')]\n+    [switch]\n+    $Help,\n+\n+    [Alias('ad')]\n+    [switch]\n+    $Adhoc\n+)\n+\n+# ensure if there's an error, we stop\n+$ErrorActionPreference = 'Stop'\n+\n+\n+# Import required modules\n+$root = Split-Path -Parent -Path $MyInvocation.MyCommand.Path\n+Import-Module \"$($root)\\Modules\\FudgeTools.psm1\" -Force -ErrorAction Stop\n+\n+\n+# output the version\n+$ver = 'v$version$'\n+Write-Success \"Fudge $($ver)\"\n+\n+# if we were only after the version, just return\n+if ($Version -or (@('v', 'version') -icontains $Action))\n+{\n+    return\n+}\n+\n+\n+# if action is just to display Help, show it and return\n+if ($Help -or (@('h', 'help') -icontains $Action))\n+{\n+    Write-Host \"`nUsage: fudge <action>\"\n+    Write-Host \"`nWhere <action> is one of:\"\n+    Write-Host \"    add, clean, delete, downgrade, help, install, list, new, pack,\"\n+    Write-Host \"    prune, rebuild, reinstall, remove, renew, search, uninstall,\"\n+    Write-Host \"    upgrade, version, which\"\n+    Write-Host \"\"\n+    return\n+}\n+\n+\n+try\n+{\n+    # start timer\n+    $timer = [DateTime]::UtcNow\n+\n+\n+    # ensure we have a valid action\n+    $packageActions = @('install', 'upgrade', 'uninstall', 'reinstall', 'list', 'rebuild', 'downgrade', 'add', 'remove')\n+    $maintainActions = @('prune')\n+    $packingActions = @('pack')\n+    $miscActions = @('search', 'clean', 'which')\n+    $newActions = @('new')\n+    $alterActions = @('delete', 'renew')\n+\n+    $actions = ($packageActions + $maintainActions + $packingActions + $miscActions + $newActions + $alterActions)\n+    if ((Test-Empty $Action) -or $actions -inotcontains $Action) {\n+        Write-Fail \"Unrecognised action supplied '$($Action)', should be either: $($actions -join ', ')\"\n+        return\n+    }\n+\n+\n+    # actions that require chocolatey\n+    $isChocoAction = (@('which', 'add', 'remove', 'delete') -inotcontains $Action)\n+    if (!$isChocoAction -and ($Install -or $Uninstall)) {\n+        $isChocoAction = $true\n+    }\n+\n+\n+    # if adhoc was supplied for an invalid action\n+    if ($Adhoc -and @('install', 'uninstall', 'upgrade', 'downgrade', 'reinstall') -inotcontains $Action) {\n+        Write-Fail \"Adhoc supplied for invalid action: $($Action)\"\n+        return\n+    }\n+\n+    # if adhoc supplied with no package name, fail\n+    if ($Adhoc -and [string]::IsNullOrWhiteSpace($Key)) {\n+        Write-Fail \"No package name supplied for adhoc $($Action)\"\n+        return\n+    }\n+\n+\n+    # if -devOnly is passed, set -dev to true\n+    if ($DevOnly) {\n+        $Dev = $true\n+    }\n+\n+\n+    # get the Fudgefile path, if adhoc is supplied set to empty\n+    $FudgefilePath = Get-FudgefilePath $FudgefilePath -Adhoc:$Adhoc\n+\n+\n+    # ensure that the Fudgefile exists (for certain actions), and deserialise it\n+    if (($packageActions + $maintainActions + $packingActions + $alterActions) -icontains $Action)\n+    {\n+        $config = $null\n+\n+        # if adhoc is supplied, we don't need to get the content\n+        if (!$Adhoc) {\n+            if (!(Test-Path $FudgefilePath)) {\n+                Write-Fail \"Path to Fudgefile does not exist: $($FudgefilePath)\"\n+                return\n+            }\n+\n+            $config = Get-FudgefileContent $FudgefilePath\n+        }\n+\n+        # if we have a custom source in the config and no CLI source, set the source\n+        if ((Test-Empty $Source) -and ($null -ne $config) -and !(Test-Empty $config.source)) {\n+            $Source = $config.source\n+        }\n+    }\n+\n+    # ensure that the Fudgefile doesn't exist\n+    elseif ($newActions -icontains $Action)\n+    {\n+        if (Test-Path $FudgefilePath) {\n+            Write-Fail \"Path to Fudgefile already exists: $($FudgefilePath)\"\n+            return\n+        }\n+    }\n+\n+\n+    # if there are no packages to install or nuspecs to pack, just return\n+    if ($null -ne $config)\n+    {\n+        # check nuspecs\n+        if ($packingActions -icontains $Action)\n+        {\n+            if (Test-Empty $config.pack) {\n+                Write-Notice \"There are no nuspecs to $($Action)\"\n+                return\n+            }\n+\n+            if (![string]::IsNullOrWhiteSpace($Key) -and [string]::IsNullOrWhiteSpace($config.pack.$Key)) {\n+                Write-Notice \"Fudgefile does not contain a nuspec pack file for '$($Key)'\"\n+                return\n+            }\n+        }\n+\n+        # check packages\n+        elseif ($packageActions -icontains $Action)\n+        {\n+            if ((Test-Empty $config.packages) -and (!$Dev -or ($Dev -and (Test-Empty $config.devPackages)))) {\n+                Write-Notice \"There are no packages to $($Action)\"\n+                return\n+            }\n+\n+            if ($DevOnly -and (Test-Empty $config.devPackages)) {\n+                Write-Notice \"There are no devPackages to $($Action)\"\n+                return\n+            }\n+        }\n+    }\n+\n+\n+    # check to see if chocolatey is installed\n+    if ($isChocoAction) {\n+        $isChocoInstalled = Test-Chocolatey\n+    }\n+\n+\n+    # check if the console is elevated (only needs to be done for certain actions)\n+    $isAdminAction = @('list', 'search', 'new', 'delete', 'renew', 'which', 'add', 'remove', 'pack') -inotcontains $Action\n+    $actionNeedsAdmin = (@('delete', 'remove') -icontains $Action -and $Uninstall) -or (@('new', 'renew', 'add') -icontains $Action -and $Install)\n+\n+    if (((!$isChocoInstalled -and $isChocoAction) -or $isAdminAction -or $actionNeedsAdmin) -and !(Test-AdminUser))\n+    {\n+        Write-Notice 'Must be running with administrator privileges for Fudge to fully function'\n+        return\n+    }\n+\n+\n+    # if chocolatey isn't installed, install it\n+    if (!$isChocoInstalled -and $isChocoAction) {\n+        Install-Chocolatey\n+    }\n+\n+\n+    # if we are using a global custom source, output it for info\n+    if (!(Test-Empty $Source)) {\n+        Write-Notice \"Source: $($Source)\"\n+    }\n+\n+    Write-Host ([string]::Empty)\n+\n+\n+    # retrieve a local list of what's currently installed\n+    if ($isChocoAction) {\n+        $localList = Get-ChocolateyLocalList\n+    }\n+\n+\n+    # invoke chocolatey based on the action required\n+    switch ($Action)\n+    {\n+        {($_ -ieq 'install') -or ($_ -ieq 'uninstall') -or ($_ -ieq 'upgrade')  -or ($_ -ieq 'downgrade')}\n+            {\n+                Invoke-ChocolateyAction -Action $Action -Key $Key -Source $Source -Config $config -LocalList $localList `\n+                    -Parameters $Parameters -Arguments $Arguments -Dev:$Dev -DevOnly:$DevOnly -Adhoc:$Adhoc\n+            }\n+\n+        {($_ -ieq 'reinstall')}\n+            {\n+                Invoke-ChocolateyAction -Action 'uninstall' -Key $Key -Source $Source -Config $config -LocalList $localList `\n+                    -Parameters $Parameters -Arguments $Arguments -Dev:$Dev -DevOnly:$DevOnly -Adhoc:$Adhoc\n+\n+                Invoke-ChocolateyAction -Action 'install' -Key $Key -Source $Source -Config $config -LocalList $localList `\n+                    -Parameters $Parameters -Arguments $Arguments -Dev:$Dev -DevOnly:$DevOnly -Adhoc:$Adhoc\n+            }\n+\n+        {($_ -ieq 'pack')}\n+            {\n+                Invoke-ChocolateyAction -Action 'pack' -Key $Key -Config $config\n+            }\n+\n+        {($_ -ieq 'list')}\n+            {\n+                Invoke-FudgeLocalDetails -Config $config -Key $Key -LocalList $localList -Dev:$Dev -DevOnly:$DevOnly\n+            }\n+\n+        {($_ -ieq 'search')}\n+            {\n+                Invoke-Search -Key $Key -Limit $Limit -Source $Source -LocalList $localList\n+            }\n+\n+        {($_ -ieq 'new')}\n+            {\n+                New-Fudgefile -Path $FudgefilePath -Key $Key -LocalList $localList -Install:$Install -Dev:$Dev -DevOnly:$DevOnly\n+            }\n+\n+        {($_ -ieq 'renew')}\n+            {\n+                Restore-Fudgefile -Path $FudgefilePath -Key $Key -LocalList $localList -Install:$Install -Uninstall:$Uninstall -Dev:$Dev -DevOnly:$DevOnly\n+            }\n+\n+        {($_ -ieq 'delete')}\n+            {\n+                Remove-Fudgefile -Path $FudgefilePath -Uninstall:$Uninstall -Dev:$Dev -DevOnly:$DevOnly\n+            }\n+\n+        {($_ -ieq 'prune')}\n+            {\n+                Invoke-FudgePrune -Config $config -LocalList $localList -Dev:$Dev -DevOnly:$DevOnly\n+            }\n+\n+        {($_ -ieq 'clean')}\n+            {\n+                Invoke-FudgeClean -LocalList $localList\n+            }\n+\n+        {($_ -ieq 'add')}\n+            {\n+                Invoke-FudgeAdd -Path $FudgefilePath -Key $Key -Source $Source -Config $config -LocalList $localList `\n+                    -Parameters $Parameters -Arguments $Arguments -Dev:$Dev -Install:$Install\n+            }\n+\n+        {($_ -ieq 'remove')}\n+            {\n+                Invoke-FudgeRemove -Path $FudgefilePath -Key $Key -Config $config -LocalList $localList `\n+                    -Parameters $Parameters -Arguments $Arguments -Dev:$Dev -Uninstall:$Uninstall\n+            }\n+\n+        {($_ -ieq 'which')}\n+            {\n+                Invoke-FudgeWhich -Key $Key\n+            }\n+\n+        {($_ -ieq 'rebuild')}\n+            {\n+                Invoke-FudgeClean -LocalList $localList\n+                Invoke-ChocolateyAction -Action 'install' -Key $Key -Source $Source -Config $config -Dev:$Dev -DevOnly:$DevOnly\n+            }\n+\n+        default\n+            {\n+                Write-Fail \"Action not recognised: $($_)\"\n+            }\n+    }\n+}\n+finally\n+{\n+    # output duration, and cleanup\n+    Write-Details \"`nDuration: $(([DateTime]::UtcNow - $timer).ToString())\"\n+    Remove-Module -Name 'FudgeTools' -ErrorAction SilentlyContinue | Out-Null\n+}","author":{"login":"abhishalya","avatarUrl":"https://avatars0.githubusercontent.com/u/34682737?v=4","name":"Abhinav Kaushlya"},"createdAt":"2019-07-22T15:29:38Z","lastEditedAt":null,"updatedAt":"2019-07-22T15:29:38Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMDM1MDUyOA==","url":"https://github.com/coala/coala/pull/6030#discussion_r310350528","bodyText":"Sure fix it in the template","diffHunk":"@@ -32,32 +41,90 @@ branches:\n   except:\n     - /^sils\\/.*/\n \n+# This forces unix style line endings in the clone, which is necessary to\n+# avoid warning regarding EOLs when running git diff on Windows\n+init: git config --global core.autocrlf false\n+\n install:\n-  # Prepend newly installed Python to the PATH of this build (this cannot be\n-  # done from inside the powershell script as it would require to restart\n-  # the parent CMD process).\n-  - \"SET PATH=%PYTHON%;%PYTHON%\\\\Scripts;%PATH%\"\n-  - \"SET PATH=%PATH%;C:\\\\Program\\ Files\\\\Git\\\\mingw64\\\\bin\"\n+  # Show initial state\n+  - powershell -c \"$PSVersionTable\"\n+  # Uncomment to debug\n+  # printenv\n+  - python --version\n+  - \"python -c \\\"import struct; print(struct.calcsize('P') * 8)\\\"\"\n+  - python -m pip --version\n+  - python -c \"import setuptools; print(setuptools.__version__)\"\n+  - node --version\n+  - which npm\n+  - npm --version\n+  - npm config get prefix\n+  - which gcc & exit 0\n+  - gcc --version & exit 0\n+  - which cl & exit 0\n+\n+  # Stores environment in registry, with minor tweaks\n+  - python .misc/store_env_in_registry.py\n+  - refreshenv\n+\n+  # Set up AppVeyor product versions, and install dummy choco entries for them\n+  - ps: . .misc/FudgeCI.ps1; Initialize-AppVeyorVM\n+  - refreshenv\n+  - echo %PATH%\n+  # Avoid tools finding and using MinGW\n+  - mv C:\\MinGW %TEMP%\n+  # TODO: Avoid tools finding and using Visual Studio\n+\n+  # Show updated SOE; versions should be as defined in top of the Fudgefile\n+  - python --version\n+  - \"python -c \\\"import struct; print(struct.calcsize('P') * 8)\\\"\"\n+  - node --version\n+  - which npm\n+  - npm --version\n+  - npm config get prefix\n+  - which gcc & exit 0\n+  - gcc --version & exit 0\n+\n+  - \"%MSYS_BIN%\\\\date.exe\"\n+  # Install remainer of the Fudgefile with chocolatey using Fudge\n+  - ps: . .misc/Fudge.ps1 install\n+  - refreshenv\n+  - echo %PATH%\n+\n \n   # Check that we have the expected version and architecture for Python\n   - \"python --version\"\n   - \"python -c \\\"import struct; print(struct.calcsize('P') * 8)\\\"\"\n-  - \"%CMD_IN_ENV% python -m pip install --upgrade setuptools==21 pip==9.0.1\"\n-  - \"%CMD_IN_ENV% python -m pip install -r test-requirements.txt \\\n-    -r requirements.txt -r docs-requirements.txt\"\n+  # Confirm other versions\n+  - node --version\n+  - which npm\n+  - npm --version\n+  - npm config get prefix\n+  # Newly installed versions\n+\n+\n+  - \"%MSYS_BIN%\\\\date.exe\"\n \n build: false  # Not a C# project, build stuff at the test step instead.\n \n test_script:\n-  - \"%CMD_IN_ENV% py.test\"\n-  - \"%CMD_IN_ENV% python setup.py install\"\n-  - \"%CMD_IN_ENV% python -m pip install \\\n-    git+https://github.com/coala/coala-bears\"\n+  - python -m pip --version\n+  - python -c \"import setuptools; print(setuptools.__version__)\"\n+\n+  - py.test","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2019-08-03T12:48:16Z","lastEditedAt":null,"updatedAt":"2019-08-03T12:48:16Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMDM1MDU1Mw==","url":"https://github.com/coala/coala/pull/6030#discussion_r310350553","bodyText":"this is code imported from https://github.com/Badgerati/Fudge ; raise issues or PRs there :P","diffHunk":"@@ -0,0 +1,448 @@\n+<#\n+    .SYNOPSIS\n+        Fudge is a tool to help you manage and version control Chocolatey packages required for environments to function\n+\n+    .DESCRIPTION\n+        Fudge is a tool to help you manage and version control Chocolatey packages required for environments to function.\n+        This is done via a Fudgefile which allows you to specify packages (and their versions) to install. You can also\n+        specify dev-specific packages (like git, or fiddler)\n+\n+        You are also able to define pre/post install/upgrade/downgrade/uninstall scripts for additional required functionality\n+\n+        Furthermore, Fudge has a section to allow you to specify multiple nuspec files and pack the one you need\n+\n+    .PARAMETER Action\n+        The action that Fudge should undertake\n+        Actions: install, upgrade, downgrade, uninstall, reinstall, pack, list, search, new, delete, prune, clean, rebuild,\n+                 which, help, renew, add, remove\n+        [Alias: -a]\n+\n+    .PARAMETER Key\n+        The key represents a package/nuspec name in the Fudgefile\n+        [Actions: install, upgrade, downgrade, uninstall, reinstall, pack, new, which, renew, add, remove]\n+        [Alias: -k]\n+\n+    .PARAMETER FudgefilePath\n+        This will override looking for a default 'Fudgefile' at the root of the current path, and allow you to specify\n+        other files instead. This allows you to have multiple Fudgefiles\n+        [Actions: install, upgrade, downgrade, uninstall, reinstall, pack, list, new, delete, prune, rebuild, renew, add, remove]\n+        [Default: ./Fudgefile]\n+        [Alias: -fp]\n+\n+    .PARAMETER Limit\n+        This argument only applies for the 'search' action. It will limit the amount of packages returned when searching\n+        If 0 is supplied, the full list is returned\n+        [Actions: search]\n+        [Default: 10]\n+        [Alias: -l]\n+\n+    .PARAMETER Source\n+        Passing this argument will allow you to specify custom source locations to get/download packages for Chocolatey.\n+        This allows you to install packages from local directories, or from custom Chocolatey servers. Passing this will\n+        also override the source specified in any Fudgefiles\n+        [Default: Chocolatey's server]\n+        [Actions: install, upgrade, downgrade, reinstall, search, rebuild, add]\n+        [Alias: -s]\n+\n+    .PARAMETER Parameters\n+        This argument allows you to pass parameters to a chocolatey package, as if you were using \"--params\" on choco.\n+        For install/upgrade/downgrade/uninstall/reinstall, this argument only works when \"-Adhoc\" is also supplied\n+        [Default: Empty]\n+        [Actions: install, upgrade, downgrade, uninstall, reinstall, add]\n+        [Alias: -p]\n+\n+    .PARAMETER Arguments\n+        This argument allows you to pass extra arguments to a chocolatey, such as \"--x86\" or \"--ignore-checksum\"\n+        For install/upgrade/downgrade/uninstall/reinstall, this argument only works when \"-Adhoc\" is also supplied\n+        [Default: Empty]\n+        [Actions: install, upgrade, downgrade, uninstall, reinstall, add]\n+        [Alias: -args]\n+\n+    .PARAMETER Dev\n+        Switch parameter, if supplied will also action upon the devPackages in the Fudgefile\n+        [Actions: install, upgrade, downgrade, uninstall, reinstall, list, delete, prune, rebuild, add, remove]\n+        [Alias: -d]\n+\n+    .PARAMETER DevOnly\n+        Switch parameter, if supplied will only action upon the devPackages in the Fudgefile\n+        [Actions: install, upgrade, downgrade, uninstall, reinstall, list, delete, prune, rebuild]\n+        [Alias: -do]\n+\n+    .PARAMETER Install\n+        Switch parameter, if supplied will install packages after creating a new Fudgefile\n+        [Actions: new, renew, add]\n+        [Alias: -i]\n+\n+    .PARAMETER Uninstall\n+        Switch parameter, if supplied will uninstall packages before deleting a Fudgefile\n+        [Actions: delete, renew, remove]\n+        [Alias: -u]\n+\n+    .PARAMETER Adhoc\n+        Switch parameter, if supplied will install software from Chocolatey whether or not\n+        the package is in the Fudgefile\n+        [Actions: install, upgrade, downgrade, uninstall, reinstall]\n+        [Alias: -ad]\n+\n+    .PARAMETER Version\n+        Switch parameter, if supplied will just display the current version of Fudge installed\n+        [Alias: -v]\n+\n+    .PARAMETER Help\n+        Switch parameter, if supplied will just display help output\n+        [Alias: -h]\n+\n+    .EXAMPLE\n+        fudge install\n+\n+    .EXAMPLE\n+        fudge install -d    # to also install devPackages (-do will only install devPackages)\n+\n+    .EXAMPLE\n+        fudge install git -ad   # installs git dispite not being in the Fudgefile\n+\n+    .EXAMPLE\n+        fudge pack website\n+\n+    .EXAMPLE\n+        fudge list\n+\n+    .EXAMPLE\n+        fudge search checksum\n+#>\n+param (\n+    [Alias('a')]\n+    [string]\n+    $Action,\n+\n+    [Alias('k')]\n+    [string]\n+    $Key,\n+\n+    [Alias('fp')]\n+    [string]\n+    $FudgefilePath,\n+\n+    [Alias('l')]\n+    [int]\n+    $Limit = 10,\n+\n+    [Alias('s')]\n+    [string]\n+    $Source,\n+\n+    [Alias('p')]\n+    [string]\n+    $Parameters,\n+\n+    [Alias('args')]\n+    [string]\n+    $Arguments,\n+\n+    [Alias('d')]\n+    [switch]\n+    $Dev,\n+\n+    [Alias('do')]\n+    [switch]\n+    $DevOnly,\n+\n+    [Alias('i')]\n+    [switch]\n+    $Install,\n+\n+    [Alias('u')]\n+    [switch]\n+    $Uninstall,\n+\n+    [Alias('v')]\n+    [switch]\n+    $Version,\n+\n+    [Alias('h')]\n+    [switch]\n+    $Help,\n+\n+    [Alias('ad')]\n+    [switch]\n+    $Adhoc\n+)\n+\n+# ensure if there's an error, we stop\n+$ErrorActionPreference = 'Stop'\n+\n+\n+# Import required modules\n+$root = Split-Path -Parent -Path $MyInvocation.MyCommand.Path\n+Import-Module \"$($root)\\Modules\\FudgeTools.psm1\" -Force -ErrorAction Stop\n+\n+\n+# output the version\n+$ver = 'v$version$'\n+Write-Success \"Fudge $($ver)\"\n+\n+# if we were only after the version, just return\n+if ($Version -or (@('v', 'version') -icontains $Action))\n+{\n+    return\n+}\n+\n+\n+# if action is just to display Help, show it and return\n+if ($Help -or (@('h', 'help') -icontains $Action))\n+{\n+    Write-Host \"`nUsage: fudge <action>\"\n+    Write-Host \"`nWhere <action> is one of:\"\n+    Write-Host \"    add, clean, delete, downgrade, help, install, list, new, pack,\"\n+    Write-Host \"    prune, rebuild, reinstall, remove, renew, search, uninstall,\"\n+    Write-Host \"    upgrade, version, which\"\n+    Write-Host \"\"\n+    return\n+}\n+\n+\n+try\n+{\n+    # start timer\n+    $timer = [DateTime]::UtcNow\n+\n+\n+    # ensure we have a valid action\n+    $packageActions = @('install', 'upgrade', 'uninstall', 'reinstall', 'list', 'rebuild', 'downgrade', 'add', 'remove')\n+    $maintainActions = @('prune')\n+    $packingActions = @('pack')\n+    $miscActions = @('search', 'clean', 'which')\n+    $newActions = @('new')\n+    $alterActions = @('delete', 'renew')\n+\n+    $actions = ($packageActions + $maintainActions + $packingActions + $miscActions + $newActions + $alterActions)\n+    if ((Test-Empty $Action) -or $actions -inotcontains $Action) {\n+        Write-Fail \"Unrecognised action supplied '$($Action)', should be either: $($actions -join ', ')\"\n+        return\n+    }\n+\n+\n+    # actions that require chocolatey\n+    $isChocoAction = (@('which', 'add', 'remove', 'delete') -inotcontains $Action)\n+    if (!$isChocoAction -and ($Install -or $Uninstall)) {\n+        $isChocoAction = $true\n+    }\n+\n+\n+    # if adhoc was supplied for an invalid action\n+    if ($Adhoc -and @('install', 'uninstall', 'upgrade', 'downgrade', 'reinstall') -inotcontains $Action) {\n+        Write-Fail \"Adhoc supplied for invalid action: $($Action)\"\n+        return\n+    }\n+\n+    # if adhoc supplied with no package name, fail\n+    if ($Adhoc -and [string]::IsNullOrWhiteSpace($Key)) {\n+        Write-Fail \"No package name supplied for adhoc $($Action)\"\n+        return\n+    }\n+\n+\n+    # if -devOnly is passed, set -dev to true\n+    if ($DevOnly) {\n+        $Dev = $true\n+    }\n+\n+\n+    # get the Fudgefile path, if adhoc is supplied set to empty\n+    $FudgefilePath = Get-FudgefilePath $FudgefilePath -Adhoc:$Adhoc\n+\n+\n+    # ensure that the Fudgefile exists (for certain actions), and deserialise it\n+    if (($packageActions + $maintainActions + $packingActions + $alterActions) -icontains $Action)\n+    {\n+        $config = $null\n+\n+        # if adhoc is supplied, we don't need to get the content\n+        if (!$Adhoc) {\n+            if (!(Test-Path $FudgefilePath)) {\n+                Write-Fail \"Path to Fudgefile does not exist: $($FudgefilePath)\"\n+                return\n+            }\n+\n+            $config = Get-FudgefileContent $FudgefilePath\n+        }\n+\n+        # if we have a custom source in the config and no CLI source, set the source\n+        if ((Test-Empty $Source) -and ($null -ne $config) -and !(Test-Empty $config.source)) {\n+            $Source = $config.source\n+        }\n+    }\n+\n+    # ensure that the Fudgefile doesn't exist\n+    elseif ($newActions -icontains $Action)\n+    {\n+        if (Test-Path $FudgefilePath) {\n+            Write-Fail \"Path to Fudgefile already exists: $($FudgefilePath)\"\n+            return\n+        }\n+    }\n+\n+\n+    # if there are no packages to install or nuspecs to pack, just return\n+    if ($null -ne $config)\n+    {\n+        # check nuspecs\n+        if ($packingActions -icontains $Action)\n+        {\n+            if (Test-Empty $config.pack) {\n+                Write-Notice \"There are no nuspecs to $($Action)\"\n+                return\n+            }\n+\n+            if (![string]::IsNullOrWhiteSpace($Key) -and [string]::IsNullOrWhiteSpace($config.pack.$Key)) {\n+                Write-Notice \"Fudgefile does not contain a nuspec pack file for '$($Key)'\"\n+                return\n+            }\n+        }\n+\n+        # check packages\n+        elseif ($packageActions -icontains $Action)\n+        {\n+            if ((Test-Empty $config.packages) -and (!$Dev -or ($Dev -and (Test-Empty $config.devPackages)))) {\n+                Write-Notice \"There are no packages to $($Action)\"\n+                return\n+            }\n+\n+            if ($DevOnly -and (Test-Empty $config.devPackages)) {\n+                Write-Notice \"There are no devPackages to $($Action)\"\n+                return\n+            }\n+        }\n+    }\n+\n+\n+    # check to see if chocolatey is installed\n+    if ($isChocoAction) {\n+        $isChocoInstalled = Test-Chocolatey\n+    }\n+\n+\n+    # check if the console is elevated (only needs to be done for certain actions)\n+    $isAdminAction = @('list', 'search', 'new', 'delete', 'renew', 'which', 'add', 'remove', 'pack') -inotcontains $Action\n+    $actionNeedsAdmin = (@('delete', 'remove') -icontains $Action -and $Uninstall) -or (@('new', 'renew', 'add') -icontains $Action -and $Install)\n+\n+    if (((!$isChocoInstalled -and $isChocoAction) -or $isAdminAction -or $actionNeedsAdmin) -and !(Test-AdminUser))\n+    {\n+        Write-Notice 'Must be running with administrator privileges for Fudge to fully function'\n+        return\n+    }\n+\n+\n+    # if chocolatey isn't installed, install it\n+    if (!$isChocoInstalled -and $isChocoAction) {\n+        Install-Chocolatey\n+    }\n+\n+\n+    # if we are using a global custom source, output it for info\n+    if (!(Test-Empty $Source)) {\n+        Write-Notice \"Source: $($Source)\"\n+    }\n+\n+    Write-Host ([string]::Empty)\n+\n+\n+    # retrieve a local list of what's currently installed\n+    if ($isChocoAction) {\n+        $localList = Get-ChocolateyLocalList\n+    }\n+\n+\n+    # invoke chocolatey based on the action required\n+    switch ($Action)\n+    {\n+        {($_ -ieq 'install') -or ($_ -ieq 'uninstall') -or ($_ -ieq 'upgrade')  -or ($_ -ieq 'downgrade')}\n+            {\n+                Invoke-ChocolateyAction -Action $Action -Key $Key -Source $Source -Config $config -LocalList $localList `\n+                    -Parameters $Parameters -Arguments $Arguments -Dev:$Dev -DevOnly:$DevOnly -Adhoc:$Adhoc\n+            }\n+\n+        {($_ -ieq 'reinstall')}\n+            {\n+                Invoke-ChocolateyAction -Action 'uninstall' -Key $Key -Source $Source -Config $config -LocalList $localList `\n+                    -Parameters $Parameters -Arguments $Arguments -Dev:$Dev -DevOnly:$DevOnly -Adhoc:$Adhoc\n+\n+                Invoke-ChocolateyAction -Action 'install' -Key $Key -Source $Source -Config $config -LocalList $localList `\n+                    -Parameters $Parameters -Arguments $Arguments -Dev:$Dev -DevOnly:$DevOnly -Adhoc:$Adhoc\n+            }\n+\n+        {($_ -ieq 'pack')}\n+            {\n+                Invoke-ChocolateyAction -Action 'pack' -Key $Key -Config $config\n+            }\n+\n+        {($_ -ieq 'list')}\n+            {\n+                Invoke-FudgeLocalDetails -Config $config -Key $Key -LocalList $localList -Dev:$Dev -DevOnly:$DevOnly\n+            }\n+\n+        {($_ -ieq 'search')}\n+            {\n+                Invoke-Search -Key $Key -Limit $Limit -Source $Source -LocalList $localList\n+            }\n+\n+        {($_ -ieq 'new')}\n+            {\n+                New-Fudgefile -Path $FudgefilePath -Key $Key -LocalList $localList -Install:$Install -Dev:$Dev -DevOnly:$DevOnly\n+            }\n+\n+        {($_ -ieq 'renew')}\n+            {\n+                Restore-Fudgefile -Path $FudgefilePath -Key $Key -LocalList $localList -Install:$Install -Uninstall:$Uninstall -Dev:$Dev -DevOnly:$DevOnly\n+            }\n+\n+        {($_ -ieq 'delete')}\n+            {\n+                Remove-Fudgefile -Path $FudgefilePath -Uninstall:$Uninstall -Dev:$Dev -DevOnly:$DevOnly\n+            }\n+\n+        {($_ -ieq 'prune')}\n+            {\n+                Invoke-FudgePrune -Config $config -LocalList $localList -Dev:$Dev -DevOnly:$DevOnly\n+            }\n+\n+        {($_ -ieq 'clean')}\n+            {\n+                Invoke-FudgeClean -LocalList $localList\n+            }\n+\n+        {($_ -ieq 'add')}\n+            {\n+                Invoke-FudgeAdd -Path $FudgefilePath -Key $Key -Source $Source -Config $config -LocalList $localList `\n+                    -Parameters $Parameters -Arguments $Arguments -Dev:$Dev -Install:$Install\n+            }\n+\n+        {($_ -ieq 'remove')}\n+            {\n+                Invoke-FudgeRemove -Path $FudgefilePath -Key $Key -Config $config -LocalList $localList `\n+                    -Parameters $Parameters -Arguments $Arguments -Dev:$Dev -Uninstall:$Uninstall\n+            }\n+\n+        {($_ -ieq 'which')}\n+            {\n+                Invoke-FudgeWhich -Key $Key\n+            }\n+\n+        {($_ -ieq 'rebuild')}\n+            {\n+                Invoke-FudgeClean -LocalList $localList\n+                Invoke-ChocolateyAction -Action 'install' -Key $Key -Source $Source -Config $config -Dev:$Dev -DevOnly:$DevOnly\n+            }\n+\n+        default\n+            {\n+                Write-Fail \"Action not recognised: $($_)\"\n+            }\n+    }\n+}\n+finally\n+{\n+    # output duration, and cleanup\n+    Write-Details \"`nDuration: $(([DateTime]::UtcNow - $timer).ToString())\"\n+    Remove-Module -Name 'FudgeTools' -ErrorAction SilentlyContinue | Out-Null\n+}","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2019-08-03T12:49:14Z","lastEditedAt":null,"updatedAt":"2019-08-03T12:49:14Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMDM1MDU4OA==","url":"https://github.com/coala/coala/pull/6030#discussion_r310350588","bodyText":"Nope - a hack until we get a real solution, or drop py34 (but py34 is helpful for the bears travis trusty (and precise?) builds, which are needed for some of the languages)","diffHunk":"@@ -32,32 +41,90 @@ branches:\n   except:\n     - /^sils\\/.*/\n \n+# This forces unix style line endings in the clone, which is necessary to\n+# avoid warning regarding EOLs when running git diff on Windows\n+init: git config --global core.autocrlf false\n+\n install:\n-  # Prepend newly installed Python to the PATH of this build (this cannot be\n-  # done from inside the powershell script as it would require to restart\n-  # the parent CMD process).\n-  - \"SET PATH=%PYTHON%;%PYTHON%\\\\Scripts;%PATH%\"\n-  - \"SET PATH=%PATH%;C:\\\\Program\\ Files\\\\Git\\\\mingw64\\\\bin\"\n+  # Show initial state\n+  - powershell -c \"$PSVersionTable\"\n+  # Uncomment to debug\n+  # printenv\n+  - python --version\n+  - \"python -c \\\"import struct; print(struct.calcsize('P') * 8)\\\"\"\n+  - python -m pip --version\n+  - python -c \"import setuptools; print(setuptools.__version__)\"\n+  - node --version\n+  - which npm\n+  - npm --version\n+  - npm config get prefix\n+  - which gcc & exit 0\n+  - gcc --version & exit 0\n+  - which cl & exit 0\n+\n+  # Stores environment in registry, with minor tweaks\n+  - python .misc/store_env_in_registry.py\n+  - refreshenv\n+\n+  # Set up AppVeyor product versions, and install dummy choco entries for them\n+  - ps: . .misc/FudgeCI.ps1; Initialize-AppVeyorVM\n+  - refreshenv\n+  - echo %PATH%\n+  # Avoid tools finding and using MinGW\n+  - mv C:\\MinGW %TEMP%\n+  # TODO: Avoid tools finding and using Visual Studio\n+\n+  # Show updated SOE; versions should be as defined in top of the Fudgefile\n+  - python --version\n+  - \"python -c \\\"import struct; print(struct.calcsize('P') * 8)\\\"\"\n+  - node --version\n+  - which npm\n+  - npm --version\n+  - npm config get prefix\n+  - which gcc & exit 0\n+  - gcc --version & exit 0\n+\n+  - \"%MSYS_BIN%\\\\date.exe\"\n+  # Install remainer of the Fudgefile with chocolatey using Fudge\n+  - ps: . .misc/Fudge.ps1 install\n+  - refreshenv\n+  - echo %PATH%\n+\n \n   # Check that we have the expected version and architecture for Python\n   - \"python --version\"\n   - \"python -c \\\"import struct; print(struct.calcsize('P') * 8)\\\"\"\n-  - \"%CMD_IN_ENV% python -m pip install --upgrade setuptools==21 pip==9.0.1\"\n-  - \"%CMD_IN_ENV% python -m pip install -r test-requirements.txt \\\n-    -r requirements.txt -r docs-requirements.txt\"\n+  # Confirm other versions\n+  - node --version\n+  - which npm\n+  - npm --version\n+  - npm config get prefix\n+  # Newly installed versions\n+\n+\n+  - \"%MSYS_BIN%\\\\date.exe\"\n \n build: false  # Not a C# project, build stuff at the test step instead.\n \n test_script:\n-  - \"%CMD_IN_ENV% py.test\"\n-  - \"%CMD_IN_ENV% python setup.py install\"\n-  - \"%CMD_IN_ENV% python -m pip install \\\n-    git+https://github.com/coala/coala-bears\"\n+  - python -m pip --version\n+  - python -c \"import setuptools; print(setuptools.__version__)\"\n+\n+  - py.test\n+\n+  - python setup.py install\n+\n+  - python -m pip install\n+      git+https://github.com/coala/coala-bears#egg=coala-bears\n   - npm install csslint -g\n   # https://github.com/coala/coala/issues/5619\n   - rm docs/Developers/coala_settings.rst\n-  - sed -i '/ShellCheckBear/d' .coafile\n-  - \"%CMD_IN_ENV% coala --ci\"\n+  # https://github.com/coala/coala/issues/5985 and\n+  # https://github.com/coala/coala/issues/6028 and others:\n+  - rm coalib/misc/Asyncio.py","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2019-08-03T12:50:22Z","lastEditedAt":null,"updatedAt":"2019-08-03T12:50:22Z"}]}}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1566269056000,"issue":{"htmlUrl":"https://github.com/coala/coala/pull/6032","number":6032,"title":"TOML.py: Add Language definition","body":"Add TOML language to coala language definitions\nCloses #6031\n\nFor short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":4,"createdAt":"2019-06-21T11:51:20Z","updatedAt":"2019-08-20T02:44:16Z","closedAt":null,"state":"open","user":{"login":"PrajwalM2212","avatarUrl":"https://avatars3.githubusercontent.com/u/30733262?v=4"},"owner":{"login":"PrajwalM2212","avatarUrl":"https://avatars3.githubusercontent.com/u/30733262?v=4"},"labels":[],"pullRequest":{"htmlUrl":"https://github.com/coala/coala/pull/6032","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDUwNDg2MjU1NA==","url":"https://github.com/coala/coala/pull/6032#issuecomment-504862554","bodyText":"@jayvdb @RaiVaibhav @Nosferatul @virresh @ksdme @margobra8 Can you review this?","diffHunk":null,"author":{"login":"PrajwalM2212","avatarUrl":"https://avatars3.githubusercontent.com/u/30733262?v=4","name":"PRAJWAL M"},"createdAt":"2019-06-24T05:26:10Z","lastEditedAt":null,"updatedAt":"2019-06-24T05:26:10Z"},{"id":"MDEyOklzc3VlQ29tbWVudDUwNTU3NTYyOQ==","url":"https://github.com/coala/coala/pull/6032#issuecomment-505575629","bodyText":"Push again to trigger appveyor retest","diffHunk":null,"author":{"login":"margobra8","avatarUrl":"https://avatars1.githubusercontent.com/u/11057853?v=4","name":"Marcos Gómez"},"createdAt":"2019-06-25T18:53:45Z","lastEditedAt":null,"updatedAt":"2019-06-25T18:53:45Z"},{"id":"MDEyOklzc3VlQ29tbWVudDUwNTYwNTk0Nw==","url":"https://github.com/coala/coala/pull/6032#issuecomment-505605947","bodyText":"Push again to trigger appveyor retest\n\nAppveyor is currently broken. It is being fixed.","diffHunk":null,"author":{"login":"PrajwalM2212","avatarUrl":"https://avatars3.githubusercontent.com/u/30733262?v=4","name":"PRAJWAL M"},"createdAt":"2019-06-25T20:18:02Z","lastEditedAt":null,"updatedAt":"2019-06-25T20:18:02Z"}]}}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1565898891000,"issue":{"htmlUrl":"https://github.com/coala/coala/pull/6037","number":6037,"title":"ConsoleInteraction.py: Show context for diffs","body":"Shows context for the affected lines\nCloses #2745\n\nFor short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":0,"createdAt":"2019-06-28T03:49:33Z","updatedAt":"2019-08-15T19:54:51Z","closedAt":null,"state":"open","user":{"login":"Utkarsh1308","avatarUrl":"https://avatars0.githubusercontent.com/u/23418707?v=4"},"owner":{"login":"Utkarsh1308","avatarUrl":"https://avatars0.githubusercontent.com/u/23418707?v=4"},"labels":[],"pullRequest":{"htmlUrl":"https://github.com/coala/coala/pull/6037","comments":[{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5ODU0OTA3Ng==","url":"https://github.com/coala/coala/pull/6037#discussion_r298549076","bodyText":"The code in else block looks almost the same as code in if block - why not merge them together?","diffHunk":"@@ -466,6 +554,27 @@ def print_results_no_input(log_printer,\n     \"\"\"\n     for result in result_list:\n \n+        console_printer.print('\\n'+format_lines(result.message, symbol='!'))\n+        if hasattr(section, 'name'):\n+            console_printer.print(\n+                '**** {bear} [Section: {section} | Severity: '\n+                '{severity}] ****'\n+                .format(\n+                    bear=result.origin,\n+                    section=section.name,\n+                    severity=RESULT_SEVERITY.__str__(\n+                                              result.severity\n+                                              )\n+                        ),\n+                color=RESULT_SEVERITY_COLORS[result.severity])\n+        else:   # pragma: no cover\n+            console_printer.print(\n+                '**** {bear} [Section {section} | Severity '\n+                '{severity}] ****'\n+                .format(bear=result.origin, section='<empty>',\n+                        severity=RESULT_SEVERITY.__str__(result.severity)),\n+                color=RESULT_SEVERITY_COLORS[result.severity])","author":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4","name":"Boxuan Li"},"createdAt":"2019-06-28T10:57:22Z","lastEditedAt":"2019-06-28T10:57:47Z","updatedAt":"2019-06-28T10:57:47Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5ODU2MjQwNA==","url":"https://github.com/coala/coala/pull/6037#discussion_r298562404","bodyText":"Fixed it. The code can be merged in print_results function as well","diffHunk":"@@ -466,6 +554,27 @@ def print_results_no_input(log_printer,\n     \"\"\"\n     for result in result_list:\n \n+        console_printer.print('\\n'+format_lines(result.message, symbol='!'))\n+        if hasattr(section, 'name'):\n+            console_printer.print(\n+                '**** {bear} [Section: {section} | Severity: '\n+                '{severity}] ****'\n+                .format(\n+                    bear=result.origin,\n+                    section=section.name,\n+                    severity=RESULT_SEVERITY.__str__(\n+                                              result.severity\n+                                              )\n+                        ),\n+                color=RESULT_SEVERITY_COLORS[result.severity])\n+        else:   # pragma: no cover\n+            console_printer.print(\n+                '**** {bear} [Section {section} | Severity '\n+                '{severity}] ****'\n+                .format(bear=result.origin, section='<empty>',\n+                        severity=RESULT_SEVERITY.__str__(result.severity)),\n+                color=RESULT_SEVERITY_COLORS[result.severity])","author":{"login":"Utkarsh1308","avatarUrl":"https://avatars0.githubusercontent.com/u/23418707?v=4","name":"Utkarsh Sharma"},"createdAt":"2019-06-28T11:51:47Z","lastEditedAt":null,"updatedAt":"2019-06-28T11:51:47Z"}]}}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1567263033000,"issue":{"htmlUrl":"https://github.com/coala/coala/pull/6039","number":6039,"title":"ConsoleInteraction: Modify color_letter function","body":"This modifies color_letter function to run as correctly\nwhen there is a uppercase letter after \"the\" uppercase\nletter in parenthesis and also if action has a associated warning then\nit gets highlighted.\nFixes #6034","comments":5,"createdAt":"2019-06-30T12:06:52Z","updatedAt":"2019-08-31T14:50:33Z","closedAt":"2019-08-31T14:50:33Z","state":"merged","user":{"login":"akshatkarani","avatarUrl":"https://avatars3.githubusercontent.com/u/29230845?v=4"},"owner":{"login":"akshatkarani","avatarUrl":"https://avatars3.githubusercontent.com/u/29230845?v=4"},"labels":[],"pullRequest":{"htmlUrl":"https://github.com/coala/coala/pull/6039","comments":[{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwNzk5MjYxMg==","url":"https://github.com/coala/coala/pull/6039#discussion_r307992612","bodyText":"Shouldn't it be -1 if not found?","diffHunk":"@@ -97,22 +97,24 @@ def highlight_text(no_color, text, style, lexer=TextLexer()):\n \n \n def color_letter(console_printer, line):\n-    x = -1\n-    y = -1\n-    letter = ''\n-    for i, l in enumerate(line, 0):\n-        if line[i] == '(':\n-            x = i\n-        if line[i] == ')':\n-            y = i\n-        if l.isupper() and x != -1:\n-            letter = l\n+    x = line.find('(')\n+    if x == -1:\n+        letter = ''\n+        y = x + 1\n+    else:\n+        letter = line[x + 1]\n+        y = x + 2\n+    warn = line.rfind('[')\n+    if warn == 0:","author":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4","name":"Boxuan Li"},"createdAt":"2019-07-28T09:06:15Z","lastEditedAt":null,"updatedAt":"2019-07-28T09:06:15Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwNzk5MjYyMw==","url":"https://github.com/coala/coala/pull/6039#discussion_r307992623","bodyText":"I am not familiar with this part, but is it able to verify the color of output?","diffHunk":"@@ -189,6 +190,22 @@ def tearDown(self):\n         OpenEditorAction.is_applicable = self.old_open_editor_applicable\n         ApplyPatchAction.is_applicable = self.old_apply_patch_applicable\n \n+    def test_color_letter(self):\n+        line1 = '[  ] 1. (A)pply Patch'\n+        with retrieve_stdout() as stdout:\n+            color_letter(self.console_printer, line1)\n+            self.assertEqual(line1 + '\\n', stdout.getvalue())\n+\n+        line2 = '[  ] *0. Apply (P)atch'\n+        with retrieve_stdout() as stdout:\n+            color_letter(self.console_printer, line2)\n+            self.assertEqual(line2 + '\\n', stdout.getvalue())\n+\n+        line3 = '[  ] 3. Apply (P)atch [Note: This will do something]'\n+        with retrieve_stdout() as stdout:\n+            color_letter(self.console_printer, line3)\n+            self.assertEqual(line3 + '\\n', stdout.getvalue())","author":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4","name":"Boxuan Li"},"createdAt":"2019-07-28T09:06:46Z","lastEditedAt":null,"updatedAt":"2019-07-28T09:06:46Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwNzk5MzEwMA==","url":"https://github.com/coala/coala/pull/6039#discussion_r307993100","bodyText":"No, notice [ is always the first character when you are asked for an action.","diffHunk":"@@ -97,22 +97,24 @@ def highlight_text(no_color, text, style, lexer=TextLexer()):\n \n \n def color_letter(console_printer, line):\n-    x = -1\n-    y = -1\n-    letter = ''\n-    for i, l in enumerate(line, 0):\n-        if line[i] == '(':\n-            x = i\n-        if line[i] == ')':\n-            y = i\n-        if l.isupper() and x != -1:\n-            letter = l\n+    x = line.find('(')\n+    if x == -1:\n+        letter = ''\n+        y = x + 1\n+    else:\n+        letter = line[x + 1]\n+        y = x + 2\n+    warn = line.rfind('[')\n+    if warn == 0:","author":{"login":"akshatkarani","avatarUrl":"https://avatars3.githubusercontent.com/u/29230845?v=4","name":"Akshat Karani"},"createdAt":"2019-07-28T09:23:27Z","lastEditedAt":null,"updatedAt":"2019-07-28T09:23:27Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwNzk5MzExMA==","url":"https://github.com/coala/coala/pull/6039#discussion_r307993110","bodyText":"No, it just checks the parsing of the line.","diffHunk":"@@ -189,6 +190,22 @@ def tearDown(self):\n         OpenEditorAction.is_applicable = self.old_open_editor_applicable\n         ApplyPatchAction.is_applicable = self.old_apply_patch_applicable\n \n+    def test_color_letter(self):\n+        line1 = '[  ] 1. (A)pply Patch'\n+        with retrieve_stdout() as stdout:\n+            color_letter(self.console_printer, line1)\n+            self.assertEqual(line1 + '\\n', stdout.getvalue())\n+\n+        line2 = '[  ] *0. Apply (P)atch'\n+        with retrieve_stdout() as stdout:\n+            color_letter(self.console_printer, line2)\n+            self.assertEqual(line2 + '\\n', stdout.getvalue())\n+\n+        line3 = '[  ] 3. Apply (P)atch [Note: This will do something]'\n+        with retrieve_stdout() as stdout:\n+            color_letter(self.console_printer, line3)\n+            self.assertEqual(line3 + '\\n', stdout.getvalue())","author":{"login":"akshatkarani","avatarUrl":"https://avatars3.githubusercontent.com/u/29230845?v=4","name":"Akshat Karani"},"createdAt":"2019-07-28T09:23:55Z","lastEditedAt":null,"updatedAt":"2019-07-28T09:23:55Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwNzk5MzEzNQ==","url":"https://github.com/coala/coala/pull/6039#discussion_r307993135","bodyText":"I will look if there is a way to verify color as well","diffHunk":"@@ -189,6 +190,22 @@ def tearDown(self):\n         OpenEditorAction.is_applicable = self.old_open_editor_applicable\n         ApplyPatchAction.is_applicable = self.old_apply_patch_applicable\n \n+    def test_color_letter(self):\n+        line1 = '[  ] 1. (A)pply Patch'\n+        with retrieve_stdout() as stdout:\n+            color_letter(self.console_printer, line1)\n+            self.assertEqual(line1 + '\\n', stdout.getvalue())\n+\n+        line2 = '[  ] *0. Apply (P)atch'\n+        with retrieve_stdout() as stdout:\n+            color_letter(self.console_printer, line2)\n+            self.assertEqual(line2 + '\\n', stdout.getvalue())\n+\n+        line3 = '[  ] 3. Apply (P)atch [Note: This will do something]'\n+        with retrieve_stdout() as stdout:\n+            color_letter(self.console_printer, line3)\n+            self.assertEqual(line3 + '\\n', stdout.getvalue())","author":{"login":"akshatkarani","avatarUrl":"https://avatars3.githubusercontent.com/u/29230845?v=4","name":"Akshat Karani"},"createdAt":"2019-07-28T09:24:38Z","lastEditedAt":null,"updatedAt":"2019-07-28T09:24:38Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODMwNzA0Mg==","url":"https://github.com/coala/coala/pull/6039#discussion_r308307042","bodyText":"I tried using termcolor for generating colored string but there is always a difference in some bits.","diffHunk":"@@ -189,6 +190,22 @@ def tearDown(self):\n         OpenEditorAction.is_applicable = self.old_open_editor_applicable\n         ApplyPatchAction.is_applicable = self.old_apply_patch_applicable\n \n+    def test_color_letter(self):\n+        line1 = '[  ] 1. (A)pply Patch'\n+        with retrieve_stdout() as stdout:\n+            color_letter(self.console_printer, line1)\n+            self.assertEqual(line1 + '\\n', stdout.getvalue())\n+\n+        line2 = '[  ] *0. Apply (P)atch'\n+        with retrieve_stdout() as stdout:\n+            color_letter(self.console_printer, line2)\n+            self.assertEqual(line2 + '\\n', stdout.getvalue())\n+\n+        line3 = '[  ] 3. Apply (P)atch [Note: This will do something]'\n+        with retrieve_stdout() as stdout:\n+            color_letter(self.console_printer, line3)\n+            self.assertEqual(line3 + '\\n', stdout.getvalue())","author":{"login":"akshatkarani","avatarUrl":"https://avatars3.githubusercontent.com/u/29230845?v=4","name":"Akshat Karani"},"createdAt":"2019-07-29T15:55:49Z","lastEditedAt":null,"updatedAt":"2019-07-29T15:55:49Z"},{"id":"MDEyOklzc3VlQ29tbWVudDUwNzAzMTM1MQ==","url":"https://github.com/coala/coala/pull/6039#issuecomment-507031351","bodyText":"If action has warning the it looks something like","diffHunk":null,"author":{"login":"akshatkarani","avatarUrl":"https://avatars3.githubusercontent.com/u/29230845?v=4","name":"Akshat Karani"},"createdAt":"2019-06-30T12:14:26Z","lastEditedAt":null,"updatedAt":"2019-06-30T12:14:26Z"},{"id":"MDEyOklzc3VlQ29tbWVudDUwOTAxNTU1MQ==","url":"https://github.com/coala/coala/pull/6039#issuecomment-509015551","bodyText":"@abhishalya Can you review?","diffHunk":null,"author":{"login":"akshatkarani","avatarUrl":"https://avatars3.githubusercontent.com/u/29230845?v=4","name":"Akshat Karani"},"createdAt":"2019-07-07T17:05:31Z","lastEditedAt":null,"updatedAt":"2019-07-07T17:05:31Z"},{"id":"MDEyOklzc3VlQ29tbWVudDUwOTcwODY5OA==","url":"https://github.com/coala/coala/pull/6039#issuecomment-509708698","bodyText":"Haven't tested it, but the changes look good to me 👍","diffHunk":null,"author":{"login":"abhishalya","avatarUrl":"https://avatars0.githubusercontent.com/u/34682737?v=4","name":"Abhinav Kaushlya"},"createdAt":"2019-07-09T16:15:29Z","lastEditedAt":null,"updatedAt":"2019-07-09T16:15:29Z"},{"id":"MDEyOklzc3VlQ29tbWVudDUyNjQ0NDMwNw==","url":"https://github.com/coala/coala/pull/6039#issuecomment-526444307","bodyText":"👍 can be merged.","diffHunk":null,"author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"createdAt":"2019-08-30T03:44:29Z","lastEditedAt":null,"updatedAt":"2019-08-30T03:44:29Z"},{"id":"MDEyOklzc3VlQ29tbWVudDUyNjUzODEyMw==","url":"https://github.com/coala/coala/pull/6039#issuecomment-526538123","bodyText":"@jayvdb Can we have a final review on this..","diffHunk":null,"author":{"login":"abhishalya","avatarUrl":"https://avatars0.githubusercontent.com/u/34682737?v=4","name":"Abhinav Kaushlya"},"createdAt":"2019-08-30T09:45:11Z","lastEditedAt":null,"updatedAt":"2019-08-30T09:45:11Z"}]}}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1566236605000,"issue":{"htmlUrl":"https://github.com/coala/coala/pull/6043","number":6043,"title":"TomlConfWriter.py, ConfigConverter.py: Support TOML ","body":"For short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":5,"createdAt":"2019-07-17T15:30:04Z","updatedAt":"2019-08-19T17:43:25Z","closedAt":null,"state":"open","user":{"login":"PrajwalM2212","avatarUrl":"https://avatars3.githubusercontent.com/u/30733262?v=4"},"owner":{"login":"PrajwalM2212","avatarUrl":"https://avatars3.githubusercontent.com/u/30733262?v=4"},"labels":[],"pullRequest":{"htmlUrl":"https://github.com/coala/coala/pull/6043","comments":[{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwNTYyOTU0NA==","url":"https://github.com/coala/coala/pull/6043#discussion_r305629544","bodyText":"change not necessary.","diffHunk":"@@ -97,5 +97,35 @@ def mode_format(args, debug=False):\n     from coalib.output.ConsoleInteraction import print_results_formatted\n \n     _, exitcode, _ = run_coala(\n-            print_results=print_results_formatted, args=args, debug=debug)\n+        print_results=print_results_formatted, args=args, debug=debug)","author":{"login":"Nosferatul","avatarUrl":"https://avatars2.githubusercontent.com/u/15227444?v=4","name":"Alexandru-Sorin Maxim"},"reactions":[],"createdAt":"2019-07-21T18:06:52Z","lastEditedAt":null,"updatedAt":"2019-07-21T18:06:52Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwNTYyOTY5Ng==","url":"https://github.com/coala/coala/pull/6043#discussion_r305629696","bodyText":"this can't be simplified? it is possible for the user to ask from toml to toml or from coala to coala?","diffHunk":"@@ -97,5 +97,35 @@ def mode_format(args, debug=False):\n     from coalib.output.ConsoleInteraction import print_results_formatted\n \n     _, exitcode, _ = run_coala(\n-            print_results=print_results_formatted, args=args, debug=debug)\n+        print_results=print_results_formatted, args=args, debug=debug)\n     return exitcode\n+\n+\n+def mode_converter(args):\n+    \"\"\"\n+    Converts a TOML document into a coafile document\n+    and vice versa\n+\n+    :param args: Alternative pre-parsed CLI arguments.\n+    \"\"\"\n+    import os\n+    from coalib.output.ConfigConverter import ConfigConverter\n+    from coalib.settings.ConfigurationGathering import (load_config_file,\n+                                                        load_toml_config_file)\n+\n+    input_file = args.config_converter[0]\n+    output_file = args.config_converter[1]\n+    _, in_ext = os.path.splitext(input_file)\n+    _, out_ext = os.path.splitext(output_file)\n+\n+    if in_ext == '.toml':","author":{"login":"Nosferatul","avatarUrl":"https://avatars2.githubusercontent.com/u/15227444?v=4","name":"Alexandru-Sorin Maxim"},"reactions":[],"createdAt":"2019-07-21T18:11:38Z","lastEditedAt":"2019-07-21T19:20:23Z","updatedAt":"2019-07-21T19:20:23Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwNTYzMTQ0Mg==","url":"https://github.com/coala/coala/pull/6043#discussion_r305631442","bodyText":"lets wrap this into an internal function, you are using this check for delete below too.","diffHunk":"@@ -0,0 +1,162 @@\n+import re\n+\n+from coalib.output.ConfWriter import ConfWriter\n+from tomlkit import dumps\n+from tomlkit import table, key, document\n+from tomlkit.items import Key, KeyType\n+from coalib.output.TomlConfWriter import TomlConfWriter\n+\n+\n+class ConfigConverter:\n+\n+    def __init__(self, file):\n+        self.__key_delimiter = ','\n+        self.file = file\n+        self.document = document()\n+        self.unsavable_keys = ['save', 'toml_config']\n+\n+    def coafile_to_toml(self, sections):\n+        \"\"\"\n+        Creates a toml document from coafile\n+        sections\n+\n+        :param sections: sections obtained from coafile\n+        \"\"\"\n+        comment_regex = re.compile(r'comment[\\d]+')\n+\n+        if 'default' in sections.keys():\n+            if not sections['default'].contents == {}:","author":{"login":"Nosferatul","avatarUrl":"https://avatars2.githubusercontent.com/u/15227444?v=4","name":"Alexandru-Sorin Maxim"},"reactions":[],"createdAt":"2019-07-21T19:04:29Z","lastEditedAt":null,"updatedAt":"2019-07-21T19:04:29Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwNTYzMTUzNA==","url":"https://github.com/coala/coala/pull/6043#discussion_r305631534","bodyText":"i think you forgot to delete those","diffHunk":"@@ -0,0 +1,162 @@\n+import re\n+\n+from coalib.output.ConfWriter import ConfWriter\n+from tomlkit import dumps\n+from tomlkit import table, key, document\n+from tomlkit.items import Key, KeyType\n+from coalib.output.TomlConfWriter import TomlConfWriter\n+\n+\n+class ConfigConverter:\n+\n+    def __init__(self, file):\n+        self.__key_delimiter = ','\n+        self.file = file\n+        self.document = document()\n+        self.unsavable_keys = ['save', 'toml_config']\n+\n+    def coafile_to_toml(self, sections):\n+        \"\"\"\n+        Creates a toml document from coafile\n+        sections\n+\n+        :param sections: sections obtained from coafile\n+        \"\"\"\n+        comment_regex = re.compile(r'comment[\\d]+')\n+\n+        if 'default' in sections.keys():\n+            if not sections['default'].contents == {}:\n+                sections['default'].name = 'cli'\n+                sections['cli'] = sections['default']\n+            del sections['default']\n+\n+        for item in sections:\n+            section = sections[item]\n+            section.set_default_section(sections)\n+            table_name, inherits = self.get_section_name(section.name)\n+\n+            if table_name in self.document:\n+                existing_table = self.document[table_name]\n+                existing_table.get('inherits', []).append(inherits)\n+                existing_table.add(Key('appends.{}'.format(inherits),\n+                                       t=KeyType.Bare,\n+                                       dotted=True),\n+                                   self.get_appended_keys(section))\n+                continue\n+\n+            appends = []\n+            table_contents = table()\n+            defaults = section.defaults\n+            for _, setting in section.contents.items():\n+                setting_key = TomlConfWriter.get_setting_key(setting)\n+\n+                if comment_regex.search(setting_key.as_string()):\n+                    continue\n+\n+                if (defaults and\n+                    (setting.key in defaults and\n+                     str(section.get(setting.key)).startswith(\n+                         str(defaults[setting.key]) + ','))):\n+\n+                    appends.append(setting.key)\n+                    value = TomlConfWriter.get_original_value(\n+                        self.__get_append_val(str(section.get(setting.key)),\n+                                              str(defaults[setting.key])))\n+                # if setting.to_append:","author":{"login":"Nosferatul","avatarUrl":"https://avatars2.githubusercontent.com/u/15227444?v=4","name":"Alexandru-Sorin Maxim"},"reactions":[],"createdAt":"2019-07-21T19:07:07Z","lastEditedAt":null,"updatedAt":"2019-07-21T19:07:07Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwNTY3ODIyNA==","url":"https://github.com/coala/coala/pull/6043#discussion_r305678224","bodyText":"coafile format  does not specify the extension. This made detecting if a file is in coafile format  or not ambiguous. Hence I have chosen .coafile as an extension to recognise the file as a coafile format. This should remove the possibilities of toml to toml or coala to coala","diffHunk":"@@ -97,5 +97,35 @@ def mode_format(args, debug=False):\n     from coalib.output.ConsoleInteraction import print_results_formatted\n \n     _, exitcode, _ = run_coala(\n-            print_results=print_results_formatted, args=args, debug=debug)\n+        print_results=print_results_formatted, args=args, debug=debug)\n     return exitcode\n+\n+\n+def mode_converter(args):\n+    \"\"\"\n+    Converts a TOML document into a coafile document\n+    and vice versa\n+\n+    :param args: Alternative pre-parsed CLI arguments.\n+    \"\"\"\n+    import os\n+    from coalib.output.ConfigConverter import ConfigConverter\n+    from coalib.settings.ConfigurationGathering import (load_config_file,\n+                                                        load_toml_config_file)\n+\n+    input_file = args.config_converter[0]\n+    output_file = args.config_converter[1]\n+    _, in_ext = os.path.splitext(input_file)\n+    _, out_ext = os.path.splitext(output_file)\n+\n+    if in_ext == '.toml':","author":{"login":"PrajwalM2212","avatarUrl":"https://avatars3.githubusercontent.com/u/30733262?v=4","name":"PRAJWAL M"},"reactions":[{"id":"MDg6UmVhY3Rpb240NzQxNjMwMw==","createdAt":"2019-07-25T18:38:50Z","content":"THUMBS_UP","user":{"login":"Nosferatul","name":"Alexandru-Sorin Maxim"}}],"createdAt":"2019-07-22T05:30:42Z","lastEditedAt":"2019-07-22T05:49:43Z","updatedAt":"2019-07-22T05:49:43Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwNzQ0NjM1Ng==","url":"https://github.com/coala/coala/pull/6043#discussion_r307446356","bodyText":"I'm not sure what's this","diffHunk":"@@ -0,0 +1,166 @@\n+import re\n+\n+from coalib.output.ConfWriter import ConfWriter\n+from tomlkit import dumps\n+from tomlkit import table, key, document\n+from tomlkit.items import Key, KeyType\n+from coalib.output.TomlConfWriter import TomlConfWriter\n+\n+\n+class ConfigConverter:\n+\n+    \"\"\"\n+    Class that contains functions for generating\n+    coafile from toml sections and toml file from\n+    coala sections\n+    \"\"\"\n+\n+    def __init__(self, file):\n+        self.__key_delimiter = ','\n+        self.file = file\n+        self.document = document()\n+        self.unsavable_keys = ['save', 'toml_config']","author":{"login":"Nosferatul","avatarUrl":"https://avatars2.githubusercontent.com/u/15227444?v=4","name":"Alexandru-Sorin Maxim"},"reactions":[],"createdAt":"2019-07-25T18:43:21Z","lastEditedAt":null,"updatedAt":"2019-07-25T18:43:21Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwNzQ0OTkwOQ==","url":"https://github.com/coala/coala/pull/6043#discussion_r307449909","bodyText":"I don't like that this returns different types, are you sure this will return the expected type everytime?","diffHunk":"@@ -0,0 +1,177 @@\n+import os\n+\n+from coala_utils.string_processing import unescape\n+from coalib.parsing.TomlConfParser import TomlSetting\n+\n+from tomlkit import document, table, dumps, array, string, key, integer\n+from tomlkit.items import (Array, String, Bool, Integer, Comment, Key,\n+                           KeyType, Trivia)\n+\n+\n+class TomlConfWriter:\n+\n+    \"\"\"\n+    Class that contains functions for\n+    converting toml sections to toml\n+    file\n+    \"\"\"\n+\n+    def __init__(self, file):\n+        self.file = file\n+        if os.path.isdir(self.file):\n+            self.file = os.path.join(self.file, '.coafile.toml')\n+        self.unsavable_keys = ['save', 'toml_config']\n+        self.document = document()\n+\n+    def write(self, sections):\n+        \"\"\"\n+        Converts the given sections into a TOML\n+        document and writes the document into\n+        the specified file\n+\n+        :param sections: The sections that have to be\n+                         written into the file\n+        \"\"\"\n+\n+        if sections.get('cli', None):\n+            self.remove_unsavable_settings(sections)\n+\n+        for item in sections:\n+            section = sections[item]\n+            table_name = self.get_table_name(section)\n+            if table_name in self.document:\n+                continue\n+            table_contents = table()\n+            for _, setting in section.contents.items():\n+\n+                setting_key = self.get_setting_key(setting)\n+\n+                if isinstance(setting, TomlSetting):\n+                    value = setting.original_value\n+                else:\n+                    value = self.get_original_value(setting.value)\n+\n+                if isinstance(value, Array):\n+                    table_contents.add(setting_key, array(value.as_string()))\n+                    if value.trivia.comment:\n+                        table_contents[setting_key].comment(value.trivia\n+                                                            .comment)\n+                elif isinstance(value, String):\n+                    table_contents.add(setting_key, string(value))\n+                    if value.trivia.comment:\n+                        table_contents[setting_key].comment(value.trivia\n+                                                            .comment)\n+                elif isinstance(value, Bool):\n+                    table_contents.add(setting_key, value)\n+                elif isinstance(value, Integer):\n+                    table_contents.add(setting_key, integer(value.as_string()))\n+                    if value.trivia.comment:\n+                        table_contents[setting_key].comment(value.trivia\n+                                                            .comment)\n+                elif isinstance(value, Comment):\n+                    table_contents.add(Comment(\n+                        Trivia(comment_ws='  ', comment=str(value))\n+                    ))\n+                else:\n+                    table_contents.add(setting_key, value)\n+\n+            self.document.add(table_name, table_contents)\n+        self.write_to_file()\n+\n+    def write_to_file(self):\n+        \"\"\"\n+        Write the TOML document in the specified file\n+        \"\"\"\n+        with open(self.file, 'w') as f:\n+            f.write(dumps(self.document))\n+\n+    def remove_unsavable_settings(self, sections):\n+        \"\"\"\n+        Removes the un-savable keys from the sections\n+        before they are written into a file\n+\n+        :param sections: The sections that have to be\n+                         written into the file\n+        \"\"\"\n+\n+        cli_section_contents = sections['cli'].contents\n+        for unsavable_key in self.unsavable_keys:\n+            if unsavable_key in cli_section_contents:\n+                del cli_section_contents[unsavable_key]\n+\n+    @staticmethod\n+    def get_original_value(value):\n+        \"\"\"\n+        Converts a string into its original value\n+\n+        :param value: The value as a string\n+        :return: The original value deduced from the string","author":{"login":"Nosferatul","avatarUrl":"https://avatars2.githubusercontent.com/u/15227444?v=4","name":"Alexandru-Sorin Maxim"},"reactions":[],"createdAt":"2019-07-25T18:51:48Z","lastEditedAt":null,"updatedAt":"2019-07-25T18:51:48Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwNzQ1MTc3OQ==","url":"https://github.com/coala/coala/pull/6043#discussion_r307451779","bodyText":"I saw that some class variables are almost the same, do you think it would be a good idea to add a parent class to inherit some variables/methods?","diffHunk":"@@ -0,0 +1,166 @@\n+import re\n+\n+from coalib.output.ConfWriter import ConfWriter\n+from tomlkit import dumps\n+from tomlkit import table, key, document\n+from tomlkit.items import Key, KeyType\n+from coalib.output.TomlConfWriter import TomlConfWriter\n+\n+\n+class ConfigConverter:","author":{"login":"Nosferatul","avatarUrl":"https://avatars2.githubusercontent.com/u/15227444?v=4","name":"Alexandru-Sorin Maxim"},"reactions":[],"createdAt":"2019-07-25T18:56:18Z","lastEditedAt":null,"updatedAt":"2019-07-25T18:56:18Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwNzQ1Mjc0MQ==","url":"https://github.com/coala/coala/pull/6043#discussion_r307452741","bodyText":"it's not possible to get the original value from the setting value everytime?","diffHunk":"@@ -0,0 +1,177 @@\n+import os\n+\n+from coala_utils.string_processing import unescape\n+from coalib.parsing.TomlConfParser import TomlSetting\n+\n+from tomlkit import document, table, dumps, array, string, key, integer\n+from tomlkit.items import (Array, String, Bool, Integer, Comment, Key,\n+                           KeyType, Trivia)\n+\n+\n+class TomlConfWriter:\n+\n+    \"\"\"\n+    Class that contains functions for\n+    converting toml sections to toml\n+    file\n+    \"\"\"\n+\n+    def __init__(self, file):\n+        self.file = file\n+        if os.path.isdir(self.file):\n+            self.file = os.path.join(self.file, '.coafile.toml')\n+        self.unsavable_keys = ['save', 'toml_config']\n+        self.document = document()\n+\n+    def write(self, sections):\n+        \"\"\"\n+        Converts the given sections into a TOML\n+        document and writes the document into\n+        the specified file\n+\n+        :param sections: The sections that have to be\n+                         written into the file\n+        \"\"\"\n+\n+        if sections.get('cli', None):\n+            self.remove_unsavable_settings(sections)\n+\n+        for item in sections:\n+            section = sections[item]\n+            table_name = self.get_table_name(section)\n+            if table_name in self.document:\n+                continue\n+            table_contents = table()\n+            for _, setting in section.contents.items():\n+\n+                setting_key = self.get_setting_key(setting)\n+\n+                if isinstance(setting, TomlSetting):\n+                    value = setting.original_value\n+                else:\n+                    value = self.get_original_value(setting.value)","author":{"login":"Nosferatul","avatarUrl":"https://avatars2.githubusercontent.com/u/15227444?v=4","name":"Alexandru-Sorin Maxim"},"reactions":[],"createdAt":"2019-07-25T18:58:30Z","lastEditedAt":null,"updatedAt":"2019-07-25T18:58:30Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwNzQ2NDcwOQ==","url":"https://github.com/coala/coala/pull/6043#discussion_r307464709","bodyText":"When we run coala -s, it adds the setting save = true to the configuration file.\nThis has to be removed because it will cause saving functionality to be invoked every time coala is run. Hence these are unsavable keys. Similarly coala -T will add toml_config=True.\nHence TomlConfWriter also has this.\nI have added it here in ConfigConverter as well in case someone adds these settings under the cli-section.","diffHunk":"@@ -0,0 +1,166 @@\n+import re\n+\n+from coalib.output.ConfWriter import ConfWriter\n+from tomlkit import dumps\n+from tomlkit import table, key, document\n+from tomlkit.items import Key, KeyType\n+from coalib.output.TomlConfWriter import TomlConfWriter\n+\n+\n+class ConfigConverter:\n+\n+    \"\"\"\n+    Class that contains functions for generating\n+    coafile from toml sections and toml file from\n+    coala sections\n+    \"\"\"\n+\n+    def __init__(self, file):\n+        self.__key_delimiter = ','\n+        self.file = file\n+        self.document = document()\n+        self.unsavable_keys = ['save', 'toml_config']","author":{"login":"PrajwalM2212","avatarUrl":"https://avatars3.githubusercontent.com/u/30733262?v=4","name":"PRAJWAL M"},"reactions":[{"id":"MDg6UmVhY3Rpb240NzUxMTYzNA==","createdAt":"2019-07-26T20:19:35Z","content":"THUMBS_UP","user":{"login":"Nosferatul","name":"Alexandru-Sorin Maxim"}}],"createdAt":"2019-07-25T19:29:21Z","lastEditedAt":"2019-07-25T20:04:48Z","updatedAt":"2019-07-25T20:04:48Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwNzQ2ODUwMA==","url":"https://github.com/coala/coala/pull/6043#discussion_r307468500","bodyText":"coafile configuration sees every settings as a single string. But toml configuration has data-types.  So this function tries to infer the datatype from the string for toml in coafile to toml conversion.\nAre you sure this will return the expected type everytime?\nIt handles strings, booleans and list of strings and integers.\nThese are the settings types I have seen used by coala . If more types are used like floats, then then this function can make a provision for that as well.\nSo I think for now it returns the expected types.\nWhere it fails and why failing does not matter\nIf someone writes a = 20 in coafile and wants to mean 20 as a string and not a integer, then this function will fail as it always assumes 20 to be an integer.\nEven if the function fails, it will not break down the functionality. It may appear as an integer in a toml file, but when coala is run all settings will become one single string.\nSo function can fail only in purpose but not in functionality.\nAlso coafile configuration provides no means to specify the data-type in configuration file. So we can make the approximation that makes the best sense for our use-case as there is no source of truth or loss of functionality.","diffHunk":"@@ -0,0 +1,177 @@\n+import os\n+\n+from coala_utils.string_processing import unescape\n+from coalib.parsing.TomlConfParser import TomlSetting\n+\n+from tomlkit import document, table, dumps, array, string, key, integer\n+from tomlkit.items import (Array, String, Bool, Integer, Comment, Key,\n+                           KeyType, Trivia)\n+\n+\n+class TomlConfWriter:\n+\n+    \"\"\"\n+    Class that contains functions for\n+    converting toml sections to toml\n+    file\n+    \"\"\"\n+\n+    def __init__(self, file):\n+        self.file = file\n+        if os.path.isdir(self.file):\n+            self.file = os.path.join(self.file, '.coafile.toml')\n+        self.unsavable_keys = ['save', 'toml_config']\n+        self.document = document()\n+\n+    def write(self, sections):\n+        \"\"\"\n+        Converts the given sections into a TOML\n+        document and writes the document into\n+        the specified file\n+\n+        :param sections: The sections that have to be\n+                         written into the file\n+        \"\"\"\n+\n+        if sections.get('cli', None):\n+            self.remove_unsavable_settings(sections)\n+\n+        for item in sections:\n+            section = sections[item]\n+            table_name = self.get_table_name(section)\n+            if table_name in self.document:\n+                continue\n+            table_contents = table()\n+            for _, setting in section.contents.items():\n+\n+                setting_key = self.get_setting_key(setting)\n+\n+                if isinstance(setting, TomlSetting):\n+                    value = setting.original_value\n+                else:\n+                    value = self.get_original_value(setting.value)\n+\n+                if isinstance(value, Array):\n+                    table_contents.add(setting_key, array(value.as_string()))\n+                    if value.trivia.comment:\n+                        table_contents[setting_key].comment(value.trivia\n+                                                            .comment)\n+                elif isinstance(value, String):\n+                    table_contents.add(setting_key, string(value))\n+                    if value.trivia.comment:\n+                        table_contents[setting_key].comment(value.trivia\n+                                                            .comment)\n+                elif isinstance(value, Bool):\n+                    table_contents.add(setting_key, value)\n+                elif isinstance(value, Integer):\n+                    table_contents.add(setting_key, integer(value.as_string()))\n+                    if value.trivia.comment:\n+                        table_contents[setting_key].comment(value.trivia\n+                                                            .comment)\n+                elif isinstance(value, Comment):\n+                    table_contents.add(Comment(\n+                        Trivia(comment_ws='  ', comment=str(value))\n+                    ))\n+                else:\n+                    table_contents.add(setting_key, value)\n+\n+            self.document.add(table_name, table_contents)\n+        self.write_to_file()\n+\n+    def write_to_file(self):\n+        \"\"\"\n+        Write the TOML document in the specified file\n+        \"\"\"\n+        with open(self.file, 'w') as f:\n+            f.write(dumps(self.document))\n+\n+    def remove_unsavable_settings(self, sections):\n+        \"\"\"\n+        Removes the un-savable keys from the sections\n+        before they are written into a file\n+\n+        :param sections: The sections that have to be\n+                         written into the file\n+        \"\"\"\n+\n+        cli_section_contents = sections['cli'].contents\n+        for unsavable_key in self.unsavable_keys:\n+            if unsavable_key in cli_section_contents:\n+                del cli_section_contents[unsavable_key]\n+\n+    @staticmethod\n+    def get_original_value(value):\n+        \"\"\"\n+        Converts a string into its original value\n+\n+        :param value: The value as a string\n+        :return: The original value deduced from the string","author":{"login":"PrajwalM2212","avatarUrl":"https://avatars3.githubusercontent.com/u/30733262?v=4","name":"PRAJWAL M"},"reactions":[{"id":"MDg6UmVhY3Rpb240NzUxMTcyMw==","createdAt":"2019-07-26T20:21:00Z","content":"THUMBS_UP","user":{"login":"Nosferatul","name":"Alexandru-Sorin Maxim"}}],"createdAt":"2019-07-25T19:39:59Z","lastEditedAt":"2019-07-25T20:14:41Z","updatedAt":"2019-07-25T20:14:41Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwNzQ3NDY2Nw==","url":"https://github.com/coala/coala/pull/6043#discussion_r307474667","bodyText":"I will try this.","diffHunk":"@@ -0,0 +1,166 @@\n+import re\n+\n+from coalib.output.ConfWriter import ConfWriter\n+from tomlkit import dumps\n+from tomlkit import table, key, document\n+from tomlkit.items import Key, KeyType\n+from coalib.output.TomlConfWriter import TomlConfWriter\n+\n+\n+class ConfigConverter:","author":{"login":"PrajwalM2212","avatarUrl":"https://avatars3.githubusercontent.com/u/30733262?v=4","name":"PRAJWAL M"},"reactions":[],"createdAt":"2019-07-25T19:57:31Z","lastEditedAt":null,"updatedAt":"2019-07-25T19:57:31Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwNzQ3NjU4Nw==","url":"https://github.com/coala/coala/pull/6043#discussion_r307476587","bodyText":"setting.original_value can work if the setting is a TomlSetting (obtained from a toml file).\nBut  coala -s will invoke the TomlConfWriter  by which settings from the command line will be saved as well into the toml file as well. Since these are not  TomlSetting, they do not have the original_value parameter and data-type has to be guessed.","diffHunk":"@@ -0,0 +1,177 @@\n+import os\n+\n+from coala_utils.string_processing import unescape\n+from coalib.parsing.TomlConfParser import TomlSetting\n+\n+from tomlkit import document, table, dumps, array, string, key, integer\n+from tomlkit.items import (Array, String, Bool, Integer, Comment, Key,\n+                           KeyType, Trivia)\n+\n+\n+class TomlConfWriter:\n+\n+    \"\"\"\n+    Class that contains functions for\n+    converting toml sections to toml\n+    file\n+    \"\"\"\n+\n+    def __init__(self, file):\n+        self.file = file\n+        if os.path.isdir(self.file):\n+            self.file = os.path.join(self.file, '.coafile.toml')\n+        self.unsavable_keys = ['save', 'toml_config']\n+        self.document = document()\n+\n+    def write(self, sections):\n+        \"\"\"\n+        Converts the given sections into a TOML\n+        document and writes the document into\n+        the specified file\n+\n+        :param sections: The sections that have to be\n+                         written into the file\n+        \"\"\"\n+\n+        if sections.get('cli', None):\n+            self.remove_unsavable_settings(sections)\n+\n+        for item in sections:\n+            section = sections[item]\n+            table_name = self.get_table_name(section)\n+            if table_name in self.document:\n+                continue\n+            table_contents = table()\n+            for _, setting in section.contents.items():\n+\n+                setting_key = self.get_setting_key(setting)\n+\n+                if isinstance(setting, TomlSetting):\n+                    value = setting.original_value\n+                else:\n+                    value = self.get_original_value(setting.value)","author":{"login":"PrajwalM2212","avatarUrl":"https://avatars3.githubusercontent.com/u/30733262?v=4","name":"PRAJWAL M"},"reactions":[],"createdAt":"2019-07-25T20:02:47Z","lastEditedAt":null,"updatedAt":"2019-07-25T20:02:47Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwNzQ4NDExOQ==","url":"https://github.com/coala/coala/pull/6043#discussion_r307484119","bodyText":"Done","diffHunk":"@@ -0,0 +1,166 @@\n+import re\n+\n+from coalib.output.ConfWriter import ConfWriter\n+from tomlkit import dumps\n+from tomlkit import table, key, document\n+from tomlkit.items import Key, KeyType\n+from coalib.output.TomlConfWriter import TomlConfWriter\n+\n+\n+class ConfigConverter:","author":{"login":"PrajwalM2212","avatarUrl":"https://avatars3.githubusercontent.com/u/30733262?v=4","name":"PRAJWAL M"},"reactions":[],"createdAt":"2019-07-25T20:22:58Z","lastEditedAt":null,"updatedAt":"2019-07-25T20:22:58Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwNzg5ODI0NA==","url":"https://github.com/coala/coala/pull/6043#discussion_r307898244","bodyText":"when would you want to overwrite it?","diffHunk":"@@ -0,0 +1,313 @@\n+import os\n+import sys\n+\n+import tomlkit.container\n+import tomlkit.items\n+from coalib.misc import Constants\n+from tomlkit.exceptions import TOMLKitError\n+from tomlkit.items import Table, Item\n+\n+from coalib.results.SourcePosition import SourcePosition\n+from coalib.settings.Section import Section\n+from coalib.settings.Setting import Setting\n+from collections import Iterable, OrderedDict\n+import logging\n+\n+\n+class TomlSetting(Setting):\n+    \"\"\"\n+    A subclass of a setting but has an additional parameter\n+    called the original value. This class is required to\n+    infer comments and original data-type of a settings value.\n+    \"\"\"\n+\n+    def __init__(self, key,\n+                 value,\n+                 original_value,\n+                 origin: (str, SourcePosition) = '',\n+                 strip_whitespaces: bool = True,\n+                 list_delimiters: Iterable = (',', ';'),\n+                 from_cli: bool = False,\n+                 remove_empty_iter_elements: bool = True,\n+                 to_append: bool = False,\n+                 ):\n+        self.original_value = original_value\n+        super(TomlSetting, self).__init__(\n+            key,\n+            value,\n+            origin,\n+            strip_whitespaces,\n+            list_delimiters,\n+            from_cli,\n+            remove_empty_iter_elements,\n+            to_append)\n+\n+\n+class TomlConfParser:\n+    \"\"\"\n+\n+    The parser that generates sections from data in\n+    TOML config files. Each TOML table is converted\n+    into a section and the all the sections are returned\n+    as a ordered dictionary of sections.\n+\n+    \"\"\"\n+\n+    def __init__(self, remove_empty_iter_elements=True):\n+\n+        self.sections = None\n+        self.data = None\n+        self.__rand_helper = None\n+        self.__init_sections()\n+        self.__remove_empty_iter_elements = remove_empty_iter_elements\n+        self.logger = logging.getLogger()\n+\n+    def parse(self, input_data, overwrite=False):\n+        \"\"\"\n+        Parses the input and adds the new data to the existing.\n+\n+        :param input_data: The filename to parse from.\n+        :param overwrite:  If True, wipes all existing Settings inside this","author":{"login":"Nosferatul","avatarUrl":"https://avatars2.githubusercontent.com/u/15227444?v=4","name":"Alexandru-Sorin Maxim"},"reactions":[],"createdAt":"2019-07-26T20:26:32Z","lastEditedAt":null,"updatedAt":"2019-07-26T20:26:32Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwNzk1MzUxMg==","url":"https://github.com/coala/coala/pull/6043#discussion_r307953512","bodyText":"I kept the signature of ConfParser implementation of parse so that they would be consistent. But the feature seems to be not used anywhere in coala.\n\n  \n    \n      coala/coalib/parsing/ConfParser.py\n    \n    \n         Line 38\n      in\n      23b9f62\n    \n    \n    \n    \n\n        \n          \n           def parse(self, input_data, overwrite=False):","diffHunk":"@@ -0,0 +1,313 @@\n+import os\n+import sys\n+\n+import tomlkit.container\n+import tomlkit.items\n+from coalib.misc import Constants\n+from tomlkit.exceptions import TOMLKitError\n+from tomlkit.items import Table, Item\n+\n+from coalib.results.SourcePosition import SourcePosition\n+from coalib.settings.Section import Section\n+from coalib.settings.Setting import Setting\n+from collections import Iterable, OrderedDict\n+import logging\n+\n+\n+class TomlSetting(Setting):\n+    \"\"\"\n+    A subclass of a setting but has an additional parameter\n+    called the original value. This class is required to\n+    infer comments and original data-type of a settings value.\n+    \"\"\"\n+\n+    def __init__(self, key,\n+                 value,\n+                 original_value,\n+                 origin: (str, SourcePosition) = '',\n+                 strip_whitespaces: bool = True,\n+                 list_delimiters: Iterable = (',', ';'),\n+                 from_cli: bool = False,\n+                 remove_empty_iter_elements: bool = True,\n+                 to_append: bool = False,\n+                 ):\n+        self.original_value = original_value\n+        super(TomlSetting, self).__init__(\n+            key,\n+            value,\n+            origin,\n+            strip_whitespaces,\n+            list_delimiters,\n+            from_cli,\n+            remove_empty_iter_elements,\n+            to_append)\n+\n+\n+class TomlConfParser:\n+    \"\"\"\n+\n+    The parser that generates sections from data in\n+    TOML config files. Each TOML table is converted\n+    into a section and the all the sections are returned\n+    as a ordered dictionary of sections.\n+\n+    \"\"\"\n+\n+    def __init__(self, remove_empty_iter_elements=True):\n+\n+        self.sections = None\n+        self.data = None\n+        self.__rand_helper = None\n+        self.__init_sections()\n+        self.__remove_empty_iter_elements = remove_empty_iter_elements\n+        self.logger = logging.getLogger()\n+\n+    def parse(self, input_data, overwrite=False):\n+        \"\"\"\n+        Parses the input and adds the new data to the existing.\n+\n+        :param input_data: The filename to parse from.\n+        :param overwrite:  If True, wipes all existing Settings inside this","author":{"login":"PrajwalM2212","avatarUrl":"https://avatars3.githubusercontent.com/u/30733262?v=4","name":"PRAJWAL M"},"reactions":[],"createdAt":"2019-07-27T05:09:38Z","lastEditedAt":"2019-07-27T05:09:56Z","updatedAt":"2019-07-27T05:09:56Z"},{"id":"MDEyOklzc3VlQ29tbWVudDUxMjUxMTE3Nw==","url":"https://github.com/coala/coala/pull/6043#issuecomment-512511177","bodyText":"@jayvdb @RaiVaibhav @Nosferatul @ksdme @margobra8 Can you review this PR commit 45dc933","diffHunk":null,"author":{"login":"PrajwalM2212","avatarUrl":"https://avatars3.githubusercontent.com/u/30733262?v=4","name":"PRAJWAL M"},"reactions":[],"createdAt":"2019-07-17T18:21:13Z","lastEditedAt":"2019-07-21T19:11:03Z","updatedAt":"2019-07-21T19:11:03Z"},{"id":"MDEyOklzc3VlQ29tbWVudDUxMzY1MDAyMA==","url":"https://github.com/coala/coala/pull/6043#issuecomment-513650020","bodyText":"@Nosferatul All reviews have been implemented.","diffHunk":null,"author":{"login":"PrajwalM2212","avatarUrl":"https://avatars3.githubusercontent.com/u/30733262?v=4","name":"PRAJWAL M"},"reactions":[],"createdAt":"2019-07-22T05:51:16Z","lastEditedAt":null,"updatedAt":"2019-07-22T05:51:16Z"},{"id":"MDEyOklzc3VlQ29tbWVudDUxNTU5MjcwMQ==","url":"https://github.com/coala/coala/pull/6043#issuecomment-515592701","bodyText":"Also please check the error given by the appveyor. It doesn't make sense because travis passed","diffHunk":null,"author":{"login":"Nosferatul","avatarUrl":"https://avatars2.githubusercontent.com/u/15227444?v=4","name":"Alexandru-Sorin Maxim"},"reactions":[{"id":"MDg6UmVhY3Rpb240NzUzNDE3Nw==","createdAt":"2019-07-27T16:19:46Z","content":"THUMBS_UP","user":{"login":"PrajwalM2212","name":"PRAJWAL M"}}],"createdAt":"2019-07-26T20:40:52Z","lastEditedAt":null,"updatedAt":"2019-07-26T20:40:52Z"},{"id":"MDEyOklzc3VlQ29tbWVudDUxNTU5Mjc4MA==","url":"https://github.com/coala/coala/pull/6043#issuecomment-515592780","bodyText":"@ksdme @margobra8 please review","diffHunk":null,"author":{"login":"Nosferatul","avatarUrl":"https://avatars2.githubusercontent.com/u/15227444?v=4","name":"Alexandru-Sorin Maxim"},"reactions":[],"createdAt":"2019-07-26T20:41:09Z","lastEditedAt":null,"updatedAt":"2019-07-26T20:41:09Z"},{"id":"MDEyOklzc3VlQ29tbWVudDUxNzk5MjQ2NQ==","url":"https://github.com/coala/coala/pull/6043#issuecomment-517992465","bodyText":"Check Appveyor build failing. Other than that the commits LGTM.","diffHunk":null,"author":{"login":"margobra8","avatarUrl":"https://avatars1.githubusercontent.com/u/11057853?v=4","name":"Marcos Gómez"},"reactions":[],"createdAt":"2019-08-04T10:41:42Z","lastEditedAt":null,"updatedAt":"2019-08-04T10:41:42Z"}]}}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1566735002000,"issue":{"htmlUrl":"https://github.com/coala/coala/pull/5980","number":5980,"title":"Setup: Change Call Command Rtd","body":"Run initialize_options first and instead of call use run command.\nFixes #5970\n\nFor short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":4,"createdAt":"2019-02-08T10:49:07Z","updatedAt":"2019-08-25T12:10:02Z","closedAt":null,"state":"open","user":{"login":"Anmolbansal1","avatarUrl":"https://avatars0.githubusercontent.com/u/39100247?v=4"},"owner":{"login":"Anmolbansal1","avatarUrl":"https://avatars0.githubusercontent.com/u/39100247?v=4"},"assignee":{"login":"Anmolbansal1","avatarUrl":"https://avatars0.githubusercontent.com/u/39100247?v=4"},"labels":[{"name":"area/CI","color":"eb6420"},{"name":"area/documentation","color":"bfe5bf"},{"name":"difficulty/low","color":"207de5"},{"name":"importance/high","color":"eb6420"},{"name":"process/pending review","color":"bfe5bf"},{"name":"size/XS","color":"00DE0F"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala/pull/5980","comments":[{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1NjY1MTg2MQ==","url":"https://github.com/coala/coala/pull/5980#discussion_r256651861","bodyText":"this change needs to be done in the mobans template, and to be safe it should be placed higher, near the top.  Use Related to https://github.com/coala/coala/issues/5970 in the mobans MR.\nOtherwise, this PR is good.","diffHunk":"@@ -150,20 +150,21 @@ def run(self):\n \n SETUP_COMMANDS['docs'] = BuildDocsCommand\n \n+__dir__ = os.path.dirname(__file__)","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2019-02-14T00:50:03Z","lastEditedAt":null,"updatedAt":"2019-02-14T00:50:03Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQ2MjIwODg3Ng==","url":"https://github.com/coala/coala/pull/5980#issuecomment-462208876","bodyText":"@jayvdb please review","diffHunk":null,"author":{"login":"Anmolbansal1","avatarUrl":"https://avatars0.githubusercontent.com/u/39100247?v=4","name":"Anmol Bansal"},"createdAt":"2019-02-11T03:04:13Z","lastEditedAt":null,"updatedAt":"2019-02-11T03:04:13Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQ2Mzk5MDg1Nw==","url":"https://github.com/coala/coala/pull/5980#issuecomment-463990857","bodyText":"Done @jayvdb .\nAlso on Moban - https://gitlab.com/coala/mobans/merge_requests/120","diffHunk":null,"author":{"login":"Anmolbansal1","avatarUrl":"https://avatars0.githubusercontent.com/u/39100247?v=4","name":"Anmol Bansal"},"createdAt":"2019-02-15T10:34:55Z","lastEditedAt":null,"updatedAt":"2019-02-15T10:34:55Z"}]}}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1565330681000,"issue":{"htmlUrl":"https://github.com/coala/coala/pull/5997","number":5997,"title":"ShowPatchAction.py : Make patches better readable","body":"Print better diffs showing a few context lines\nCloses #5480\n\nFor short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":2,"createdAt":"2019-03-03T11:54:05Z","updatedAt":"2019-08-09T06:04:41Z","closedAt":null,"state":"open","user":{"login":"PrajwalM2212","avatarUrl":"https://avatars3.githubusercontent.com/u/30733262?v=4"},"owner":{"login":"PrajwalM2212","avatarUrl":"https://avatars3.githubusercontent.com/u/30733262?v=4"},"assignee":{"login":"PrajwalM2212","avatarUrl":"https://avatars3.githubusercontent.com/u/30733262?v=4"},"labels":[{"name":"area/actions","color":"207de5"},{"name":"difficulty/medium","color":"0052cc"},{"name":"importance/high","color":"eb6420"},{"name":"process/pending review","color":"bfe5bf"},{"name":"size/XS","color":"00DE0F"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala/pull/5997","comments":[{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2Mzk4NjQ4MQ==","url":"https://github.com/coala/coala/pull/5997#discussion_r263986481","bodyText":"I doubt whether we should only use current_line_added. The way GitHub uses to print the line number is to provide both current_line_subtracted and current_line_added for unchanged lines.","diffHunk":"@@ -48,6 +48,8 @@ def print_beautified_diff(difflines, printer):\n                           color='red')\n             current_line_subtracted += 1\n         else:\n+            printer.print(format_line(line[1:],\n+                                      real_nr=current_line_added))","author":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4","name":"Boxuan Li"},"reactions":[],"createdAt":"2019-03-09T04:40:45Z","lastEditedAt":null,"updatedAt":"2019-03-09T04:40:45Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2Mzk5MTAxMw==","url":"https://github.com/coala/coala/pull/5997#discussion_r263991013","bodyText":"@li-boxuan  Is this okay ? I think this is close to how GitHub prints.","diffHunk":"@@ -48,6 +48,8 @@ def print_beautified_diff(difflines, printer):\n                           color='red')\n             current_line_subtracted += 1\n         else:\n+            printer.print(format_line(line[1:],\n+                                      real_nr=current_line_added))","author":{"login":"PrajwalM2212","avatarUrl":"https://avatars3.githubusercontent.com/u/30733262?v=4","name":"PRAJWAL M"},"reactions":[{"id":"MDg6UmVhY3Rpb24zODQ3NDg3Mg==","createdAt":"2019-03-09T08:35:39Z","content":"THUMBS_UP","user":{"login":"li-boxuan","name":"Boxuan Li"}}],"createdAt":"2019-03-09T08:14:59Z","lastEditedAt":null,"updatedAt":"2019-03-09T08:14:59Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2Mzk5MTUyMw==","url":"https://github.com/coala/coala/pull/5997#discussion_r263991523","bodyText":"This looks great to me 👍. @Makman2 what's your view on it?","diffHunk":"@@ -48,6 +48,8 @@ def print_beautified_diff(difflines, printer):\n                           color='red')\n             current_line_subtracted += 1\n         else:\n+            printer.print(format_line(line[1:],\n+                                      real_nr=current_line_added))","author":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4","name":"Boxuan Li"},"reactions":[],"createdAt":"2019-03-09T08:36:14Z","lastEditedAt":null,"updatedAt":"2019-03-09T08:36:14Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQ2OTAxNjQ4Mg==","url":"https://github.com/coala/coala/pull/5997#issuecomment-469016482","bodyText":"Before the changes,\n\nContext lines are now displayed.","diffHunk":null,"author":{"login":"PrajwalM2212","avatarUrl":"https://avatars3.githubusercontent.com/u/30733262?v=4","name":"PRAJWAL M"},"reactions":[],"createdAt":"2019-03-03T12:04:34Z","lastEditedAt":"2019-03-03T12:13:15Z","updatedAt":"2019-03-03T12:13:15Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQ2OTAxNjc2MQ==","url":"https://github.com/coala/coala/pull/5997#issuecomment-469016761","bodyText":"The printing of the patch was handled by print_beautified_diff . This function took difflib.unified_diff as its input.  But difflib.unified_diff had n=3 which is the default number of context lines that will be supplied.\nThe print_beautified_diff took care of printing the affected lines but it did not print the normal context lines.","diffHunk":null,"author":{"login":"PrajwalM2212","avatarUrl":"https://avatars3.githubusercontent.com/u/30733262?v=4","name":"PRAJWAL M"},"reactions":[],"createdAt":"2019-03-03T12:08:09Z","lastEditedAt":"2019-03-03T14:27:04Z","updatedAt":"2019-03-03T14:27:04Z"}]}}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1566048195000,"issue":{"htmlUrl":"https://github.com/coala/coala/pull/5261","number":5261,"title":"[WIP] config: replace [default] with [all]","body":"Replaces all instances of [default] with [all]\nFixes: #4127\n\nFor short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use cobot mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":0,"createdAt":"2018-03-15T17:02:45Z","updatedAt":"2019-08-17T13:23:15Z","closedAt":"2019-08-17T13:23:15Z","state":"closed","user":{"login":"palash25","avatarUrl":"https://avatars0.githubusercontent.com/u/21367710?v=4"},"owner":{"login":"palash25","avatarUrl":"https://avatars0.githubusercontent.com/u/21367710?v=4"},"labels":[{"name":"process/wip","color":"fbca04"},{"name":"size/S","color":"B1CF0A"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala/pull/5261","comments":[]}}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1566918041000,"issue":{"htmlUrl":"https://github.com/coala/coala/pull/5299","number":5299,"title":"ConsoleInteraction: Treat input in acquire_settings","body":"When asked for the value of a setting, entering spaces, tabs, or\nnewline would let coala continue executing, which was fixed\nby displaying a message to the console which informs the user\nabout the fault and prompting him/her to enter the value again.\nCloses #3558\n\nFor short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use cobot mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":7,"createdAt":"2018-03-31T10:48:40Z","updatedAt":"2019-08-27T15:00:41Z","closedAt":"2019-08-27T15:00:41Z","state":"closed","user":{"login":"raduklb","avatarUrl":"https://avatars2.githubusercontent.com/u/36372694?v=4"},"owner":{"login":"raduklb","avatarUrl":"https://avatars2.githubusercontent.com/u/36372694?v=4"},"assignee":{"login":"raduklb","avatarUrl":"https://avatars2.githubusercontent.com/u/36372694?v=4"},"labels":[{"name":"difficulty/low","color":"207de5"},{"name":"importance/medium","color":"fbca04"},{"name":"process/wip","color":"fbca04"},{"name":"size/XS","color":"00DE0F"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala/pull/5299","comments":[{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODQzODI2OQ==","url":"https://github.com/coala/coala/pull/5299#discussion_r178438269","bodyText":"Wouldn't it make the message clearer if it said  setting is required. instead of  setting left blank. ? I think that it would help stress upon the fact that code won't proceed unless the user provides a value for the setting.\nBut then again, I am not sure if such a message is the norm for linux CLI tools.","diffHunk":"@@ -597,7 +597,12 @@ def acquire_settings(log_printer, settings_names_dict, section):\n     for setting_name, arr in sorted(settings_names_dict.items(),\n                                     key=lambda x: (join_names(x[1][1:]), x[0])):\n         value = require_setting(setting_name, arr, section)\n-        result.update({setting_name: value} if value is not None else {})\n+\n+        while str(value).strip() == '':\n+            print(str(setting_name) + ' setting left blank.')","author":{"login":"nityeshaga","avatarUrl":"https://avatars1.githubusercontent.com/u/24698858?v=4","name":"Nityesh Agarwal"},"reactions":[],"createdAt":"2018-03-31T18:08:15Z","lastEditedAt":"2018-03-31T18:10:38Z","updatedAt":"2018-03-31T18:10:38Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODU4ODYzMA==","url":"https://github.com/coala/coala/pull/5299#discussion_r178588630","bodyText":"Yes, you are right.\nI'm open for suggestions about the warning message that should be printed because I wasn't really sure what the appropriate message would be in this situation.","diffHunk":"@@ -597,7 +597,12 @@ def acquire_settings(log_printer, settings_names_dict, section):\n     for setting_name, arr in sorted(settings_names_dict.items(),\n                                     key=lambda x: (join_names(x[1][1:]), x[0])):\n         value = require_setting(setting_name, arr, section)\n-        result.update({setting_name: value} if value is not None else {})\n+\n+        while str(value).strip() == '':\n+            print(str(setting_name) + ' setting left blank.')","author":{"login":"raduklb","avatarUrl":"https://avatars2.githubusercontent.com/u/36372694?v=4","name":"Radu Capalb"},"reactions":[],"createdAt":"2018-04-02T16:55:35Z","lastEditedAt":null,"updatedAt":"2018-04-02T16:55:35Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MzIyMjQ5MQ==","url":"https://github.com/coala/coala/pull/5299#discussion_r183222491","bodyText":"use logging.warning","diffHunk":"@@ -597,7 +597,12 @@ def acquire_settings(log_printer, settings_names_dict, section):\n     for setting_name, arr in sorted(settings_names_dict.items(),\n                                     key=lambda x: (join_names(x[1][1:]), x[0])):\n         value = require_setting(setting_name, arr, section)\n-        result.update({setting_name: value} if value is not None else {})\n+\n+        while str(value).strip() == '':\n+            print(str(setting_name) + ' setting left blank.')","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-04-22T00:18:52Z","lastEditedAt":null,"updatedAt":"2018-04-22T00:18:52Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIzOTgxMQ==","url":"https://github.com/coala/coala/pull/5299#discussion_r204239811","bodyText":"use_space setting is required <--- Statement becomes confusing like asking setting of use_space\nI may be wrong here.","diffHunk":"@@ -597,7 +597,12 @@ def acquire_settings(log_printer, settings_names_dict, section):\n     for setting_name, arr in sorted(settings_names_dict.items(),\n                                     key=lambda x: (join_names(x[1][1:]), x[0])):\n         value = require_setting(setting_name, arr, section)\n-        result.update({setting_name: value} if value is not None else {})\n+\n+        while str(value).strip() == '':\n+            logging.warning(str(setting_name) + ' setting is required.')","author":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4","name":"Vaibhav Rai"},"reactions":[],"createdAt":"2018-07-22T13:15:42Z","lastEditedAt":null,"updatedAt":"2018-07-22T13:15:42Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDI0MTI4OQ==","url":"https://github.com/coala/coala/pull/5299#discussion_r204241289","bodyText":"Logic and test seems 👍","diffHunk":"@@ -597,7 +597,12 @@ def acquire_settings(log_printer, settings_names_dict, section):\n     for setting_name, arr in sorted(settings_names_dict.items(),\n                                     key=lambda x: (join_names(x[1][1:]), x[0])):\n         value = require_setting(setting_name, arr, section)\n-        result.update({setting_name: value} if value is not None else {})\n+\n+        while str(value).strip() == '':\n+            logging.warning(str(setting_name) + ' setting is required.')","author":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4","name":"Vaibhav Rai"},"reactions":[],"createdAt":"2018-07-22T14:01:54Z","lastEditedAt":null,"updatedAt":"2018-07-22T14:01:54Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDI2MzU4Ng==","url":"https://github.com/coala/coala/pull/5299#discussion_r204263586","bodyText":"@Makman2 had a similar comment on the last PR\n#3616 (review)\nHave you tested it @RaiVaibhav ?","diffHunk":"@@ -597,7 +597,12 @@ def acquire_settings(log_printer, settings_names_dict, section):\n     for setting_name, arr in sorted(settings_names_dict.items(),\n                                     key=lambda x: (join_names(x[1][1:]), x[0])):\n         value = require_setting(setting_name, arr, section)\n-        result.update({setting_name: value} if value is not None else {})\n+\n+        while str(value).strip() == '':\n+            logging.warning(str(setting_name) + ' setting is required.')","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-23T01:13:11Z","lastEditedAt":"2018-07-23T01:13:21Z","updatedAt":"2018-07-23T01:13:21Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDM2MzM0Mw==","url":"https://github.com/coala/coala/pull/5299#discussion_r204363343","bodyText":"Have you tested it\n\nAre you talking about the rest of above changes then no I didn't tested thats why I added a comment here not requested any change,the only problem I find after reading the code was the code was a message in logging","diffHunk":"@@ -597,7 +597,12 @@ def acquire_settings(log_printer, settings_names_dict, section):\n     for setting_name, arr in sorted(settings_names_dict.items(),\n                                     key=lambda x: (join_names(x[1][1:]), x[0])):\n         value = require_setting(setting_name, arr, section)\n-        result.update({setting_name: value} if value is not None else {})\n+\n+        while str(value).strip() == '':\n+            logging.warning(str(setting_name) + ' setting is required.')","author":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4","name":"Vaibhav Rai"},"reactions":[],"createdAt":"2018-07-23T11:13:43Z","lastEditedAt":"2018-07-23T11:13:53Z","updatedAt":"2018-07-23T11:13:53Z"},{"id":"MDEyOklzc3VlQ29tbWVudDM4NTMzMzc4Nw==","url":"https://github.com/coala/coala/pull/5299#issuecomment-385333787","bodyText":"@jayvdb I made the change you requested.","diffHunk":null,"author":{"login":"raduklb","avatarUrl":"https://avatars2.githubusercontent.com/u/36372694?v=4","name":"Radu Capalb"},"reactions":[],"createdAt":"2018-04-30T08:00:31Z","lastEditedAt":null,"updatedAt":"2018-04-30T08:00:31Z"},{"id":"MDEyOklzc3VlQ29tbWVudDM4Njc5Nzg5Nw==","url":"https://github.com/coala/coala/pull/5299#issuecomment-386797897","bodyText":"Do you have any idea why circleci fails?","diffHunk":null,"author":{"login":"raduklb","avatarUrl":"https://avatars2.githubusercontent.com/u/36372694?v=4","name":"Radu Capalb"},"reactions":[],"createdAt":"2018-05-05T11:11:27Z","lastEditedAt":null,"updatedAt":"2018-05-05T11:11:27Z"},{"id":"MDEyOklzc3VlQ29tbWVudDM4NzQ0MjA1Mw==","url":"https://github.com/coala/coala/pull/5299#issuecomment-387442053","bodyText":"Rebase your commit. Circleci is failing because of PycodeStyle, which has been fixed.\nc.f. #5381","diffHunk":null,"author":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4","name":"Boxuan Li"},"reactions":[],"createdAt":"2018-05-08T15:26:42Z","lastEditedAt":null,"updatedAt":"2018-05-08T15:26:42Z"},{"id":"MDEyOklzc3VlQ29tbWVudDM4NzYyMjY4OQ==","url":"https://github.com/coala/coala/pull/5299#issuecomment-387622689","bodyText":"I would also recommend you to update your local pycodestyle version to 2.4 and then run coala after flushing the cache, you will then get to see those errors that cause failure on ci\n(Also note that many rules that were added to ignore list in #5381 were removed later, and are not present in the current .coafile. )\nSo after rebasing run coala locally and lint your code as per the new rules.","diffHunk":null,"author":{"login":"virresh","avatarUrl":"https://avatars0.githubusercontent.com/u/10978108?v=4","name":"Viresh Gupta"},"reactions":[{"id":"MDg6UmVhY3Rpb24yMzM4MDc0MQ==","createdAt":"2018-05-09T05:25:49Z","content":"THUMBS_UP","user":{"login":"li-boxuan","name":"Boxuan Li"}}],"createdAt":"2018-05-09T05:17:36Z","lastEditedAt":"2018-05-09T05:18:05Z","updatedAt":"2018-05-09T05:18:05Z"},{"id":"MDEyOklzc3VlQ29tbWVudDM5MDQxMzc0Mw==","url":"https://github.com/coala/coala/pull/5299#issuecomment-390413743","bodyText":"@jayvdb Can you check it out now, please?","diffHunk":null,"author":{"login":"raduklb","avatarUrl":"https://avatars2.githubusercontent.com/u/36372694?v=4","name":"Radu Capalb"},"reactions":[],"createdAt":"2018-05-19T15:49:42Z","lastEditedAt":null,"updatedAt":"2018-05-19T15:49:42Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwNjc4OTY1Mw==","url":"https://github.com/coala/coala/pull/5299#issuecomment-406789653","bodyText":"LGTM, but @Makman2 should ack and merge it if he agrees with this approach.","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-21T11:35:40Z","lastEditedAt":null,"updatedAt":"2018-07-21T11:35:40Z"}]}}}],"repoLabels":[{"repoOwner":"coala","repoName":"coala","labels":[{"id":"MDU6TGFiZWw5OTc3NjYwNw==","name":"type/bug","color":"e11d21","default":false},{"id":"MDU6TGFiZWwxMDc2MTQyMjc=","name":"type/feature","color":"0052cc","default":false},{"id":"MDU6TGFiZWwxMDc2MTQzMjY=","name":"importance/high","color":"eb6420","default":false},{"id":"MDU6TGFiZWwxMDc2MjE5NzM=","name":"difficulty/newcomer","color":"65C8FF","default":false},{"id":"MDU6TGFiZWwxMDc2MjIwNTE=","name":"status/needs design","color":"5319e7","default":false},{"id":"MDU6TGFiZWwxMjA4ODgxMTA=","name":"type/codestyle","color":"d4c5f9","default":false},{"id":"MDU6TGFiZWwxNDEwMzY3NzQ=","name":"process/pending review","color":"bfe5bf","default":false},{"id":"MDU6TGFiZWwxNzQ3NTIwMjc=","name":"area/bears","color":"eb6420","default":false},{"id":"MDU6TGFiZWwxNzcxMzAwMzY=","name":"status/blocked","color":"e11d21","default":false},{"id":"MDU6TGFiZWwxNzgwNDczODQ=","name":"status/wontfix/accepting patches","color":"aaaaaa","default":false},{"id":"MDU6TGFiZWwxODQ4MTI3OTQ=","name":"status/needs info","color":"006b75","default":false},{"id":"MDU6TGFiZWwyMTQzMzMyMzQ=","name":"area/CI","color":"eb6420","default":false},{"id":"MDU6TGFiZWwyMTc1NTM4ODQ=","name":"bounty","color":"129e5e","default":false},{"id":"MDU6TGFiZWwyMTg0NzU4MDI=","name":"process/approved","color":"009800","default":false},{"id":"MDU6TGFiZWwyMzcxMzE2MjY=","name":"process/wip","color":"fbca04","default":false},{"id":"MDU6TGFiZWwyOTM4NjEwNTQ=","name":"size/XXL","color":"AA0000","default":false},{"id":"MDU6TGFiZWwyOTM4NjEwNTU=","name":"size/XL","color":"FF0000","default":false},{"id":"MDU6TGFiZWwyOTM4NjEwNTY=","name":"size/L","color":"FF8888","default":false},{"id":"MDU6TGFiZWwyOTM4NjEwNTc=","name":"size/M","color":"eb6420","default":false},{"id":"MDU6TGFiZWwyOTM4NjEwNjU=","name":"size/S","color":"B1CF0A","default":false},{"id":"MDU6TGFiZWwyOTM4NjEwNjY=","name":"size/XS","color":"00DE0F","default":false},{"id":"MDU6TGFiZWwzMDg4NTIxOTA=","name":"difficulty/low","color":"207de5","default":false},{"id":"MDU6TGFiZWwzMDg4NTIyOTc=","name":"difficulty/medium","color":"0052cc","default":false},{"id":"MDU6TGFiZWwzMDg4NTIzMjY=","name":"difficulty/high","color":"B319e7","default":false},{"id":"MDU6TGFiZWwzMDg4NTc5NTk=","name":"status/wontfix/not happening","color":"000000","default":false},{"id":"MDU6TGFiZWwzMDg4NTgxMDc=","name":"importance/medium","color":"fbca04","default":false},{"id":"MDU6TGFiZWwzMDg4NTgxOTk=","name":"importance/low","color":"70E870","default":false},{"id":"MDU6TGFiZWwzMDg4NTg4NjA=","name":"area/CLI","color":"006b75","default":false},{"id":"MDU6TGFiZWwzMDg4NTkwMzI=","name":"area/results","color":"eb6420","default":false},{"id":"MDU6TGFiZWwzMDg4NTkwNTQ=","name":"area/actions","color":"207de5","default":false},{"id":"MDU6TGFiZWwzMDg4NTkxMDQ=","name":"area/core","color":"eb6420","default":false},{"id":"MDU6TGFiZWwzMDg4NTk2NjM=","name":"status/duplicate","color":"000000","default":false},{"id":"MDU6TGFiZWwzMDg4NjA4MjA=","name":"importance/critical","color":"e11d21","default":false},{"id":"MDU6TGFiZWwzMDg4NjA4NTY=","name":"area/documentation","color":"bfe5bf","default":false},{"id":"MDU6TGFiZWwzMDg4NjI5MzE=","name":"difficulty/very-high","color":"e11d21","default":false},{"id":"MDU6TGFiZWwzMDkwMDgxMzE=","name":"status/invalid","color":"000000","default":false},{"id":"MDU6TGFiZWwzMDkwNDQ3MjY=","name":"area/tests","color":"bfd4f2","default":false},{"id":"MDU6TGFiZWwzMTUyODUzODU=","name":"area/usability","color":"d4c5f9","default":false},{"id":"MDU6TGFiZWwzMjgxNjg0NDU=","name":"cool and awesome","color":"0052cc","default":false},{"id":"MDU6TGFiZWwzMzYyNzE0Mzc=","name":"status/abandoned","color":"e11d21","default":false},{"id":"MDU6TGFiZWwzNDM1Nzc4NTE=","name":"area/upstream","color":"5319e7","default":false},{"id":"MDU6TGFiZWwzNTg5OTc4ODM=","name":"review carefully!","color":"d93f0b","default":false},{"id":"MDU6TGFiZWwzNzU2NzE5MTk=","name":"status/cant reproduce","color":"006b75","default":false},{"id":"MDU6TGFiZWwzOTQyMDY1NzI=","name":"type/performance","color":"fef2c0","default":false},{"id":"MDU6TGFiZWw0NTI0NDE2MTA=","name":"hacktoberfest","color":"e99695","default":false},{"id":"MDU6TGFiZWw0NzgzOTcwOTY=","name":"area/logging","color":"0052cc","default":false},{"id":"MDU6TGFiZWw0ODAxMjU5NzQ=","name":"platform/windows","color":"0052cc","default":false},{"id":"MDU6TGFiZWw0ODAxMjYwMjQ=","name":"platform/mac","color":"fbca04","default":false},{"id":"MDU6TGFiZWw0ODAxMjYwNjA=","name":"platform/linux","color":"c2e0c6","default":false},{"id":"MDU6TGFiZWw0ODM1MDQzMjk=","name":"initiatives/gci","color":"e99695","default":false},{"id":"MDU6TGFiZWw0ODU0NDkxMzE=","name":"area/languages","color":"d4c5f9","default":false},{"id":"MDU6TGFiZWw0ODk2NTc4MjU=","name":"needs backport","color":"b60205","default":false},{"id":"MDU6TGFiZWw1NTkwMDA2NTM=","name":"area/install","color":"bfdadc","default":false},{"id":"MDU6TGFiZWw1NjYwNTYwOTA=","name":"area/aspects","color":"000000","default":false},{"id":"MDU6TGFiZWw1ODEzOTA5Mzg=","name":"type/breaking-change","color":"b60205","default":false},{"id":"MDU6TGFiZWw1ODk0NDQ2ODg=","name":"status/opaque-fix","color":"006b75","default":false},{"id":"MDU6TGFiZWw1OTM2MDE0Mzg=","name":"regression","color":"b60205","default":false},{"id":"MDU6TGFiZWw2MDQ1OTI1NjI=","name":"importance/trivial","color":"d4c5f9","default":false},{"id":"MDU6TGFiZWw2NTIwNDIyNzU=","name":"area/lintbears","color":"ededed","default":false},{"id":"MDU6TGFiZWw2NTIzOTkyNzQ=","name":"area/config","color":"fbca04","default":false},{"id":"MDU6TGFiZWw2NTI2NzAzMzE=","name":"status/needs discussion","color":"d93f0b","default":false},{"id":"MDU6TGFiZWw2NjY4MjQ4MTg=","name":"status/stale","color":"fbca04","default":false},{"id":"MDU6TGFiZWw4NDA5ODQ4MTA=","name":"area/genericbears","color":"ededed","default":false},{"id":"MDU6TGFiZWw5NTk4NTM4NjE=","name":"status/ci-approved","color":"ededed","default":false},{"id":"MDU6TGFiZWw5NjYwNDY2NzY=","name":"process/needs rebase","color":"e52db1","default":false},{"id":"MDU6TGFiZWwxMjE4ODkyMjU4","name":"area/dependencies","color":"96f7bf","default":false}]}],"repositories":[{"repoOwner":"coala","repoName":"coala","isPrivate":false,"lastSeenAt":"2019-09-03T05:40:11Z"}]}